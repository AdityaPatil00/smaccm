package MissionSoftware
public
	with SMACCM_SYS;
	with DATA_TYPES;
	with SMACCM_DATA;
	
	
process MissionSoftware
	features
		uart_out : out event data port;
		uart_in : in event data port;
		can_out : out event data port;
		can_in : in event data port;
end MissionSoftware;	

process implementation MissionSoftware.i
	subcomponents
		uart : thread UART;
		input : thread Input;
		server : thread Server;
		output : thread Output;
		pproxy : thread PixhawkProxy;
		can : thread CAN;
		vm : thread VM;
		
	connections
		uart_inside : port uart_in -> uart.data_in;
		can_inside : port can_in -> can.data_in;
		uart_outside : port uart.data_out -> uart_out;
		can_outside : port can.data_out -> can_out;

		
		uart_rx : data access uart.rx -> input.rx;
		
		input_to_svr : data access input.to_svr -> server.input;
		
		server_output : data access server.output -> output.input;
		
		output_tx : data access output.tx -> uart.tx;
		
		pixhawk_data : data access pproxy.pixhawk_data -> server.pixhawk_data;
		proxy_to_can : data access pproxy.tx -> can.tx;
		
		can_to_proxy : data access can.rx -> pproxy.rx;
		
		camera_data : data access vm.camera_data -> server.camera_data;
		
end MissionSoftware.i;
	
thread UART
	features
		tx : provides data access Data_Types::ivory_string_UartPacket;
		rx : provides data access Data_Types::array_96_Unsigned_8.impl;
		data_in : in event data port;
		data_out : out event data port;
	properties
		Dispatch_Protocol => Sporadic;
end UART;
	
thread Input
	features
		--not sure what the dimension of this array should be
		rx : requires data access Data_Types::array_96_Unsigned_8.impl;
		to_svr : requires data access SMACCM_DATA::ServerInputData.i;
	properties
		Dispatch_Protocol => Periodic;
end Input;
	
thread Server
	features
		input : provides data access SMACCM_DATA::ServerInputData.i;
		output : requires data access SMACCM_DATA::ServerOutputData.i;
		pixhawk_data : requires data access SMACCM_DATA::PixHawkData.i;
		camera_data : requires data access Data_Types::array_80_Unsigned_8.impl;
	properties
		Dispatch_Protocol => Sporadic;
end Server;
	
thread Output
	features
		input : provides data access SMACCM_DATA::ServerOutputData.i;
		tx : requires data access Data_Types::ivory_string_UartPacket;
	properties
		Dispatch_Protocol => Sporadic;
end Output;
	
thread PixhawkProxy
	features
		pixhawk_commands : provides data access;
		pixhawk_data : provides data access SMACCM_DATA::PixHawkData.i;
		rx : requires data access Data_Types::can_message;
		tx : requires data access SMACCM_DATA::CanSenderData.i;
	properties
		Dispatch_Protocol => Periodic;
end PixhawkProxy;
	
thread CAN
	features
		rx : provides data access Data_Types::can_message;
		tx : provides data access SMACCM_DATA::CanSenderData.i;
		data_out : out event data port;
		data_in : in event data port;
	properties
		Dispatch_Protocol => Sporadic;
end CAN;

thread VM
	features
		camera_data : provides data access Data_Types::array_80_Unsigned_8.impl;
	properties
		Dispatch_Protocol => Sporadic;
end VM;
	
end MissionSoftware;