/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/john/git/smaccm/models/SmaccmPhaseIIIV2/top_i_assembly.camkes
   Created on: 2016/06/09 14:22:58
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the main CAmkES assembly for the  
  AADL system instance rooted at top_i_Instance.

 **************************************************************************/
import <std_connector.camkes>;
import "components/dispatch_periodic/dispatch_periodic.camkes";


import <TimeServerKZM/TimeServer.camkes>;


import "components/CAN_hw/CAN_hw.camkes";
import "components/UART_in/UART_in.camkes";
import "components/UART_out/UART_out.camkes";
import "components/Server/Server.camkes";
import "components/CAN_thread/CAN_thread.camkes";
import "components/Virtual_Machine/Virtual_Machine.camkes";
import "components/UART_HW/UART_HW.camkes";



connector seL4RPCCallDataport {
    from Procedure client template "seL4RPCCallDataport-from.template.c";
    to Procedure server template "seL4RPCCallDataport-to.template.c";
}


assembly {
	composition {
        // Periodic components
        component dispatch_periodic dispatch_periodic_inst;


		component TimeServerKZM time_server;


		// IRQ-handling hardware components

		// component instances for all AADL-defined threads
		component CAN_hw CAN_hw_inst;
		component UART_in UART_in_inst;
		component UART_out UART_out_inst;
		component Server Server_inst;
		component CAN_thread CAN_thread_inst;
		component Virtual_Machine Virtual_Machine_inst;
		component UART_HW UART_HW_inst;


		// connections from active dispatchers to passive threads
	

		// connections from active dispatcher send/receive to other active dispatcher send/receive
		connection seL4RPCCall conn1 (from CAN_hw_inst.CAN_hw_send_status, to CAN_thread_inst.get_status); 
			connection seL4RPCCall conn2 (from CAN_hw_inst.CAN_hw_fragement_reassembly, to CAN_thread_inst.fragement_reasembly); 
			connection seL4RPCCall conn3 (from UART_in_inst.UART_in_send_gidl, to Server_inst.get_input); 
			connection seL4RPCCall conn4 (from UART_out_inst.UART_out_send_packet, to UART_HW_inst.get_packet); 
			connection seL4RPCCall conn5 (from Server_inst.Server_send_output, to UART_out_inst.get_gidl); 
			connection seL4RPCCall conn6 (from Server_inst.Server_send_can, to CAN_thread_inst.from_server); 
			connection seL4RPCCall conn7 (from CAN_thread_inst.CAN_thread_fragment_request, to CAN_hw_inst.fragment_request); 
			connection seL4RPCCall conn8 (from CAN_thread_inst.CAN_thread_fragment_complete, to CAN_hw_inst.fragment_complete); 
			connection seL4RPCCall conn9 (from CAN_thread_inst.CAN_thread_send_abort, to CAN_hw_inst.get_abort); 
			connection seL4RPCCall conn10 (from Virtual_Machine_inst.Virtual_Machine_camera_data, to Server_inst.camera_data); 
			connection seL4RPCCall conn11 (from UART_HW_inst.UART_HW_send_packet, to UART_in_inst.get_packet); 
			connection seL4RPCCall conn12 (from UART_HW_inst.UART_HW_recv_resp, to UART_out_inst.recv_response); 
			

		// Periodic dispatcher connections
		connection seL4RPCCall conn13 (from dispatch_periodic_inst.UART_in_periodic_dispatcher, to UART_in_inst.UART_in_periodic_dispatcher);
		connection seL4RPCCall conn14 (from dispatch_periodic_inst.UART_out_periodic_dispatcher, to UART_out_inst.UART_out_periodic_dispatcher);
		connection seL4RPCCall conn15 (from dispatch_periodic_inst.Server_periodic_dispatcher, to Server_inst.Server_periodic_dispatcher);
		connection seL4RPCCall conn16 (from dispatch_periodic_inst.CAN_thread_periodic_dispatcher, to CAN_thread_inst.CAN_thread_periodic_dispatcher);


		connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
		connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);


		// IRQ connections (if any)

		// component read/write connections
		connection seL4RPCCall conn17 (from CAN_thread_inst.CAN_thread_to_server, to Server_inst.get_can);
		connection seL4RPCCall conn18 (from Virtual_Machine_inst.Virtual_Machine_camera_data, to Server_inst.camera_data);


		// Direct RPC connections

		// Shared memory connections
	}
    configuration {
		dispatch_periodic_inst.timer_attributes = "10"; 
		dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
		dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";				
		dispatch_periodic_inst.priority = 201;  
		UART_in_inst.priority = 1;	

		UART_out_inst.priority = 1;	

		Server_inst.priority = 1;	

		CAN_thread_inst.priority = 1;	


		UART_in_inst._control_stack_size = 4096;	

		UART_out_inst._control_stack_size = 4096;	

		Server_inst._control_stack_size = 4096;	

		CAN_thread_inst._control_stack_size = 4096;	

		

	

    }
}


/**************************************************************************
  End of autogenerated file: /home/john/git/smaccm/models/SmaccmPhaseIIIV2/top_i_assembly.camkes
 **************************************************************************/
