/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/john/git/smaccm/models/SmaccmPhaseIIIV2/components/CAN_hw/src/smaccm_CAN_hw.c.template
   Created on: 2016/06/09 14:22:58
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This C file contains the implementations of the AADL primitives
  used by user-level declarations for thread CAN_hw.   

  The user code runs in terms of "dispatchers", which cause 
  dispatch user-level handlers to execute.  These handlers can 
  communicate using the standard AADL primitives, which are mapped
  to C functions.

  The send/receive handlers are not thread safe in CAmkES; it is 
  assumed that this is handled by the CAmkES sequentialized access 
  to the dispatch handler.  There is only one dispatch interface 
  for the component containing all of the dispatch points.

  They are thread safe for eChronos.

  The read/write handlers are thread safe because the writer comes 
  through a dispatch interface but the reader is "local" on a dispatch
  interface and so contention may occur.


 **************************************************************************/
#include <smaccm_CAN_hw.h>
#include <string.h>
#include <CAN_hw.h>

///////////////////////////////////////////////////////////////////////////
//
// Local prototypes for AADL dispatchers
//
///////////////////////////////////////////////////////////////////////////
static void 
smaccm_CAN_hw_get_abort_dispatcher(bool * get_abort); 
static void 
smaccm_CAN_hw_fragment_request_dispatcher(SMACCM_DATA__can_message_i * fragment_request); 
static void 
smaccm_CAN_hw_fragment_complete_dispatcher(SMACCM_DATA__can_message_i * fragment_complete); 
 
 



/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	get_abort
 * 
 ************************************************************************/

static bool smaccm_queue_get_abort [1];
static bool smaccm_queue_full_get_abort  = false;
static uint32_t smaccm_queue_front_get_abort  = 0;
static uint32_t smaccm_queue_back_get_abort  = 0;

bool smaccm_queue_is_full_get_abort() {
	return (smaccm_queue_front_get_abort == smaccm_queue_back_get_abort) && (smaccm_queue_full_get_abort);
}

bool smaccm_queue_is_empty_get_abort() {
	return (smaccm_queue_front_get_abort == smaccm_queue_back_get_abort) && (!smaccm_queue_full_get_abort); 
}

bool smaccm_queue_read_get_abort(bool * get_abort) {
	if (smaccm_queue_is_empty_get_abort()) {
		return false;
	} else {
		*get_abort = smaccm_queue_get_abort[smaccm_queue_back_get_abort] ;

		smaccm_queue_back_get_abort = (smaccm_queue_back_get_abort + 1) % 1; 
		smaccm_queue_full_get_abort = false ; 
		return true;
	}
}

bool smaccm_queue_write_get_abort(const bool * get_abort) {
	if (smaccm_queue_is_full_get_abort()) {
		return false;
	} else {
		smaccm_queue_get_abort[smaccm_queue_front_get_abort] = *get_abort ;

		smaccm_queue_front_get_abort = (smaccm_queue_front_get_abort + 1) % 1; 		
		if (smaccm_queue_back_get_abort == smaccm_queue_front_get_abort) { 
			smaccm_queue_full_get_abort = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  get_abort_write_bool: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool get_abort_write_bool(const bool * arg) {
	bool result;
	smaccm_can_hw_get_abort_mut_lock(); 
	result = smaccm_queue_write_get_abort( arg);
	smaccm_can_hw_get_abort_mut_unlock(); 
	return result;
}


/************************************************************************
 *  CAN_hw_read_get_abort: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool CAN_hw_read_get_abort(bool * arg) {
	bool result; 
	smaccm_can_hw_get_abort_mut_lock(); 
	result = smaccm_queue_read_get_abort(arg);
	smaccm_can_hw_get_abort_mut_unlock(); 
	return result;
}


/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	fragment_request
 * 
 ************************************************************************/

static SMACCM_DATA__can_message_i smaccm_queue_fragment_request [1];
static bool smaccm_queue_full_fragment_request  = false;
static uint32_t smaccm_queue_front_fragment_request  = 0;
static uint32_t smaccm_queue_back_fragment_request  = 0;

bool smaccm_queue_is_full_fragment_request() {
	return (smaccm_queue_front_fragment_request == smaccm_queue_back_fragment_request) && (smaccm_queue_full_fragment_request);
}

bool smaccm_queue_is_empty_fragment_request() {
	return (smaccm_queue_front_fragment_request == smaccm_queue_back_fragment_request) && (!smaccm_queue_full_fragment_request); 
}

bool smaccm_queue_read_fragment_request(SMACCM_DATA__can_message_i * fragment_request) {
	if (smaccm_queue_is_empty_fragment_request()) {
		return false;
	} else {
		memcpy(fragment_request, &smaccm_queue_fragment_request[smaccm_queue_back_fragment_request], sizeof(SMACCM_DATA__can_message_i));

		smaccm_queue_back_fragment_request = (smaccm_queue_back_fragment_request + 1) % 1; 
		smaccm_queue_full_fragment_request = false ; 
		return true;
	}
}

bool smaccm_queue_write_fragment_request(const SMACCM_DATA__can_message_i * fragment_request) {
	if (smaccm_queue_is_full_fragment_request()) {
		return false;
	} else {
		memcpy(&smaccm_queue_fragment_request[smaccm_queue_front_fragment_request], fragment_request, sizeof(SMACCM_DATA__can_message_i));

		smaccm_queue_front_fragment_request = (smaccm_queue_front_fragment_request + 1) % 1; 		
		if (smaccm_queue_back_fragment_request == smaccm_queue_front_fragment_request) { 
			smaccm_queue_full_fragment_request = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  fragment_request_write_SMACCM_DATA__can_message_i: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool fragment_request_write_SMACCM_DATA__can_message_i(const SMACCM_DATA__can_message_i * arg) {
	bool result;
	smaccm_can_hw_fragment_request_mut_lock(); 
	result = smaccm_queue_write_fragment_request( arg);
	smaccm_can_hw_fragment_request_mut_unlock(); 
	return result;
}


/************************************************************************
 *  CAN_hw_read_fragment_request: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool CAN_hw_read_fragment_request(SMACCM_DATA__can_message_i * arg) {
	bool result; 
	smaccm_can_hw_fragment_request_mut_lock(); 
	result = smaccm_queue_read_fragment_request(arg);
	smaccm_can_hw_fragment_request_mut_unlock(); 
	return result;
}


/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	fragment_complete
 * 
 ************************************************************************/

static SMACCM_DATA__can_message_i smaccm_queue_fragment_complete [1];
static bool smaccm_queue_full_fragment_complete  = false;
static uint32_t smaccm_queue_front_fragment_complete  = 0;
static uint32_t smaccm_queue_back_fragment_complete  = 0;

bool smaccm_queue_is_full_fragment_complete() {
	return (smaccm_queue_front_fragment_complete == smaccm_queue_back_fragment_complete) && (smaccm_queue_full_fragment_complete);
}

bool smaccm_queue_is_empty_fragment_complete() {
	return (smaccm_queue_front_fragment_complete == smaccm_queue_back_fragment_complete) && (!smaccm_queue_full_fragment_complete); 
}

bool smaccm_queue_read_fragment_complete(SMACCM_DATA__can_message_i * fragment_complete) {
	if (smaccm_queue_is_empty_fragment_complete()) {
		return false;
	} else {
		memcpy(fragment_complete, &smaccm_queue_fragment_complete[smaccm_queue_back_fragment_complete], sizeof(SMACCM_DATA__can_message_i));

		smaccm_queue_back_fragment_complete = (smaccm_queue_back_fragment_complete + 1) % 1; 
		smaccm_queue_full_fragment_complete = false ; 
		return true;
	}
}

bool smaccm_queue_write_fragment_complete(const SMACCM_DATA__can_message_i * fragment_complete) {
	if (smaccm_queue_is_full_fragment_complete()) {
		return false;
	} else {
		memcpy(&smaccm_queue_fragment_complete[smaccm_queue_front_fragment_complete], fragment_complete, sizeof(SMACCM_DATA__can_message_i));

		smaccm_queue_front_fragment_complete = (smaccm_queue_front_fragment_complete + 1) % 1; 		
		if (smaccm_queue_back_fragment_complete == smaccm_queue_front_fragment_complete) { 
			smaccm_queue_full_fragment_complete = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  fragment_complete_write_SMACCM_DATA__can_message_i: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool fragment_complete_write_SMACCM_DATA__can_message_i(const SMACCM_DATA__can_message_i * arg) {
	bool result;
	smaccm_can_hw_fragment_complete_mut_lock(); 
	result = smaccm_queue_write_fragment_complete( arg);
	smaccm_can_hw_fragment_complete_mut_unlock(); 
	return result;
}


/************************************************************************
 *  CAN_hw_read_fragment_complete: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool CAN_hw_read_fragment_complete(SMACCM_DATA__can_message_i * arg) {
	bool result; 
	smaccm_can_hw_fragment_complete_mut_lock(); 
	result = smaccm_queue_read_fragment_complete(arg);
	smaccm_can_hw_fragment_complete_mut_unlock(); 
	return result;
}



static SMACCM_DATA__can_message_i * smaccm_tmp_array_fragement_reassembly; 
static uint32_t * smaccm_tmp_used_fragement_reassembly;
static uint32_t smaccm_max_tmp_array_fragement_reassembly; 	
static bool * smaccm_tmp_array_send_status; 
static uint32_t * smaccm_tmp_used_send_status;
static uint32_t smaccm_max_tmp_array_send_status; 	


 
 
 

/************************************************************************
 *  dispatch_dispatch_get_abort: 
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 * 
 * This is the function invoked by an active thread dispatcher to 
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 * 
 ************************************************************************/

void dispatch_dispatch_get_abort(
  const bool * in_arg ,
  smaccm_CAN_hw_get_abort_struct *out_arg) {
	smaccm_max_tmp_array_send_status = 0;
	smaccm_max_tmp_array_fragement_reassembly = 0;

}	


/************************************************************************
 *  dispatch_dispatch_fragment_request: 
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 * 
 * This is the function invoked by an active thread dispatcher to 
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 * 
 ************************************************************************/

void dispatch_dispatch_fragment_request(
  const SMACCM_DATA__can_message_i * in_arg ,
  smaccm_CAN_hw_fragment_request_struct *out_arg) {
	smaccm_max_tmp_array_send_status = 0;
	smaccm_max_tmp_array_fragement_reassembly = 0;

}	


/************************************************************************
 *  dispatch_dispatch_fragment_complete: 
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 * 
 * This is the function invoked by an active thread dispatcher to 
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 * 
 ************************************************************************/

void dispatch_dispatch_fragment_complete(
  const SMACCM_DATA__can_message_i * in_arg ,
  smaccm_CAN_hw_fragment_complete_struct *out_arg) {
	smaccm_max_tmp_array_send_status = 0;
	smaccm_max_tmp_array_fragement_reassembly = 0;

}	



/************************************************************************
 * CAN_hw_write_fragement_reassembly 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool CAN_hw_write_fragement_reassembly(const SMACCM_DATA__can_message_i * fragement_reassembly) {
	if (smaccm_max_tmp_array_fragement_reassembly > 0 && 
		 *smaccm_tmp_used_fragement_reassembly < smaccm_max_tmp_array_fragement_reassembly) {
		memcpy(&smaccm_tmp_array_fragement_reassembly[*smaccm_tmp_used_fragement_reassembly], fragement_reassembly, sizeof(SMACCM_DATA__can_message_i));

		(*smaccm_tmp_used_fragement_reassembly)++;
		return true;
	} else {
		return false;
	}
}

/************************************************************************
 * CAN_hw_write_send_status 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool CAN_hw_write_send_status(const bool * send_status) {
	if (smaccm_max_tmp_array_send_status > 0 && 
		 *smaccm_tmp_used_send_status < smaccm_max_tmp_array_send_status) {
		smaccm_tmp_array_send_status[*smaccm_tmp_used_send_status] = *send_status;

		(*smaccm_tmp_used_send_status)++;
		return true;
	} else {
		return false;
	}
}


/************************************************************************
 * 
smaccm_CAN_hw_get_abort_dispatcher
 * Invoked from local active thread.
 * 
 * This is the dispatcher function invoked to respond to an incoming thread 
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 * 
 ******************************************************************************/
static smaccm_CAN_hw_get_abort_struct smaccm_CAN_hw_get_abort_arg;

void 
smaccm_CAN_hw_get_abort_dispatcher(bool * get_abort) {

	 
	// make the call: 
	dispatch_dispatch_get_abort( get_abort,
  &smaccm_CAN_hw_get_abort_arg	
		); 
	 

}
/************************************************************************
 * 
smaccm_CAN_hw_fragment_request_dispatcher
 * Invoked from local active thread.
 * 
 * This is the dispatcher function invoked to respond to an incoming thread 
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 * 
 ******************************************************************************/
static smaccm_CAN_hw_fragment_request_struct smaccm_CAN_hw_fragment_request_arg;

void 
smaccm_CAN_hw_fragment_request_dispatcher(SMACCM_DATA__can_message_i * fragment_request) {

	 
	// make the call: 
	dispatch_dispatch_fragment_request( fragment_request,
  &smaccm_CAN_hw_fragment_request_arg	
		); 
	 

}
/************************************************************************
 * 
smaccm_CAN_hw_fragment_complete_dispatcher
 * Invoked from local active thread.
 * 
 * This is the dispatcher function invoked to respond to an incoming thread 
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 * 
 ******************************************************************************/
static smaccm_CAN_hw_fragment_complete_struct smaccm_CAN_hw_fragment_complete_arg;

void 
smaccm_CAN_hw_fragment_complete_dispatcher(SMACCM_DATA__can_message_i * fragment_complete) {

	 
	// make the call: 
	dispatch_dispatch_fragment_complete( fragment_complete,
  &smaccm_CAN_hw_fragment_complete_arg	
		); 
	 

}

 
////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////


/**************************************************************************
  End of autogenerated file: /home/john/git/smaccm/models/SmaccmPhaseIIIV2/components/CAN_hw/src/smaccm_CAN_hw.c.template
 **************************************************************************/
