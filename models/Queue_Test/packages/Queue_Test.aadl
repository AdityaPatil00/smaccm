package Queue_Test
public
  with Base_Types;

system sys
  features
    inport : in event data port Base_Types::Integer;
	outport : out event data port Base_Types::Integer{Queue_Size => 2;};
    
  annex agree {**
  		
    --make an assumption about how often data comes into the system
    assume "input frequency" :
    	(prev(inport.INSERT, false) or 
    	prev(prev(inport.INSERT,false),false)) => not (inport.INSERT);
    	
    assume "initial outport" : outport = 0 -> true;
    
    assume "positive input" : inport >= 0;
    
    assume "don't remove" : outport.COUNT <= 0 => not outport.REMOVE;
    	
    eq in_data : int = if(inport.INSERT) then inport else 0;
    eq input_total : int = in_data -> pre(input_total) + in_data;
    
  	guarantee "outport bound" :
  		outport <= input_total;
  		
  	guarantee "monotonic output" :
  		true -> outport >= pre(outport);
  		
  	guarantee "output changes only on remove" :
  		true -> outport != pre(outport) => pre(outport.REMOVE);
  		
  	
  	
  **};
end sys;


system implementation sys.impl

  subcomponents
    sysa : system subsysa;
    sysb : system subsysb;
    sysc : system subsysa;
    
  connections
  	conn0 : port inport -> sysa.inport;
  	conn1 : port sysa.outport -> sysb.inport;
  	conn2 : port sysc.outport -> sysb.inport;
  	conn3 : port sysb.outport -> outport;
  	conn4 : port inport -> sysc.inport;

  annex agree {**
  	calendar: sysa, sysc, sysb, sysb;
  	
  	assert(inport.INSERT => not(sysa.CLK or sysc.CLK));
  	assert(outport.COUNT > 0 and (not sysb.CLK) => outport.REMOVE);
  	
  	lemma "outport count bound" : outport.COUNT <= 2;
  	lemma "outport count positive" : outport.COUNT >= 0;
  	
  **};

end sys.impl;



system subsysa
  features
    inport : in event data port Base_Types::Integer;
	outport : out event data port Base_Types::Integer;
	
  annex agree {**
  	guarantee "foo" : if(inport.COUNT > 0) then
  						inport.REMOVE and
  						outport.INSERT and
  						outport = inport div 2
  					  else
  					  	not inport.REMOVE and
  					  	not outport.INSERT;
  					  	
  	guarantee "initial outport" : outport = 0 -> true;
  	
  **};
end subsysa;


system subsysb
  features
    inport : in event data port Base_Types::Integer;
	outport : out event data port Base_Types::Integer;

  annex agree {**
  	guarantee "foo" : if(inport.COUNT > 0) then
  						inport.REMOVE and
  						outport.INSERT and
  						outport = inport + prev(outport,0)
  					  else
  					  	not inport.REMOVE and
  					  	not outport.INSERT and
  					  	outport = prev(outport, 0);
  					  	
  	guarantee "initial outport" : outport = 0 -> true;
  	
  **};
end subsysb;


end Queue_Test;