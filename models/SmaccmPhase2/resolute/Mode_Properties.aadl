package Mode_Properties
public

annex resolute 
{**

--adding this stub so that this file no longer shows
--as an error
command_channel(c : connection) : bool =
	true
	
no_external_commands(x : component, context : component) <=
  ** x " does not receive commands from outside " context **

  forall (c : x.connections).
  forall (y : component).
    connected(y, c, x) and command_channel(c) => 
   	  contained(y, context) and no_external_commands(y, context)

schedulable(p : component) <= 
  ** p " is schedulable" ** 
  analysis("schedule")

receives_mavlink(t : component) <= 
  ** t " receives mavlink data" **   

  exists(c : t.connections). exists(y : component). is_mavlink_connection(y, t, c)

is_mavlink_connection(x : component, t : component, c : connection) <=
  ** x " supplies mavlink data to " t **
  is_mavlink_type(c) and connected(x, c, t)

is_mavlink_type(c : connection) <=
  ** "connection " c " is of mavlink type" **  
  has_type(c) and type(c) = DATATYPES::MAVLink
  
no_radio_commands(x : component) <=
  ** x " does not receive commands from the radio" **

  forall (c : x.connections).
  forall (y : component).
    connected(y, c, x) and command_channel(c) =>
      is_not_radio(y) and no_radio_commands(y)

is_not_radio(x : component) : bool =
	true
  --not class_of(x, SOFTWARE::Command_Control_Telemetry)


**};
    
end Mode_Properties;