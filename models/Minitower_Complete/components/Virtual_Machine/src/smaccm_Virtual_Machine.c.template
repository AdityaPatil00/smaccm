/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

  This C file contains the implementations of the AADL primitives
  used by user-level declarations for thread Virtual_Machine.

  The user code runs in terms of "dispatchers", which cause
  dispatch user-level handlers to execute.  These handlers can
  communicate using the standard AADL primitives, which are mapped
  to C functions.

  The send/receive handlers are not thread safe in CAmkES; it is
  assumed that this is handled by the CAmkES sequentialized access
  to the dispatch handler.  There is only one dispatch interface
  for the component containing all of the dispatch points.

  They are thread safe for eChronos.

  The read/write handlers are thread safe because the writer comes
  through a dispatch interface but the reader is "local" on a dispatch
  interface and so contention may occur.

 **************************************************************************/

#include "smaccm_Virtual_Machine.h"
#include <string.h>
#include <Virtual_Machine.h>

///////////////////////////////////////////////////////////////////////////
//
// Local prototypes for AADL dispatchers
//
///////////////////////////////////////////////////////////////////////////
static void smaccm_Virtual_Machine_server2self_reboot_dispatcher(bool * server2self_reboot);




/************************************************************************
 *
 * Static variables and queue management functions for port:
 *     server2self_reboot
 *
 ************************************************************************/

static bool smaccm_queue_server2self_reboot [1];
static bool smaccm_queue_full_server2self_reboot  = false;
static uint32_t smaccm_queue_front_server2self_reboot  = 0;
static uint32_t smaccm_queue_back_server2self_reboot  = 0;

bool smaccm_queue_is_full_server2self_reboot() {
    return (smaccm_queue_front_server2self_reboot == smaccm_queue_back_server2self_reboot) && (smaccm_queue_full_server2self_reboot);
}

bool smaccm_queue_is_empty_server2self_reboot() {
    return (smaccm_queue_front_server2self_reboot == smaccm_queue_back_server2self_reboot) && (!smaccm_queue_full_server2self_reboot);
}

bool smaccm_queue_read_server2self_reboot(bool * server2self_reboot) {
    if (smaccm_queue_is_empty_server2self_reboot()) {
        return false;
    } else {
        *server2self_reboot = smaccm_queue_server2self_reboot[smaccm_queue_back_server2self_reboot] ;

        smaccm_queue_back_server2self_reboot = (smaccm_queue_back_server2self_reboot + 1) % 1;
        smaccm_queue_full_server2self_reboot = false ;
        return true;
    }
}

bool smaccm_queue_write_server2self_reboot(const bool * server2self_reboot) {
    if (smaccm_queue_is_full_server2self_reboot()) {
        return false;
    } else {
        smaccm_queue_server2self_reboot[smaccm_queue_front_server2self_reboot] = *server2self_reboot ;

        smaccm_queue_front_server2self_reboot = (smaccm_queue_front_server2self_reboot + 1) % 1;
        if (smaccm_queue_back_server2self_reboot == smaccm_queue_front_server2self_reboot) {
            smaccm_queue_full_server2self_reboot = true ;
        }
        return true;
    }
}

/************************************************************************
 *  server2self_reboot_write_bool:
 * Invoked by: remote interface.
 *
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 *
 ************************************************************************/

bool server2self_reboot_write_bool(const bool * arg) {
    bool result;
    smaccm_virtual_machine_server2self_reboot_mut_lock();
    result = smaccm_queue_write_server2self_reboot( arg);
    smaccm_virtual_machine_server2self_reboot_mut_unlock(); 
    return result;
}


/************************************************************************
 *  Virtual_Machine_read_server2self_reboot:
 * Invoked from local active thread.
 *
 * This is the function invoked by the active thread to read from the
 * input event data queue circular buffer.
 *
 ************************************************************************/

bool Virtual_Machine_read_server2self_reboot(bool * arg) {
    bool result;
    smaccm_virtual_machine_server2self_reboot_mut_lock();
    result = smaccm_queue_read_server2self_reboot(arg);
    smaccm_virtual_machine_server2self_reboot_mut_unlock(); 
    return result;
}




 
/************************************************************************
 *  dispatch_dispatch_server2self_reboot:
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void dispatch_dispatch_server2self_reboot(
  const bool * in_arg ,
  smaccm_Virtual_Machine_server2self_reboot_struct *out_arg) {
     
     
}


/************************************************************************
 *  Virtual_Machine_write_self2server:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 ************************************************************************/

bool Virtual_Machine_write_self2server(const SMACCM_DATA__Camera_Bounding_Box_i * self2server) {
    return Virtual_Machine_self2server_write_SMACCM_DATA__Camera_Bounding_Box_i(self2server);
}


/************************************************************************
 * smaccm_Virtual_Machine_server2self_reboot_dispatcher
 * Invoked from local active thread.
 *
 * This is the dispatcher function invoked to respond to an incoming thread
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 *
 ******************************************************************************/
static smaccm_Virtual_Machine_server2self_reboot_struct smaccm_Virtual_Machine_server2self_reboot_arg;

static void smaccm_Virtual_Machine_server2self_reboot_dispatcher(bool * server2self_reboot) {
    // make the call:
    dispatch_dispatch_server2self_reboot(
        server2self_reboot,
        &smaccm_Virtual_Machine_server2self_reboot_arg
    );
}


////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

