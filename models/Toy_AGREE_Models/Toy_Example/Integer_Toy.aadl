package Integer_Toy
public 
   with Base_Types;
   with Programming_Properties;
   
system A
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
		properties
			Source_Text => ("C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\data",
								"C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\models\\MC_ToyA_sl.slx", "MC_ToyA_After_sl.slx",
								"MC_ToyA");
			
	annex agree {** 
		assume "A input range" : Input < 20;
		assume "A input range new" : Input >= 1;
		guarantee "A output range" : Output < 2*Input;
	**};	
end A ; 

system B
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
		properties
			Source_Text => ("C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\data",
								"C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\models\\MC_ToyB_sl.slx", "MC_ToyB_After_sl.slx",
								"MC_ToyB");
			
	annex agree {** 
		assume "B input range" : Input < 20;
		guarantee "B output range" : Output < Input + 15;
		eq d : int = 0;
	**};	
end B ; 

system C
	features
		Input1: in data port Base_Types::Integer;
		Input2: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
		properties
			Source_Text => ("C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\models\\data",
								"C:\\Project_Files\\ATC\\Simulink\\applications\\MC\\models\\MC_ToyC_sl.slx", "MC_ToyC_sl_After.slx",
								"MC_ToyC");
			
	annex agree {** 
		guarantee "C output range" : Output = Input1 + Input2;
	**};	
end C ; 
   
system top_level
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
		
	properties
		Programming_Properties::Source_Text => ("model", "model1");
		
	annex agree {** 
		assume "System input range " : 
		Input < 10;
		guarantee "System output range" : Output < 50;

	**};	

end top_level;

system implementation top_level.Impl
	subcomponents
		A_sub : system A ; 
		B_sub : system B ; 
		C_sub : system C ; 
	connections
		IN_TO_A : port Input -> A_sub.Input {Communication_Properties::Timing => immediate;};
		A_TO_B : port A_sub.Output -> B_sub.Input {Communication_Properties::Timing => immediate;};
		A_TO_C : port A_sub.Output -> C_sub.Input1 {Communication_Properties::Timing => immediate;};
		B_TO_C : port B_sub.Output -> C_sub.Input2 {Communication_Properties::Timing => immediate;};
		C_TO_Output : port C_sub.Output -> Output {Communication_Properties::Timing => immediate;}; 
end top_level.Impl;
	
end Integer_Toy;