package Ground_Vehicle
public
	with Base_Types;
	
	annex agree {**
		const ACCEL_BOUND : Base_Types::Float = 90.0;
		const SPEED_BOUND : Base_Types::Float = 200.0;
		const BRAKE_BOUND : Base_Types::Float = 50.0;
		const SPEED_SETTLE_BOUND : Base_Types::Float = 10.0;
		const SPEEDOMETER_ERROR_BOUND : Base_Types::Float = 1.0;
		const MAX_SPEED_DIRECTION_SHIFT : Base_Types::Float = 60.0;
		const I_ERROR_BOUND : Base_Types::Float = 500.0;
	**};
	
	system Ground_Vehicle
		features
			target_speed : in data port Base_Types::Float;
			brake_pressure : in data port Base_Types::Float;
			forward : in data port Base_Types::Boolean;
			measured_speed : out data port Base_Types::Float;
			measured_rpms : out data port Base_Types::Float;
			
	    annex agree {**	    	
	    		
	    	assume "The target speed is bounded" :
	    	  0.0 <= target_speed and (target_speed) <= Ground_Vehicle.SPEED_BOUND;
	    	  
	    	assume "The brake pressure is bounded" :
	    	  0.0 <= brake_pressure and
	    	  brake_pressure <= Ground_Vehicle.BRAKE_BOUND;
	    	  
	    	assume "Do not change wheel direction if moving too fast" : true -> 
	    	  measured_speed > Ground_Vehicle.MAX_SPEED_DIRECTION_SHIFT => forward = pre(forward);
	    	
	    	eq accel : Base_Types::Float = 0.0 -> measured_speed - pre(measured_speed);
	    	guarantee "The acceleration is bounded" :
	    	  Lib.abs(accel) <= Ground_Vehicle.ACCEL_BOUND;
	    	    
	    	guarantee "Measured speed is bounded" :
	    	  measured_speed < Ground_Vehicle.SPEED_BOUND;
	    	  
	    	eq const_target_speed : bool = true -> target_speed = pre(target_speed) and forward = pre(forward) and pre(const_target_speed);
	    	guarantee "no unintended acceleration" :
	    	  const_target_speed => measured_speed <= target_speed;
	    	
	    **};
			
	end Ground_Vehicle;
	
	
	system implementation Ground_Vehicle.i
		subcomponents
			speedometer : system Speedometer;
			speed_controller : system Speed_Controller;
			brake_controller : system Brake_controller;
			motor : system Motor;
			wheels : system Wheels;
			
		connections
			conn0 : port target_speed -> speed_controller.target_speed;
			conn1 : port speedometer.speed -> speed_controller.measured_speed;
			conn11 : port speedometer.speed -> brake_controller.measured_speed;
			conn2 : port speed_controller.to_acts -> brake_controller.from_speed_controller;
			conn12 : port brake_controller.to_intake -> motor.intake;
			conn13 : port brake_pressure -> brake_controller.brake_pressure;
			conn14 : port brake_controller.to_brakes -> wheels.brake_pressure;
			conn3 : port motor.rpms -> wheels.motor_rpms;
			conn4 : port wheels.actual_rpms -> speedometer.rpms {Communication_Properties::Timing => delayed;};
			conn5 : port speedometer.speed -> measured_speed;
			conn7 : port forward -> wheels.forward;
			conn15 : port forward -> speed_controller.forward;
			conn10 : port motor.rpms -> measured_rpms;
			conn16 : port brake_pressure -> speed_controller.brake_pressure;
			 
	    annex agree {**
	    	lemma "speed controller integration error is bounded" :
	    	  -1.0 * Ground_Vehicle.I_ERROR_BOUND <= speed_controller.i_error and 
	    	  speed_controller.i_error <= Ground_Vehicle.I_ERROR_BOUND;
	    **};
			 
	end Ground_Vehicle.i;
	
	system Brake_Controller
		features
			from_speed_controller : in data port Base_Types::Float;
			brake_pressure : in data port Base_Types::Float;
			measured_speed : in data port Base_Types::Float;
			to_intake : out data port Base_Types::Float;
			to_brakes : out data port Base_Types::Float;
		annex agree {**
			guarantee "to_brake behavior" :
			  to_brakes = if measured_speed < 0.0 and from_speed_controller > 0.0 then
			               from_speed_controller
			             else if measured_speed > 0.0 and from_speed_controller < 0.0 then
			               -1.0 * from_speed_controller
			             else
			               brake_pressure;
			               
			guarantee "to_intake behavior" :
			  to_intake = if to_brakes > 0.0 then
			                0.0
			              else if from_speed_controller < 0.0 then
			                -1.0 * from_speed_controller
			              else
			                from_speed_controller;
		**};
	end Brake_Controller;
	
	system Speedometer
		features
			rpms : in data port Base_Types::Float;
			speed : out data port Base_Types::Float;
		annex agree {**
--			guarantee "speed calculation" :
--			  rpms - Ground_Vehicle.SPEEDOMETER_ERROR_BOUND <= speed and 
--			  speed <= rpms + Ground_Vehicle.SPEEDOMETER_ERROR_BOUND;
			
			guarantee "speed calculation" :
			  speed = Lib.abs(rpms);
		**};
	end Speedometer;
	
	system Motor
		features
			intake : in data port Base_Types::Float;
			rpms : out data port Base_Types::Float;
	    annex agree {**
	    	assume "intake is always positive" :
	    	  0.0 <= intake;

--	    	eq rpms_after_friction : real = 0.0 -> if(pre(rpms) <= 5.0) then 0.0 else pre(rpms) - 5.0;
	    	
	    	guarantee "rpm calculation" :
	    	  rpms = intake;-- + rpms_after_friction;
	    **};
	end Motor;
	
	system Wheels
		features
			forward : in data port Base_Types::Boolean;
			motor_rpms : in data port Base_Types::Float;
			brake_pressure : in data port Base_Types::Float;
			actual_rpms : out data port Base_Types::Float;
		annex agree {**
			
			eq rpms_after_friction : real = 0.0 ->
			  if pre(actual_rpms) - brake_pressure < 5.0 then 
			    0.0 
			  else 
			    pre(actual_rpms) - 5.0 - brake_pressure;
			    
			assume "do not shift directions if wheel is spinning too fast":
			  true -> 
			    (pre(actual_rpms) > Ground_Vehicle.MAX_SPEED_DIRECTION_SHIFT => forward) and 
			    (pre(actual_rpms) < -1.0 * Ground_Vehicle.MAX_SPEED_DIRECTION_SHIFT => not forward);
			    
			guarantee "actual rpms depends on direction" :
			  actual_rpms = if forward then (rpms_after_friction + motor_rpms) else -1.0 * (rpms_after_friction + motor_rpms);  
			
		**};
	end Wheels;
	
	system speed_controller
		features
			target_speed : in data port Base_Types::Float;
			measured_speed : in data port Base_Types::Float;
			forward : in data port Base_Types::Boolean;
			brake_pressure : in data port Base_Types::Float;
			to_acts : out data port Base_Types::Float;
	    annex agree {**
	    	const p : real = 0.4;
	    	const i : real = 0.01;
	    	const d : real = 0.0;
	    	
	    	eq desired_speed : real = if forward then target_speed else -1.0 * target_speed;
	    	
	    	
	    	eq error : real =  if brake_pressure > 0.0 then 0.0 else desired_speed - measured_speed;
	    	eq new_i_error : real = if brake_pressure > 0.0 then 0.0 else (0.0 -> pre(i_error)) + error;
	    	eq i_error : real = if new_i_error < -1.0 * Ground_Vehicle.I_ERROR_BOUND then 
	    	                      -1.0 * Ground_Vehicle.I_ERROR_BOUND 
	    	                    else if new_i_error > Ground_Vehicle.I_ERROR_BOUND then 
	    	                      Ground_Vehicle.I_ERROR_BOUND 
	    	                    else 
	    	                      new_i_error;
	    	eq d_error : real = if brake_pressure > 0.0 then 0.0 else error - (0.0 -> pre(error));
	    	
	    	eq act_val : real = p * error + i * i_error + d * d_error;
	    	
	    	guarantee "pid calculation" :
	    	  to_acts = act_val;
	    **};
	end speed_controller;
	
	
end Ground_Vehicle;