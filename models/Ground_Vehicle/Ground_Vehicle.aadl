package Ground_Vehicle
public
	with Base_Types;
	
	annex agree {**
		const ACCEL_BOUND : Base_Types::Float = 500.0;
		const SPEED_BOUND : Base_Types::Float = 200.0;
		const STEER_BOUND : Base_Types::Float = 45.0;
		const BRAKE_BOUND : Base_Types::Float = 50.0;
		const SPEED_SETTLE_BOUND : Base_Types::Float = 10.0;
		const SPEEDOMETER_ERROR_BOUND : Base_Types::Float = 1.0;
	**};
	
	system Ground_Vehicle
		features
			target_speed : in data port Base_Types::Float;
			brake_pressure : in data port Base_Types::Float;
			target_forward : in data port Base_Types::Boolean;
			measured_speed : out data port Base_Types::Float;
			
	    annex agree {**	    	
	    	assume "The target speed is bounded" :
	    	  0.0 <= target_speed and (target_speed) <= Ground_Vehicle.SPEED_BOUND;
	    	  
	    	assume "The brake pressure is bounded" :
	    	  0.0 <= brake_pressure and
	    	  brake_pressure <= Ground_Vehicle.BRAKE_BOUND;
	    	
	    	eq accel : Base_Types::Float = 0.0 -> measured_speed - pre(measured_speed);
	    	guarantee "The acceleration is bounded" :
	    	  Lib.abs(accel) <= Ground_Vehicle.ACCEL_BOUND;
	    	    
	    	guarantee "Measured speed is bounded" :
	    	  Lib.abs(measured_speed) < (Ground_Vehicle.SPEED_BOUND + Ground_Vehicle.SPEED_SETTLE_BOUND);
	    	    
	    	
	    	eq desired_speed : Base_Types::Float = if target_forward then target_speed else -1.0 * target_speed;
	    	eq speed_error : Base_Types::Float = Lib.abs(desired_speed - measured_speed);
	    	guarantee "Measured speed approaches target speed" : true ->
	    	  desired_speed = pre(desired_speed) => 
	    	    speed_error - Ground_Vehicle.SPEED_SETTLE_BOUND <= pre(speed_error);
	    	
	    **};
			
	end Ground_Vehicle;
	
	
	system implementation Ground_Vehicle.i
		subcomponents
			speedometer : system Speedometer;
			speed_controller : system Speed_Controller;
			mode_controller : system Mode_controller;
			motor : system Motor;
			wheels : system Wheels;
			
		connections
			conn0 : port target_speed -> speed_controller.target_speed;
			conn1 : port speedometer.speed -> speed_controller.measured_speed;
			conn2 : port speed_controller.to_intake -> motor.intake;
			conn3 : port motor.rpms -> wheels.motor_rpms;
			conn4 : port wheels.actual_rpms -> speedometer.rpms {Communication_Properties::Timing => delayed;};
			conn5 : port speedometer.speed -> measured_speed;
			conn7 : port speed_controller.forward -> wheels.forward;
			conn8 : port target_speed -> mode_controller.target_speed;
			conn9 : port target_forward -> speed_controller.target_forward;
			 
	end Ground_Vehicle.i;
	
	system mode_controller
		features
			target_speed : in data port Base_Types::Float;
			forward : out data port Base_Types::Boolean;
		annex agree {**
			guarantee "direction behavior" :
			  forward = (target_speed >= 0.0);
		**};
	end mode_controller;
	
	system Speedometer
		features
			rpms : in data port Base_Types::Float;
			speed : out data port Base_Types::Float;
		annex agree {**
			guarantee "speed calculation" :
			  rpms - Ground_Vehicle.SPEEDOMETER_ERROR_BOUND <= speed and 
			  speed <= rpms + Ground_Vehicle.SPEEDOMETER_ERROR_BOUND;
		**};
	end Speedometer;
	
	system Motor
		features
			intake : in data port Base_Types::Float;
			rpms : out data port Base_Types::Float;
	    annex agree {**
	    	assume "intake is always positive" :
	    	  0.0 <= intake;
	    		
	    	guarantee "rpm calculation" :
	    	  rpms = 1.0 * intake; --constant can be determined analytically
	    **};
	end Motor;
	
	system Wheels
		features
			forward : in data port Base_Types::Boolean;
			motor_rpms : in data port Base_Types::Float;
			brake_pressure : in data port Base_Types::Float;
			actual_rpms : out data port Base_Types::Float;
		annex agree {**
			
			guarantee "actual rpms depends on direction" :
			  actual_rpms = if forward then motor_rpms else -1.0 * motor_rpms;  
			
		**};
	end Wheels;
	
	system speed_controller
		features
			target_speed : in data port Base_Types::Float;
			target_forward : in data port Base_Types::Boolean;
			measured_speed : in data port Base_Types::Float;
			to_intake : out data port Base_Types::Float;
			forward : out data port Base_Types::Boolean;
	    annex agree {**
	    	const p : real = 1.0;
	    	const i : real = 0.01;
	    	const d : real = 0.0;
	    	
	    	eq desired_speed : real = if target_forward then target_speed else -1.0 * target_speed;
	    	
	    	eq error : real = desired_speed - measured_speed;
	    	eq i_error : real = 0.0 -> pre(i_error) + error;
	    	eq d_error : real = 0.0 -> error - pre(error);
	    	
	    	eq intake_val : real = p * error + i * i_error + d * d_error + (0.0 -> pre(intake_val));
	    	
	    	guarantee "pid calculation" :
	    	  to_intake = Lib.abs(intake_val);
	    	  
	    	guarantee "forward calculation" :
	    	  forward = (intake_val >= 0.0);
	    **};
	end speed_controller;
	
	
end Ground_Vehicle;