package FCC
public
  with DATA_TYPES;
  with ISAS;
  with OSAS;
  with CLAW;
  with Base_Types;
  
system FCC
  features
    --inputs
    egi1 : in data port DATA_TYPES::EGI.real;
    egi2 : in data port DATA_TYPES::EGI.real;
    egi3 : in data port DATA_TYPES::EGI.real;
    egi4 : in data port DATA_TYPES::EGI.real;
    
    ads1 : in data port DATA_TYPES::AirData.real;
    ads2 : in data port DATA_TYPES::AirData.real;
    
    aoa1 : in data port DATA_TYPES::AoA;
    aoa2 : in data port DATA_TYPES::AoA;
    
    acts1_sense : in data port DATA_TYPES::Actuators.impl;
    acts2_sense : in data port DATA_TYPES::Actuators.impl;
    acts3_sense : in data port DATA_TYPES::Actuators.impl;
    acts4_sense : in data port DATA_TYPES::Actuators.impl;
    
    acts_ret : in data port DATA_TYPES::Actuators.impl;
    
    num_valid_acts : in data port DATA_TYPES::NumActuators.impl;
    
    --outputs
    acts_out : out data port DATA_TYPES::Actuators.impl;
    sovs1: out data port DATA_TYPES::BoolActuators.impl;
    sovs2: out data port DATA_TYPES::BoolActuators.impl;
    
    ailerons_failed : out data port Base_Types::Boolean;
    elevators_failed : out data port Base_Types::Boolean;
    rudder_failed : out data port Base_Types::Boolean;
    spoiler_failed : out data port Base_Types::Boolean;
    flaps_gt_failed : out data port Base_Types::Boolean;
    flaps_lt_failed : out data port Base_Types::Boolean;
        
  annex agree {**
    
    guarantee "actuators output range bound":
      output_range(num_valid_acts.THRTOL, acts_out.THRTOL, 
      	AGREE_CONSTANTS.THRTOL_range_low, AGREE_CONSTANTS.THRTOL_range_high
      ) and
      output_range(num_valid_acts.THROTR, acts_out.THROTR, 
      	AGREE_CONSTANTS.THROTR_range_low, AGREE_CONSTANTS.THROTR_range_high
      ) and
      output_range(num_valid_acts.ELLOB, acts_out.ELLOB, 
      	AGREE_CONSTANTS.ELLOB_range_low, AGREE_CONSTANTS.ELLOB_range_high
      ) and
      output_range(num_valid_acts.ELLIB, acts_out.ELLIB, 
      	AGREE_CONSTANTS.ELLIB_range_low, AGREE_CONSTANTS.ELLIB_range_high
      ) and
      output_range(num_valid_acts.ELROB, acts_out.ELROB, 
      	AGREE_CONSTANTS.ELROB_range_low, AGREE_CONSTANTS.ELROB_range_high
      ) and
      output_range(num_valid_acts.ELRIB, acts_out.ELRIB, 
      	AGREE_CONSTANTS.ELRIB_range_low, AGREE_CONSTANTS.ELRIB_range_high
      ) and
      output_range(num_valid_acts.AILL, acts_out.AILL, 
      	AGREE_CONSTANTS.AILL_range_low, AGREE_CONSTANTS.AILL_range_high
      ) and
      output_range(num_valid_acts.AILR, acts_out.AILR, 
      	AGREE_CONSTANTS.AILR_range_low, AGREE_CONSTANTS.AILR_range_high
      ) and
      output_range(num_valid_acts.RUDUP, acts_out.RUDUP, 
      	AGREE_CONSTANTS.RUDUP_range_low, AGREE_CONSTANTS.RUDUP_range_high
      ) and
      output_range(num_valid_acts.RUDLO, acts_out.RUDLO, 
      	AGREE_CONSTANTS.RUDLO_range_low, AGREE_CONSTANTS.RUDLO_range_high
      ) and
      output_range(num_valid_acts.SPLLIB, acts_out.SPLLIB, 
      	AGREE_CONSTANTS.SPLLIB_range_low, AGREE_CONSTANTS.SPLLIB_range_high
      ) and
      output_range(num_valid_acts.SPLLOB, acts_out.SPLLOB, 
      	AGREE_CONSTANTS.SPLLOB_range_low, AGREE_CONSTANTS.SPLLOB_range_high
      ) and
      output_range(num_valid_acts.SPLRIB, acts_out.SPLRIB, 
      	AGREE_CONSTANTS.SPLRIB_range_low, AGREE_CONSTANTS.SPLRIB_range_high
      ) and
      output_range(num_valid_acts.SPLROB, acts_out.SPLROB, 
      	AGREE_CONSTANTS.SPLROB_range_low, AGREE_CONSTANTS.SPLROB_range_high
      ) and
      output_range(num_valid_acts.FLAPLI, acts_out.FLAPLI, 
      	AGREE_CONSTANTS.FLAPLI_range_low, AGREE_CONSTANTS.FLAPLI_range_high
      ) and
      output_range(num_valid_acts.FLAPLO, acts_out.FLAPLO, 
      	AGREE_CONSTANTS.FLAPLO_range_low, AGREE_CONSTANTS.FLAPLO_range_high
      ) and
      output_range(num_valid_acts.FLAPRI, acts_out.FLAPRI, 
      	AGREE_CONSTANTS.FLAPRI_range_low, AGREE_CONSTANTS.FLAPRI_range_high
      ) and
      output_range(num_valid_acts.FLAPRO, acts_out.FLAPRO, 
      	AGREE_CONSTANTS.FLAPRO_range_low, AGREE_CONSTANTS.FLAPRO_range_high
      ) and
      output_range(num_valid_acts.GEAR, acts_out.GEAR, 
      	AGREE_CONSTANTS.GEAR_range_low, AGREE_CONSTANTS.GEAR_range_high
      ) and
      output_range(num_valid_acts.BRAKE, acts_out.BRAKE, 
      	AGREE_CONSTANTS.BRAKE_range_low, AGREE_CONSTANTS.BRAKE_range_high
      ) and
      output_range(num_valid_acts.STEER, acts_out.STEER, 
      	AGREE_CONSTANTS.STEER_range_low, AGREE_CONSTANTS.STEER_range_high
      );

    node output_range(num_valid : int, act : real, low : real, high : real)
    returns (ret : bool);
    let
      ret = (num_valid = 0 => (low <= act and act <= 4.0*high)) and
            (num_valid = 1 => (low <= act and act <= 2.0*high)) and
            (num_valid = 2 => (low <= act and act <= (4.0/3.0)*high)) and
            (num_valid = 3 => (low <= act and act <= high));
    tel;   
       
  **}; 
        
end FCC;

system implementation FCC.Impl
  subcomponents
    ISAS_comp : system ISAS::ISAS_Sys;
    OSAS_comp : system OSAS::OSAS_Sys;
    CLAW_comp : system CLAW::CLAW;
    
  connections
  
    conn_acts_ret_osas: port acts_ret -> OSAS_comp.acts_ret;
      
    valid_conn: port num_valid_acts -> OSAS_comp.num_valid_acts;
    
    --outputs to the outside world
    conn_acts_out: port OSAS_comp.acts_out -> acts_out;
    conn_sovs1: port OSAS_comp.sovs1 -> sovs1;  
    conn_sovs2: port OSAS_comp.sovs2 -> sovs2;  

    --internal connections
    conn_ccdl_acts : port CLAW_comp.acts -> OSAS_comp.acts_in;
    
end FCC.Impl;


end FCC;