/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/ajgacek/smaccm/models/Trusted_Build_Test/test_uart_active2/wrapper_i_assembly.camkes
   Created on: 2015/04/10 14:04:00
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the main CAmkES assembly for the  
  AADL system instance rooted at wrapper_i_Instance.

 **************************************************************************/
import <std_connector.camkes>;
import "components/dispatch_periodic/dispatch_periodic.camkes";
component EPIT {
    hardware;
    dataport Buf mem;
    emits DataAvailable irq;
}


import "components/uart_thread/uart_thread.camkes";
import "components/sender_thread/sender_thread.camkes";
import "components/clk/clk.camkes";
import "components/gpio/gpio.camkes";

component gpiobase {
    hardware;
    dataport Buf gpio1base;
    dataport Buf gpio2base;
    dataport Buf irqcbase;
    dataport Buf clk_tree;
    emits IRQGroup26 irq_grp26_int;
    emits IRQGroup28 irq_grp28_int;
    emits IRQGroup31 irq_grp31_int;
    emits EXINT16_31 xint16_31_int;
}

component clkbase {
    hardware;
    include "components/clk/include/porttype.h";
    dataport CLKData_t cmu_cpu_clk;
    dataport Buf	   cmu_core_clk;
    dataport CLKData_t cmu_top_clk;
}

assembly {
	composition {
        // Periodic components
        component EPIT epit;
		component dispatch_periodic dispatch_periodic_inst;

		component gpiobase gpiobase_obj;
		component clkbase   clkbase_obj;

                component gpio gpio_obj;
                component clk clk_obj;

        connection seL4HardwareMMIO gpio_mem1(from gpio_obj.gpio1base, to gpiobase_obj.gpio1base);
        connection seL4HardwareMMIO gpio_mem2(from gpio_obj.gpio2base, to gpiobase_obj.gpio2base);
        connection seL4HardwareMMIO gpio_mem3(from gpio_obj.irqcbase, to gpiobase_obj.irqcbase);
        connection seL4HardwareMMIO gpio_clk(from gpio_obj.clk_tree, to gpiobase_obj.clk_tree);

        connection seL4HardwareMMIO clk_cmu_cpu_mem(from clk_obj.cmu_cpu_clk, to clkbase_obj.cmu_cpu_clk);
        connection seL4HardwareMMIO clk_cmu_top_mem(from clk_obj.cmu_top_clk, to clkbase_obj.cmu_top_clk);
        connection seL4HardwareMMIO clk_cmu_core_mem(from clk_obj.cmu_core_clk, to clkbase_obj.cmu_core_clk);

		// IRQ-handling hardware components

		// component instances for all AADL-defined threads
		component uart_thread uart_thread_inst;
		component sender_thread sender_thread_inst;


		// connections from active dispatchers to passive threads
	

		// connections from active dispatcher send/receive to other active dispatcher send/receive
		connection seL4RPCCall conn1 (from sender_thread_inst.sender_thread_output, to uart_thread_inst.input); 
			

		// Periodic dispatcher connections
		connection seL4RPCCall conn2 (from dispatch_periodic_inst.sender_thread_periodic_500_ms, to sender_thread_inst.sender_thread_periodic_500_ms);

        connection seL4HardwareMMIO epit_mem(from dispatch_periodic_inst.mem, to epit.mem);
		connection seL4HardwareInterrupt irq(from epit.irq, to dispatch_periodic_inst.irq);

		// IRQ connections (if any)

		// component read/write connections

		// Direct RPC connections

		// Shared memory connections
	}
    configuration {
		/* Freescale i.MX6 (Sabralite) ODROID Configuration */
        epit.mem_attributes = "0x12DD0000:0x1000";
		epit.irq_attributes = 72;

        gpiobase_obj.gpio2base_attributes = "0x14000000:0x1000"; //GPIO
        gpiobase_obj.gpio1base_attributes = "0x13400000:0x1000"; //GPIO
        gpiobase_obj.clk_tree_attributes  = "0x10020000:0x1000"; //GPIO
        gpiobase_obj.irqcbase_attributes  = "0x10440000:0x1000"; //IRQ COMBINER
        gpiobase_obj.irq_grp26_int_attributes = 58; //Combined IRQ group 26
        gpiobase_obj.irq_grp28_int_attributes = 60; //Combined IRQ group 28
        gpiobase_obj.irq_grp31_int_attributes = 63; //Combined IRQ group 31
        gpiobase_obj.xint16_31_int_attributes = 64; //Extern Interrupt EINT16-EINT31

        spibase_obj.spi1_reg_attributes = "0x12D30000:0x1000";    //SPI1
	spibase_obj.spi1_int_attributes = 101;                    //SPI1  interrupt

        clkbase_obj.cmu_cpu_clk_attributes 	= 	"0x10010000:0x1000";	//CMU_CPU
        clkbase_obj.cmu_core_clk_attributes 	= 	"0x10014000:0x1000";	//CMU_CORE
        clkbase_obj.cmu_top_clk_attributes 	= 	"0x10020000:0x1000";	//CMU_TOP
    }
}
/**************************************************************************
  End of autogenerated file: wrapper_i_assembly.camkes
 **************************************************************************/

