package can
public
  with Base_Types;
  with SMACCM_SYS;
  with Data_Model;

  data can_frame
  end can_frame;

  data implementation can_frame.i
    subcomponents
      ident: data can_id.i; -- Identifier
      dlc: data Base_Types::Unsigned_8; -- Data Length Code(0 ~ 8)
      payload: data can_payload.i; -- Frame payload (8 bytes maximum)
  end can_frame.i;

  data can_id
  end can_id;

  data implementation can_id.i
    subcomponents
      id: data Base_Types::Unsigned_32; -- CAN id(11 bits for standard frame, 29 bits if extended frame)
      exide: data Base_Types::Boolean; -- Extended frame flag
      rtr: data Base_Types::Boolean; -- Remote Transmission Request
      err: data Base_Types::Boolean; -- Error frame flag
  end can_id.i;

  data can_payload
  end can_payload;

  data implementation can_payload.i
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
      Data_Model::Dimension => (8);
  end can_payload.i;

  thread can_node
    features
      client_input: in event data port can_frame.i;
      client_output: out event data port can_frame.i;

    properties
      SMACCM_SYS::Is_External => true;
      SMACCM_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
  end can_node;

  --
  -- Code to exercise the CAN
  --
  thread sender
    features
      output: out event data port can_frame.i;

    properties
      SMACCM_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Periodic;
      Source_Text => ("user_code/sender.c");
      Period => 1000 ms;

      SMACCM_SYS::Sends_Events_To => "{{1 output}}";
      Compute_Entrypoint_Source_Text => "send";
  end sender;
  
  
  thread receiver
    features
      input: in event data port can_frame.i;

    properties
      SMACCM_SYS::Thread_Type => Active;
      Priority => 11;
      Stack_Size => 1 KByte;
      Compute_Execution_Time => 0 ms .. 50 ms;
      Dispatch_Protocol => Sporadic;
      Source_Text => ("user_code/receiver.c");

      Compute_Entrypoint_Source_Text => "receive" applies to input;
  end receiver;

  process proc
  end proc;

  process implementation proc.i
    subcomponents
      can_node: thread can_node;
      sender: thread sender;
      receiver: thread receiver;

    connections
      sender_to_can_node: port sender.output -> can_node.client_input;
      can_node_to_receiver: port can_node.client_output -> receiver.input;
  end proc.i;

  system wrapper
  end wrapper;

  system implementation wrapper.i
    subcomponents
      proc: process proc.i;

    properties
      SMACCM_SYS::OS => CAmkES;
      SMACCM_SYS::HW => ODROID;
  end wrapper.i;

end can;
