/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/ajgacek/may-drop-odroid/projects/smaccm/models/Trusted_Build_Test/can/components/can_node/src/smaccm_can_node.c.template
   Created on: 2015/05/05 10:43:17
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This C file contains the implementations of the AADL primitives
  used by user-level declarations for thread can_node.   

  The user code runs in terms of "dispatchers", which cause 
  dispatch user-level handlers to execute.  These handlers can 
  communicate using the standard AADL primitives, which are mapped
  to C functions.

  The send/receive handlers are not thread safe in CAmkES; it is 
  assumed that this is handled by the CAmkES sequentialized access 
  to the dispatch handler.  There is only one dispatch interface 
  for the component containing all of the dispatch points.

  They are thread safe for eChronos.

  The read/write handlers are thread safe because the writer comes 
  through a dispatch interface but the reader is "local" on a dispatch
  interface and so contention may occur.


 **************************************************************************/


#include <string.h>
#include <smaccm_can_node.h>
#include <can_node.h>

///////////////////////////////////////////////////////////////////////////
//
// Local prototypes for AADL dispatchers
//
///////////////////////////////////////////////////////////////////////////
 



/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	send_0
 * 
 ************************************************************************/

can__can_frame_i smaccm_queue_send_0 [1];
bool smaccm_queue_full_send_0  = false;
uint32_t smaccm_queue_front_send_0  = 0;
uint32_t smaccm_queue_back_send_0  = 0;

bool smaccm_queue_is_full_send_0() {
	return (smaccm_queue_front_send_0 == smaccm_queue_back_send_0) && (smaccm_queue_full_send_0);
}

bool smaccm_queue_is_empty_send_0() {
	return (smaccm_queue_front_send_0 == smaccm_queue_back_send_0) && (!smaccm_queue_full_send_0); 
}

bool smaccm_queue_read_send_0(can__can_frame_i * send_0) {
	if (smaccm_queue_is_empty_send_0()) {
		return false;
	} else {
		memcpy(send_0, &smaccm_queue_send_0[smaccm_queue_back_send_0], sizeof(can__can_frame_i));

		smaccm_queue_back_send_0 = (smaccm_queue_back_send_0 + 1) % 1; 
		smaccm_queue_full_send_0 = false ; 
		return true;
	}
}

bool smaccm_queue_write_send_0(const can__can_frame_i * send_0) {
	if (smaccm_queue_is_full_send_0()) {
		return false;
	} else {
		memcpy(&smaccm_queue_send_0[smaccm_queue_front_send_0], send_0, sizeof(can__can_frame_i));

		smaccm_queue_front_send_0 = (smaccm_queue_front_send_0 + 1) % 1; 		
		if (smaccm_queue_back_send_0 == smaccm_queue_front_send_0) { 
			smaccm_queue_full_send_0 = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  send_0_write_can__can_frame_i: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool send_0_write_can__can_frame_i(const can__can_frame_i * arg) {
	bool result;
	smaccm_can_node_send_0_mut_lock(); 
	result = smaccm_queue_write_send_0( arg);
	smaccm_can_node_send_0_mut_unlock(); 
	return result;
}


/************************************************************************
 *  can_node_read_send_0: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool can_node_read_send_0(can__can_frame_i * arg) {
	bool result; 
	smaccm_can_node_send_0_mut_lock(); 
	result = smaccm_queue_read_send_0(arg);
	smaccm_can_node_send_0_mut_unlock(); 
	return result;
}


/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	send_1
 * 
 ************************************************************************/

can__can_frame_i smaccm_queue_send_1 [1];
bool smaccm_queue_full_send_1  = false;
uint32_t smaccm_queue_front_send_1  = 0;
uint32_t smaccm_queue_back_send_1  = 0;

bool smaccm_queue_is_full_send_1() {
	return (smaccm_queue_front_send_1 == smaccm_queue_back_send_1) && (smaccm_queue_full_send_1);
}

bool smaccm_queue_is_empty_send_1() {
	return (smaccm_queue_front_send_1 == smaccm_queue_back_send_1) && (!smaccm_queue_full_send_1); 
}

bool smaccm_queue_read_send_1(can__can_frame_i * send_1) {
	if (smaccm_queue_is_empty_send_1()) {
		return false;
	} else {
		memcpy(send_1, &smaccm_queue_send_1[smaccm_queue_back_send_1], sizeof(can__can_frame_i));

		smaccm_queue_back_send_1 = (smaccm_queue_back_send_1 + 1) % 1; 
		smaccm_queue_full_send_1 = false ; 
		return true;
	}
}

bool smaccm_queue_write_send_1(const can__can_frame_i * send_1) {
	if (smaccm_queue_is_full_send_1()) {
		return false;
	} else {
		memcpy(&smaccm_queue_send_1[smaccm_queue_front_send_1], send_1, sizeof(can__can_frame_i));

		smaccm_queue_front_send_1 = (smaccm_queue_front_send_1 + 1) % 1; 		
		if (smaccm_queue_back_send_1 == smaccm_queue_front_send_1) { 
			smaccm_queue_full_send_1 = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  send_1_write_can__can_frame_i: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool send_1_write_can__can_frame_i(const can__can_frame_i * arg) {
	bool result;
	smaccm_can_node_send_1_mut_lock(); 
	result = smaccm_queue_write_send_1( arg);
	smaccm_can_node_send_1_mut_unlock(); 
	return result;
}


/************************************************************************
 *  can_node_read_send_1: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool can_node_read_send_1(can__can_frame_i * arg) {
	bool result; 
	smaccm_can_node_send_1_mut_lock(); 
	result = smaccm_queue_read_send_1(arg);
	smaccm_can_node_send_1_mut_unlock(); 
	return result;
}


/************************************************************************
 * 
 * Static variables and queue management functions for port:
 * 	send_2
 * 
 ************************************************************************/

can__can_frame_i smaccm_queue_send_2 [1];
bool smaccm_queue_full_send_2  = false;
uint32_t smaccm_queue_front_send_2  = 0;
uint32_t smaccm_queue_back_send_2  = 0;

bool smaccm_queue_is_full_send_2() {
	return (smaccm_queue_front_send_2 == smaccm_queue_back_send_2) && (smaccm_queue_full_send_2);
}

bool smaccm_queue_is_empty_send_2() {
	return (smaccm_queue_front_send_2 == smaccm_queue_back_send_2) && (!smaccm_queue_full_send_2); 
}

bool smaccm_queue_read_send_2(can__can_frame_i * send_2) {
	if (smaccm_queue_is_empty_send_2()) {
		return false;
	} else {
		memcpy(send_2, &smaccm_queue_send_2[smaccm_queue_back_send_2], sizeof(can__can_frame_i));

		smaccm_queue_back_send_2 = (smaccm_queue_back_send_2 + 1) % 1; 
		smaccm_queue_full_send_2 = false ; 
		return true;
	}
}

bool smaccm_queue_write_send_2(const can__can_frame_i * send_2) {
	if (smaccm_queue_is_full_send_2()) {
		return false;
	} else {
		memcpy(&smaccm_queue_send_2[smaccm_queue_front_send_2], send_2, sizeof(can__can_frame_i));

		smaccm_queue_front_send_2 = (smaccm_queue_front_send_2 + 1) % 1; 		
		if (smaccm_queue_back_send_2 == smaccm_queue_front_send_2) { 
			smaccm_queue_full_send_2 = true ; 
		}
		return true;
	}
}

/************************************************************************
 *  send_2_write_can__can_frame_i: 
 * Invoked by: remote interface.
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 * 
 ************************************************************************/

bool send_2_write_can__can_frame_i(const can__can_frame_i * arg) {
	bool result;
	smaccm_can_node_send_2_mut_lock(); 
	result = smaccm_queue_write_send_2( arg);
	smaccm_can_node_send_2_mut_unlock(); 
	return result;
}


/************************************************************************
 *  can_node_read_send_2: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to read from the 
 * input event data queue circular buffer.
 * 
 ************************************************************************/

bool can_node_read_send_2(can__can_frame_i * arg) {
	bool result; 
	smaccm_can_node_send_2_mut_lock(); 
	result = smaccm_queue_read_send_2(arg);
	smaccm_can_node_send_2_mut_unlock(); 
	return result;
}



uint32_t abort_0_index = 0;

bool smaccm_queue_is_full_abort_0() {
	return false;
}

bool smaccm_queue_is_empty_abort_0() {
	return abort_0_index == 0; 
}

/************************************************************************
 *  abort_0_write_void: 
 * Invoked by: remote RPC
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event port.  It increments a count of received messages.
 * 
 ************************************************************************/

bool abort_0_write_void() {
	smaccm_can_node_abort_0_mut_lock(); 
	// Note: possibility for overflow here - should I worry about MAXINT messages?
	abort_0_index++;
	smaccm_can_node_abort_0_mut_unlock(); 
	return true;
}

/************************************************************************
 *  can_node_read_abort_0: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to decrement the 
 * input event index.
 * 
 ************************************************************************/

bool can_node_read_abort_0() {
	bool result; 
	smaccm_can_node_abort_0_mut_lock(); 
	if (abort_0_index > 0) {
		abort_0_index--;
		result = true;
	} else {
		result = false;
	}
	smaccm_can_node_abort_0_mut_unlock(); 
	return result;
}


uint32_t abort_1_index = 0;

bool smaccm_queue_is_full_abort_1() {
	return false;
}

bool smaccm_queue_is_empty_abort_1() {
	return abort_1_index == 0; 
}

/************************************************************************
 *  abort_1_write_void: 
 * Invoked by: remote RPC
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event port.  It increments a count of received messages.
 * 
 ************************************************************************/

bool abort_1_write_void() {
	smaccm_can_node_abort_1_mut_lock(); 
	// Note: possibility for overflow here - should I worry about MAXINT messages?
	abort_1_index++;
	smaccm_can_node_abort_1_mut_unlock(); 
	return true;
}

/************************************************************************
 *  can_node_read_abort_1: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to decrement the 
 * input event index.
 * 
 ************************************************************************/

bool can_node_read_abort_1() {
	bool result; 
	smaccm_can_node_abort_1_mut_lock(); 
	if (abort_1_index > 0) {
		abort_1_index--;
		result = true;
	} else {
		result = false;
	}
	smaccm_can_node_abort_1_mut_unlock(); 
	return result;
}


uint32_t abort_2_index = 0;

bool smaccm_queue_is_full_abort_2() {
	return false;
}

bool smaccm_queue_is_empty_abort_2() {
	return abort_2_index == 0; 
}

/************************************************************************
 *  abort_2_write_void: 
 * Invoked by: remote RPC
 * 
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event port.  It increments a count of received messages.
 * 
 ************************************************************************/

bool abort_2_write_void() {
	smaccm_can_node_abort_2_mut_lock(); 
	// Note: possibility for overflow here - should I worry about MAXINT messages?
	abort_2_index++;
	smaccm_can_node_abort_2_mut_unlock(); 
	return true;
}

/************************************************************************
 *  can_node_read_abort_2: 
 * Invoked from local active thread.
 * 
 * This is the function invoked by the active thread to decrement the 
 * input event index.
 * 
 ************************************************************************/

bool can_node_read_abort_2() {
	bool result; 
	smaccm_can_node_abort_2_mut_lock(); 
	if (abort_2_index > 0) {
		abort_2_index--;
		result = true;
	} else {
		result = false;
	}
	smaccm_can_node_abort_2_mut_unlock(); 
	return result;
}



can__can_frame_i * smaccm_tmp_array_recv; 
uint32_t * smaccm_tmp_used_recv;
uint32_t smaccm_max_tmp_array_recv; 	
bool * smaccm_tmp_array_status_0; 
uint32_t * smaccm_tmp_used_status_0;
uint32_t smaccm_max_tmp_array_status_0; 	
bool * smaccm_tmp_array_status_1; 
uint32_t * smaccm_tmp_used_status_1;
uint32_t smaccm_max_tmp_array_status_1; 	
bool * smaccm_tmp_array_status_2; 
uint32_t * smaccm_tmp_used_status_2;
uint32_t smaccm_max_tmp_array_status_2; 	



/************************************************************************
 * can_node_write_recv 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool can_node_write_recv(const can__can_frame_i * recv) {
	if (smaccm_max_tmp_array_recv > 0 && 
		 *smaccm_tmp_used_recv < smaccm_max_tmp_array_recv) {
		memcpy(&smaccm_tmp_array_recv[*smaccm_tmp_used_recv], recv, sizeof(can__can_frame_i));

		(*smaccm_tmp_used_recv)++;
		return true;
	} else {
		return false;
	}
}

/************************************************************************
 * can_node_write_status_0 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool can_node_write_status_0(const bool * status_0) {
	if (smaccm_max_tmp_array_status_0 > 0 && 
		 *smaccm_tmp_used_status_0 < smaccm_max_tmp_array_status_0) {
		smaccm_tmp_array_status_0[*smaccm_tmp_used_status_0] = *status_0;

		(*smaccm_tmp_used_status_0)++;
		return true;
	} else {
		return false;
	}
}

/************************************************************************
 * can_node_write_status_1 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool can_node_write_status_1(const bool * status_1) {
	if (smaccm_max_tmp_array_status_1 > 0 && 
		 *smaccm_tmp_used_status_1 < smaccm_max_tmp_array_status_1) {
		smaccm_tmp_array_status_1[*smaccm_tmp_used_status_1] = *status_1;

		(*smaccm_tmp_used_status_1)++;
		return true;
	} else {
		return false;
	}
}

/************************************************************************
 * can_node_write_status_2 
 * Invoked from local active or passive thread.
 * 
 * This is the comm function invoked by a user-level thread to send a message 
 * to another thread.  It enqueues the request to be sent when the user thread
 * completes execution.
 * 
 ************************************************************************/

bool can_node_write_status_2(const bool * status_2) {
	if (smaccm_max_tmp_array_status_2 > 0 && 
		 *smaccm_tmp_used_status_2 < smaccm_max_tmp_array_status_2) {
		smaccm_tmp_array_status_2[*smaccm_tmp_used_status_2] = *status_2;

		(*smaccm_tmp_used_status_2)++;
		return true;
	} else {
		return false;
	}
}


 
////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

/**************************************************************************
  End of autogenerated file: /home/ajgacek/may-drop-odroid/projects/smaccm/models/Trusted_Build_Test/can/components/can_node/src/smaccm_can_node.c.template
 **************************************************************************/
