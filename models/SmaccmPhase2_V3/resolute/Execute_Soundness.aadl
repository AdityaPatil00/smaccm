package Execute_Soundness
  public 
    with UAV;
    
    annex resolute {**

-- TODO: Define legitimate
-- TODO: Define trusted (legit => legit)

only_receive_legit(c : component) <=
  ** c " only receives legitimate data" **
  is_trusted(c) and
  all_trusted_components_only_receive_legit()

is_trusted(c : component) <=
  ** c " is a trusted component" **
  trusted(c)
  
trusted(c : component) : bool =
  has_property(c, SMACCM::Trusted) and property(c, SMACCM::Trusted)
  
all_trusted_components_only_receive_legit() <=
  ** "All trusted components receive only legitimate data" **
  forall (c : component). trusted(c) => only_receive_legit_generalized(c)

incoming(t : component) : {connection} =
  { c for (c : connections(t)) | destination_component(c) = t }

only_receive_legit_generalized(c : component) <=
  ** c " only receives legitimate data, data from trusted components, or data from an authenticator" **
  -- TODO: c is memory protected
  forall (conn : incoming(c)).
    -- TODO: conn is secure
    only_carries_legitimate_data(conn) or
    source_is_trusted(conn) or
    source_is_authenticator(conn)

only_carries_legitimate_data(c : connection) <=
  ** c " only carries legitimate data" **
  is_sensor_data(type(c))
  
is_sensor_data(conn_type : aadl) <=
  ** conn_type " is sensor data" **
  (conn_type = hardware_types::GPS) or
  (conn_type = software_types::Motion_Data.Impl) or
  (conn_type = software_types::Barometric_Data) or
  (conn_type = software_types::Battery_Data)

source_is_trusted(c : connection) <=
  ** "The source of " c " is trusted" **
  trusted(source_component(c))

source_is_authenticator(c : connection) <=
  ** "The source of " c " is an authenticator" **
  property(source_component(c), SMACCM::Authenticator)


**};
    
end Execute_Soundness;
