package Execute_Completeness
public

annex resolute 
{**
		
-- Each good message received by the vehicle SHALL 
-- be executed by the vehicle within 100 ms 

-- Context: 'received' means message is in the radio output buffer
-- Context: 'good' means message is recent, authorized, and well-formed.
-- Context: 'executed' means reaching the UAV controller input buffer.
execute_completeness(d : component) <= 
 **  "All messages that are received by device " d
     "will reach the motor controller" **
  good_messages_reach_controller(d)

good_messages_reach_controller(x : component) <=
  ** "All good messages sent from " x " eventually reach the controller" ** 
  class_of(x, flight_gen::control) or
  component_always_sends_message(x) and
  exists (c : x.connections).
    conn_source(c) = x and
    let dest : component = conn_dest(c) ;
    	connection_is_message_type(c) and
  		good_messages_reach_controller(dest)
    
component_always_sends_message(x : component) <=
	** "Component '" x "' always sends messages that it receives" **
	is_data(x) or (
	property_exists(x, SMACCM::Always_Sends_Message) and
	property_lookup(x, SMACCM::Always_Sends_Message)
	)
    
connection_is_message_type(c : connection) <=
	** "The connection '" c "'is of message type" **
	not has_type(c) or
	type(c) <> Base_Types::Float
	
**};
    
    
end Execute_Completeness;