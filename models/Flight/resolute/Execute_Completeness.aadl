package Execute_Completeness
public

annex resolute 
{**
		
-- Each good message received by the vehicle SHALL 
-- be executed by the vehicle within 100 ms 

-- Context: 'received' means message is in the radio output buffer
-- Context: 'good' means message is recent, authorized, and well-formed.
-- Context: 'executed' means reaching the UAV controller input buffer.
execute_completeness(d : component) <= 
 **  "All messages that are received by device " d
     "will reach the motor controller" **
  good_messages_reach_controller(d)

good_messages_reach_controller(x : component) <=
  ** "All good messages sent from " x " eventually reach the controller" ** 
  class_of(x, flight_gen::control) or
  exists (c : x.connections).
    conn_source(c) = x and
    type(c) <> Base_Types::Float and
    not class_of(conn_dest(c), Base_Types::Float) and
  	good_messages_reach_controller(conn_dest(c))
    

-- Under the assumption that the system is schedulable, the total time
-- delay will be the sum of the worst case execution times of all the threads
--total_time_delay : int = 
--  if analysis("schedule") then
--    wc_message_wait_time + 
--    wc_message_processing_time + 
--    wc_controller_delay
--  else  
--    fail "unable to schedule model"
--
-- calculates the sum of all thread processing times
--wc_message_processing_time : int = 
--	sum({thread_message_processing_time(t) for (t: thread)}) 

--returns the processing time of an individual thread
--thread_message_processing_time(t : thread) : int =
--	if exists(c : t.connections). command_channel(c) then 
--		if property_exists(t, SMACCM::WC_Execution_Time) then
--	 	   property_lookup(t, SMACCM::WC_Execution_Time)
--		else
--	  	   fail "Some thread contains a message channel but does not
--	  	   		 have a specified message processing time."
--	else
--	   0

--------------------- BEGIN MESSAGING STUFF --------------------

-- messages must only be transferred through threads that
-- share a process with only memory safe threads. We also 
-- verify that all the messages are sent through one connection
--all_good_messages_sent(x : component, c : connection) <=
--    ** c " is the only output message channel in " x ". Only good messages "
--       "are sent on this connection. All other threads "
--       "in the same process of this thread are memory safe" ** 
--
--	(forall(t : allThreads). 
--		x = t =>
--			exists(p : allProcesses).
--				contained(t, p) and memory_safe_process(p))
--	and
--	((property_exists(x, SMACCM::Always_Sends_Message) and  
--	  property_lookup(x, SMACCM::Always_Sends_Message)) 
--	  or (class_of(x, flight_gen::decryptTask_uart1) 
--	  	  or class_of(x, flight_gen::decryptTask_uart5)
--	  ))

**};
    
    
end Execute_Completeness;