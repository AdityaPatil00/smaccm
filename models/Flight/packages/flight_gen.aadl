-- AADL Document autogenerated by Ivory.Language.AADL

package flight_gen
public
  with SMACCM_SYS;
  with Base_Types;
  with Data_Model;
  with gcsstream_timing;
  with radio_stat_type;
  with motors_type;
  with controloutput_type;
  with gps_type;
  with sensors_type;
  with flightmode_type;
  with data_rate;
  with mavlink_rc_channels_override_msg;
  with mavlink_hil_state_msg;
  with radio_info_type;
  with userinput_type;
  with SMACCM;
  with UAV;
  with gcs_msgs;

data ArrTy_80TyBase_Types_Unsigned_8
  properties
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
    Data_Model::Dimension => (80);
end ArrTy_80TyBase_Types_Unsigned_8;


thread gcsTransmitTask_uart5_751
  features
    gcsTxToEncSrc_766: out event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart5_751_chan579_767";
    };
    streamPeriod_816: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_751_chan581_817";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_751_chan581_820");
    };
    paramReqs_770: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_751_chan583_771";
    };
    paramReader_810: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport33_811";
    };
    paramReader_808: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport32_809";
    };
    paramReader_806: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport31_807";
    };
    paramReader_804: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport30_805";
    };
    paramReader_802: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport29_803";
    };
    paramReader_800: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport28_801";
    };
    paramReader_798: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport27_799";
    };
    paramReader_796: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport26_797";
    };
    paramReader_794: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport25_795";
    };
    paramReader_792: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport24_793";
    };
    paramReader_790: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport23_791";
    };
    paramReader_788: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport22_789";
    };
    paramReader_786: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport21_787";
    };
    paramReader_784: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport20_785";
    };
    paramReader_782: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport19_783";
    };
    paramReader_780: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport18_781";
    };
    paramReader_778: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport17_779";
    };
    paramReader_776: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport16_777";
    };
    paramReader_774: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport15_775";
    };
    paramReader_772: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport14_773";
    };
    armed_764: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport12_765";
    };
    radio_762: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport621_763";
    };
    motors_760: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport191_761";
    };
    control_758: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport200_759";
    };
    position_756: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport235_757";
    };
    sensors_754: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport1_755";
    };
    flightmode_752: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_751.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_751_dataport10_753";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart5_751.c");
    Priority => 0;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_751_per50_824");
    SMACCM::Language => "Ivory";
    
  annex agree {**
  	guarantee "variable range" : paramReader_810 > 0.0;   
  **};  
    
end gcsTransmitTask_uart5_751;


data ArrTy_96TyBase_Types_Unsigned_8
  properties
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
    Data_Model::Dimension => (96);
end ArrTy_96TyBase_Types_Unsigned_8;


thread encryptTask_uart5_743
  features
    encToHxSrc_744: out event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_743.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart5_743_chan585_745";
    };
    gcsTxToEnc_746: in event data port ArrTy_80TyBase_Types_Unsigned_8{
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_743.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart5_743_chan579_747";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart5_743_chan579_750");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart5_743.c");
    Priority => 1;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end encryptTask_uart5_743;


thread gcsReceiveTask_uart5_638
  features
    data_rate_chan_733: out event data port data_rate::data_rate_state.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan582_734";
    };
    streamperiods_731: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan581_732";
    };
    rc_override_tx_727: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan13_728";
    };
    param_req_725: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan583_726";
    };
    armed_643: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan11_644";
    };
    hil_src_639: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_638_chan584_640";
    };
    mavStream_738: in event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart5_638_chan580_739";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart5_638_chan580_742");
    };
    paramWriter_683: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport33_684";
    };
    paramWriter_681: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport32_682";
    };
    paramWriter_679: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport31_680";
    };
    paramWriter_677: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport30_678";
    };
    paramWriter_675: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport29_676";
    };
    paramWriter_673: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport28_674";
    };
    paramWriter_671: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport27_672";
    };
    paramWriter_669: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport26_670";
    };
    paramWriter_667: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport25_668";
    };
    paramWriter_665: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport24_666";
    };
    paramWriter_663: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport23_664";
    };
    paramWriter_661: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport22_662";
    };
    paramWriter_659: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport21_660";
    };
    paramWriter_657: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport20_658";
    };
    paramWriter_655: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport19_656";
    };
    paramWriter_653: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport18_654";
    };
    paramWriter_651: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport17_652";
    };
    paramWriter_649: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport16_650";
    };
    paramWriter_647: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport15_648";
    };
    paramWriter_645: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport14_646";
    };
    flightMode_641: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_638_dataport10_642";
    };
    paramReader_723: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport33_724";
    };
    paramReader_721: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport32_722";
    };
    paramReader_719: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport31_720";
    };
    paramReader_717: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport30_718";
    };
    paramReader_715: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport29_716";
    };
    paramReader_713: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport28_714";
    };
    paramReader_711: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport27_712";
    };
    paramReader_709: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport26_710";
    };
    paramReader_707: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport25_708";
    };
    paramReader_705: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport24_706";
    };
    paramReader_703: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport23_704";
    };
    paramReader_701: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport22_702";
    };
    paramReader_699: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport21_700";
    };
    paramReader_697: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport20_698";
    };
    paramReader_695: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport19_696";
    };
    paramReader_693: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport18_694";
    };
    paramReader_691: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport17_692";
    };
    paramReader_689: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport16_690";
    };
    paramReader_687: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport15_688";
    };
    paramReader_685: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_638.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_638_dataport14_686";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart5_638.c");
    Priority => 2;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end gcsReceiveTask_uart5_638;

thread decryptTask_uart5_630
  features
    decToGcsRxSrc_631: out event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_630.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart5_630_chan580_632";
    };
    hxToDecRcv_633: in event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_630.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart5_630_chan586_634";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart5_630_chan586_637");
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart5_630.c");
    Priority => 3;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Encryption_Algorthim => "AES-128-GCM";
    SMACCM::Language => "Ivory";
    
end decryptTask_uart5_630;


thread stateProxy_622
  features
    proxyEvent_625: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_622.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_622_chan587_626";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_622_chan587_629");
    };
    proxyData_623: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_622.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_622_dataport621_624";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_622.c");
    Priority => 4;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_622;


thread datalink_589
  features
    link_ostream_610: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_589_chan572_611";
    };
    info_ostream_598: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_589_chan588_599";
    };
    stat_ostream_596: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_589_chan587_597";
    };
    framed_ostream_594: out event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_589_chan586_595";
    };
    framed_istream_612: in event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_589_chan585_613";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_589_chan585_616");
    };
    link_istream_590: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_589.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_589_chan573_591";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_589_chan573_609");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_589.c");
    Priority => 5;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 250 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_589_per250_620");
    SMACCM::Language => "Ivory";
    
end datalink_589;


thread gcsTransmitTask_uart1_498
  features
    gcsTxToEncSrc_513: out event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart1_498_chan326_514";
    };
    streamPeriod_563: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_498_chan328_564";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_498_chan328_567");
    };
    paramReqs_517: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_498_chan330_518";
    };
    paramReader_557: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport33_558";
    };
    paramReader_555: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport32_556";
    };
    paramReader_553: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport31_554";
    };
    paramReader_551: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport30_552";
    };
    paramReader_549: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport29_550";
    };
    paramReader_547: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport28_548";
    };
    paramReader_545: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport27_546";
    };
    paramReader_543: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport26_544";
    };
    paramReader_541: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport25_542";
    };
    paramReader_539: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport24_540";
    };
    paramReader_537: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport23_538";
    };
    paramReader_535: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport22_536";
    };
    paramReader_533: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport21_534";
    };
    paramReader_531: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport20_532";
    };
    paramReader_529: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport19_530";
    };
    paramReader_527: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport18_528";
    };
    paramReader_525: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport17_526";
    };
    paramReader_523: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport16_524";
    };
    paramReader_521: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport15_522";
    };
    paramReader_519: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport14_520";
    };
    armed_511: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport12_512";
    };
    radio_509: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport368_510";
    };
    motors_507: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport191_508";
    };
    control_505: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport200_506";
    };
    position_503: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport235_504";
    };
    sensors_501: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport1_502";
    };
    flightmode_499: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_498.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_498_dataport10_500";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart1_498.c");
    Priority => 6;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_498_per50_571");
    SMACCM::Language => "Ivory";
    
end gcsTransmitTask_uart1_498;


thread encryptTask_uart1_490
  features
    encToHxSrc_491: out event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_490.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart1_490_chan332_492";
    };
    gcsTxToEnc_493: in event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_490.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart1_490_chan326_494";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart1_490_chan326_497");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart1_490.c");
    Priority => 7;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end encryptTask_uart1_490;


thread gcsReceiveTask_uart1_385
  features
    data_rate_chan_480: out event data port data_rate::data_rate_state.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan329_481";
    };
    streamperiods_478: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan328_479";
    };
    rc_override_tx_474: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan13_475";
    };
    param_req_472: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan330_473";
    };
    armed_390: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan11_391";
    };
    hil_src_386: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_385_chan331_387";
    };
    mavStream_485: in event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart1_385_chan327_486";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart1_385_chan327_489");
    };
    paramWriter_430: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport33_431";
    };
    paramWriter_428: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport32_429";
    };
    paramWriter_426: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport31_427";
    };
    paramWriter_424: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport30_425";
    };
    paramWriter_422: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport29_423";
    };
    paramWriter_420: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport28_421";
    };
    paramWriter_418: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport27_419";
    };
    paramWriter_416: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport26_417";
    };
    paramWriter_414: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport25_415";
    };
    paramWriter_412: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport24_413";
    };
    paramWriter_410: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport23_411";
    };
    paramWriter_408: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport22_409";
    };
    paramWriter_406: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport21_407";
    };
    paramWriter_404: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport20_405";
    };
    paramWriter_402: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport19_403";
    };
    paramWriter_400: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport18_401";
    };
    paramWriter_398: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport17_399";
    };
    paramWriter_396: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport16_397";
    };
    paramWriter_394: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport15_395";
    };
    paramWriter_392: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport14_393";
    };
    flightMode_388: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_385_dataport10_389";
    };
    paramReader_470: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport33_471";
    };
    paramReader_468: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport32_469";
    };
    paramReader_466: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport31_467";
    };
    paramReader_464: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport30_465";
    };
    paramReader_462: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport29_463";
    };
    paramReader_460: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport28_461";
    };
    paramReader_458: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport27_459";
    };
    paramReader_456: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport26_457";
    };
    paramReader_454: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport25_455";
    };
    paramReader_452: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport24_453";
    };
    paramReader_450: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport23_451";
    };
    paramReader_448: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport22_449";
    };
    paramReader_446: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport21_447";
    };
    paramReader_444: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport20_445";
    };
    paramReader_442: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport19_443";
    };
    paramReader_440: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport18_441";
    };
    paramReader_438: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport17_439";
    };
    paramReader_436: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport16_437";
    };
    paramReader_434: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport15_435";
    };
    paramReader_432: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_385_dataport14_433";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart1_385.c");
    Priority => 8;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end gcsReceiveTask_uart1_385;


thread decryptTask_uart1_377
  features
    decToGcsRxSrc_378: out event data port ArrTy_80TyBase_Types_Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_377.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart1_377_chan327_379";
    };
    hxToDecRcv_380: in event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_377.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart1_377_chan333_381";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart1_377_chan333_384");
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart1_377.c");
    Priority => 9;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Encryption_Algorthim => "AES-128-GCM";
    SMACCM::Language => "Ivory";
    
    
end decryptTask_uart1_377;


thread stateProxy_369
  features
    proxyEvent_372: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_369.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_369_chan334_373";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_369_chan334_376");
    };
    proxyData_370: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_369.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_369_dataport368_371";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_369.c");
    Priority => 10;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_369;


thread datalink_336
  features
    link_ostream_357: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_336_chan319_358";
    };
    info_ostream_345: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_336_chan335_346";
    };
    stat_ostream_343: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_336_chan334_344";
    };
    framed_ostream_341: out event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_336_chan333_342";
    };
    framed_istream_359: in event data port ArrTy_96TyBase_Types_Unsigned_8 {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_336_chan332_360";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_336_chan332_363");
    };
    link_istream_337: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_336.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_336_chan320_338";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_336_chan320_356");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_336.c");
    Priority => 11;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 250 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_336_per250_367");
    SMACCM::Language => "Ivory";
    
end datalink_336;


thread px4ioar_275
  features
    newstateEmitter_290: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_275.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_275_chan289_291";
    };
    uart_ostream_276: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_275.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_275_chan268_277";
    };
    newstateEvent_292: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_275.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_275_chan289_293";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_275_chan289_newstate_loop_318", "eventhandler_px4ioar_275_chan289_newstate_bootCheckComplete_314", "eventhandler_px4ioar_275_chan289_newstate_initMulti_311", "eventhandler_px4ioar_275_chan289_newstate_init4_310", "eventhandler_px4ioar_275_chan289_newstate_init3_307", "eventhandler_px4ioar_275_chan289_newstate_init2_304", "eventhandler_px4ioar_275_chan289_newstate_init1_301", "eventhandler_px4ioar_275_chan289_newstate_bootBegin_298");
    };
    motor_istream_278: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_275.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_275_chan34_279";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_275_chan34_loop_317");
    };
  properties
    Source_Text => ("tower_task_usercode_px4ioar_275.c");
    Priority => 12;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_275_per1_loop_316", "eventhandler_px4ioar_275_per1_bootCheckComplete_313", "eventhandler_px4ioar_275_per1_init4_309", "eventhandler_px4ioar_275_per1_init3_306", "eventhandler_px4ioar_275_per1_init2_303", "eventhandler_px4ioar_275_per1_init1_300", "eventhandler_px4ioar_275_per1_bootBegin_297");
    SMACCM::Language => "Ivory";
    
end px4ioar_275;


thread sensorsCaptureTask_244
  features
    newstateEmitter_258: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_244.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_sensorsCaptureTask_244_chan257_259";
    };
    sensors_245: out event data port sensors_type::sensors_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_244.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_sensorsCaptureTask_244_chan0_246";
    };
    newstateEvent_260: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_244.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_244_chan257_261";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_244_chan257_newstate_captureloop_267", "eventhandler_sensorsCaptureTask_244_chan257_newstate_init_264");
    };
    position_248: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_244.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_244_chan216_249";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_244_chan216_252");
    };
  properties
    Source_Text => ("tower_task_usercode_sensorsCaptureTask_244.c");
    Priority => 13;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_244_per1_captureloop_266");
    SMACCM::Language => "Ivory";
    
end sensorsCaptureTask_244;


thread stateProxy_236
  features
    proxyEvent_239: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_236.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_236_chan216_240";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_236_chan216_243");
    };
    proxyData_237: requires data access gps_type::position.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_236.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_236_dataport235_238";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_236.c");
    Priority => 14;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_236;


thread ubloxGPS_217
  features
    position_222: out event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_217.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ubloxGPS_217_chan216_223";
    };
    istream_218: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_217.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_ubloxGPS_217_chan210_219";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_ubloxGPS_217_chan210_234");
    };
  properties
    Source_Text => ("tower_task_usercode_ubloxGPS_217.c");
    Priority => 15;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end ubloxGPS_217;


thread stateProxy_201
  features
    proxyEvent_204: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_201.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_201_chan35_205";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_201_chan35_208");
    };
    proxyData_202: requires data access controloutput_type::controloutput.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_201.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_201_dataport200_203";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_201.c");
    Priority => 16;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_201;


thread stateProxy_192
  features
    proxyEvent_195: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_192.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_192_chan34_196";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_192_chan34_199");
    };
    proxyData_193: requires data access motors_type::motors.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_192.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_192_dataport191_194";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_192.c");
    Priority => 17;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_192;


thread motmix_179
  features
    motors_184: out event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_179.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_motmix_179_chan34_185";
    };
    control_186: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_179.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motmix_179_chan35_187";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motmix_179_chan35_190");
    };
    flightMode_182: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_179.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_179_dataport10_183";
    };
    armReader_180: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_179.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_179_dataport12_181";
    };
  properties
    Source_Text => ("tower_task_usercode_motmix_179.c");
    Priority => 18;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end motmix_179;


thread control_121
  features
    control_128: out event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_control_121_chan35_129";
    };
    sensors_174: in event data port sensors_type::sensors_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_control_121_chan0_175";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_121_chan0_178");
    };
    paramReader_172: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport33_173";
    };
    paramReader_170: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport32_171";
    };
    paramReader_168: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport31_169";
    };
    paramReader_166: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport30_167";
    };
    paramReader_164: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport29_165";
    };
    paramReader_162: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport28_163";
    };
    paramReader_160: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport27_161";
    };
    paramReader_158: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport26_159";
    };
    paramReader_156: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport25_157";
    };
    paramReader_154: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport24_155";
    };
    paramReader_152: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport23_153";
    };
    paramReader_150: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport22_151";
    };
    paramReader_148: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport21_149";
    };
    paramReader_146: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport20_147";
    };
    paramReader_144: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport19_145";
    };
    paramReader_142: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport18_143";
    };
    paramReader_140: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport17_141";
    };
    paramReader_138: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport16_139";
    };
    paramReader_136: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport15_137";
    };
    paramReader_134: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport14_135";
    };
    userinput_126: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport41_127";
    };
    flightmode_124: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport10_125";
    };
    armedReader_122: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_121.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_121_dataport12_123";
    };
  properties
    Source_Text => ("tower_task_usercode_control_121.c");
    Priority => 19;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
    
  annex agree {**
  	guarantee "other constraint" : paramReader_172 < 0.0;
  **};
end control_121;


thread blink_109
  features
    flightmode_112: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_109.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_109_dataport10_113";
    };
    armed_110: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_109.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_109_dataport12_111";
    };
  properties
    Source_Text => ("tower_task_usercode_blink_109.c");
    Priority => 20;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 125 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_blink_109_per125_120");
    SMACCM::Language => "Ivory";
    
end blink_109;


thread userInputMux_90
  features
    src_res_99: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_90.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userInputMux_90_dataport41_100";
    };
    snk_mav_failsafe_97: requires data access Base_Types::Boolean {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_90.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_90_dataport38_98";
    };
    snk_mav_ppm_95: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_90.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_90_dataport37_96";
    };
    snk_rc_ppm_93: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_90.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_90_dataport36_94";
    };
    snk_armed_91: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_90.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_90_dataport12_92";
    };
  properties
    Source_Text => ("tower_task_usercode_userInputMux_90.c");
    Priority => 21;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userInputMux_90_per50_108");
    SMACCM::Language => "Ivory";
    
end userInputMux_90;


data ArrTy_8TyBase_Types_Unsigned_16
  properties
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16));
    Data_Model::Dimension => (8);
end ArrTy_8TyBase_Types_Unsigned_16;


thread armedMux_73
  features
    mav_arming_81: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armedMux_73.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_armedMux_73_chan11_82";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_armedMux_73_chan11_85");
    };
    armed_res_src_76: requires data access Base_Types::Unsigned_8 {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armedMux_73.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_armedMux_73_dataport12_77";
    };
    ppm_input_snk_74: requires data access ArrTy_8TyBase_Types_Unsigned_16 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armedMux_73.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_armedMux_73_dataport40_75";
    };
  properties
    Source_Text => ("tower_task_usercode_armedMux_73.c");
    Priority => 22;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_armedMux_73_per50_89");
    SMACCM::Language => "Ivory";
    
end armedMux_73;


thread userMAVInput_56
  features
    rc_over_snk_68: in event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_56.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_userMAVInput_56_chan13_69";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userMAVInput_56_chan13_72");
    };
    src_js_fs_61: requires data access Base_Types::Boolean {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_56.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userMAVInput_56_dataport38_62";
    };
    rc_over_res_tx_59: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_56.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userMAVInput_56_dataport37_60";
    };
    armedReader_57: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_56.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userMAVInput_56_dataport12_58";
    };
  properties
    Source_Text => ("tower_task_usercode_userMAVInput_56.c");
    Priority => 23;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end userMAVInput_56;


thread userPPMInput_42
  features
    ppmChansWriter_47: requires data access ArrTy_8TyBase_Types_Unsigned_16 {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userPPMInput_42.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userPPMInput_42_dataport40_48";
    };
    userInput_45: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userPPMInput_42.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userPPMInput_42_dataport36_46";
    };
    flightMode_43: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userPPMInput_42.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userPPMInput_42_dataport39_44";
    };
  properties
    Source_Text => ("tower_task_usercode_userPPMInput_42.c");
    Priority => 24;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userPPMInput_42_per50_55");
    SMACCM::Language => "Ivory";
    
end userPPMInput_42;


thread stateProxy_2
  features
    proxyEvent_5: in event data port sensors_type::sensors_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_2.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_2_chan0_6";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_2_chan0_9");
    };
    proxyData_3: requires data access sensors_type::sensors_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_2.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_2_dataport1_4";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_2.c");
    Priority => 25;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
    SMACCM::Language => "Ivory";
    
end stateProxy_2;


thread uartISR_574
  features
    istream_577: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_574.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_574_chan573_578";
    };
    ostream_575: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_574.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_574_chan572_576";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_574.c");
    Priority => 26;
    SMACCM_SYS::Signal_Name => "UART5_IRQHandler";
    SMACCM::Language => "Ivory";
    
end uartISR_574;


thread uartISR_321
  features
    istream_324: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_321.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_321_chan320_325";
    };
    ostream_322: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_321.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_321_chan319_323";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_321.c");
    Priority => 27;
    SMACCM_SYS::Signal_Name => "USART1_IRQHandler";
    SMACCM::Language => "Ivory";
    
end uartISR_321;


thread uartISR_270
  features
    istream_273: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_270.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_270_chan269_274";
    };
    ostream_271: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_270.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_270_chan268_272";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_270.c");
    Priority => 28;
    SMACCM_SYS::Signal_Name => "USART2_IRQHandler";
    SMACCM::Language => "Ivory";
    
end uartISR_270;


thread uartISR_211
  features
    istream_214: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_211.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_211_chan210_215";
    };
    ostream_212: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_211.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_211_chan209_213";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_211.c");
    Priority => 29;
    SMACCM_SYS::Signal_Name => "USART6_IRQHandler";
    SMACCM::Language => "Ivory";
    
end uartISR_211;


system Software
  features
  	sensors: provides data access sensors_type::sensors_result.impl;
  	motors_and_radios: feature group UAV::motors_and_radios;
  	gcs_transmit : feature group gcs_msgs::gcs_msg;
  	gcs_receive : feature group gcs_msgs::gcs_msg;
  	
end Software;

system implementation Software.impl
  subcomponents
  	main : process flight_gen_process.impl;
  	
  connections
    data access main.sensors -> sensors;
    feature group main.motors_and_radios <-> motors_and_radios;
    feature group gcs_transmit <-> main.gcs_transmit;
    feature group gcs_receive <-> main.gcs_receive;
  	
end Software.impl;

process flight_gen_process
  features
  	sensors: provides data access sensors_type::sensors_result.impl{
  		Access_Right => read_write;
  	};
  	motors_and_radios: feature group UAV::motors_and_radios;
  	gcs_transmit: feature group gcs_msgs::gcs_msg {
  		Access_Right => read_only applies to param1;
  		Access_Right => read_only applies to param2;
  		Access_Right => read_only applies to param3;
  		Access_Right => read_only applies to param4;
  		Access_Right => read_only applies to param5;
  		Access_Right => read_only applies to param6;
  		Access_Right => read_only applies to param7;
  		Access_Right => read_only applies to param8;
  		Access_Right => read_only applies to param9;
  		Access_Right => read_only applies to param10;
  		Access_Right => read_only applies to param11;
  		Access_Right => read_only applies to param12;
  		Access_Right => read_only applies to param13;
  		Access_Right => read_only applies to param14;
  		Access_Right => read_only applies to param15;
  		Access_Right => read_only applies to param16;
  		Access_Right => read_only applies to param17;
  		Access_Right => read_only applies to param18;
  		Access_Right => read_only applies to param19;
  		Access_Right => read_only applies to param20;
  	};
  	gcs_receive: feature group gcs_msgs::gcs_msg {
  		Access_Right => write_only applies to param1;
  		Access_Right => write_only applies to param2;
  		Access_Right => write_only applies to param3;
  		Access_Right => write_only applies to param4;
  		Access_Right => write_only applies to param5;
  		Access_Right => write_only applies to param6;
  		Access_Right => write_only applies to param7;
  		Access_Right => write_only applies to param8;
  		Access_Right => write_only applies to param9;
  		Access_Right => write_only applies to param10;
  		Access_Right => write_only applies to param11;
  		Access_Right => write_only applies to param12;
  		Access_Right => write_only applies to param13;
  		Access_Right => write_only applies to param14;
  		Access_Right => write_only applies to param15;
  		Access_Right => write_only applies to param16;
  		Access_Right => write_only applies to param17;
  		Access_Right => write_only applies to param18;
  		Access_Right => write_only applies to param19;
  		Access_Right => write_only applies to param20;
  	};
  
   annex agree {**
    	guarantee "whatever" : true;
    **};
end flight_gen_process;


process implementation flight_gen_process.impl
  subcomponents
    gcsTransmitTask_uart5_751_inst : thread gcsTransmitTask_uart5_751;
    encryptTask_uart5_743_inst : thread encryptTask_uart5_743;
    gcsReceiveTask_uart5_638_inst : thread gcsReceiveTask_uart5_638;
    decryptTask_uart5_630_inst : thread decryptTask_uart5_630;
    stateProxy_622_inst : thread stateProxy_622;
    datalink_589_inst : thread datalink_589;
    gcsTransmitTask_uart1_498_inst : thread gcsTransmitTask_uart1_498;
    encryptTask_uart1_490_inst : thread encryptTask_uart1_490;
    gcsReceiveTask_uart1_385_inst : thread gcsReceiveTask_uart1_385;
    decryptTask_uart1_377_inst : thread decryptTask_uart1_377;
    stateProxy_369_inst : thread stateProxy_369;
    datalink_336_inst : thread datalink_336;
    px4ioar_275_inst : thread px4ioar_275;
    sensorsCaptureTask_244_inst : thread sensorsCaptureTask_244;
    stateProxy_236_inst : thread stateProxy_236;
    ubloxGPS_217_inst : thread ubloxGPS_217;
    stateProxy_201_inst : thread stateProxy_201;
    stateProxy_192_inst : thread stateProxy_192;
    motmix_179_inst : thread motmix_179;
    control_121_inst : thread control_121;
    blink_109_inst : thread blink_109;
    userInputMux_90_inst : thread userInputMux_90;
    armedMux_73_inst : thread armedMux_73;
    userMAVInput_56_inst : thread userMAVInput_56;
    userPPMInput_42_inst : thread userPPMInput_42;
    stateProxy_2_inst : thread stateProxy_2;
    uartISR_574_inst : thread uartISR_574;
    uartISR_321_inst : thread uartISR_321;
    uartISR_270_inst : thread uartISR_270;
    uartISR_211_inst : thread uartISR_211;
    dataport621 : data radio_stat_type::radio_stat.impl;
    dataport368 : data radio_stat_type::radio_stat.impl;
    dataport235 : data gps_type::position.impl;
    dataport200 : data controloutput_type::controloutput.impl;
    dataport191 : data motors_type::motors.impl;
    dataport41 : data userinput_type::userinput_result.impl;
    dataport40 : data ArrTy_8TyBase_Types_Unsigned_16;
    dataport39 : data flightmode_type::flightmode.impl;
    dataport38 : data Base_Types::Boolean;
    dataport37 : data userinput_type::userinput_result.impl;
    dataport36 : data userinput_type::userinput_result.impl;
    dataport33 : data Base_Types::Float;
    dataport32 : data Base_Types::Float;
    dataport31 : data Base_Types::Float;
    dataport30 : data Base_Types::Float;
    dataport29 : data Base_Types::Float;
    dataport28 : data Base_Types::Float;
    dataport27 : data Base_Types::Float;
    dataport26 : data Base_Types::Float;
    dataport25 : data Base_Types::Float;
    dataport24 : data Base_Types::Float;
    dataport23 : data Base_Types::Float;
    dataport22 : data Base_Types::Float;
    dataport21 : data Base_Types::Float;
    dataport20 : data Base_Types::Float;
    dataport19 : data Base_Types::Float;
    dataport18 : data Base_Types::Float;
    dataport17 : data Base_Types::Float;
    dataport16 : data Base_Types::Float;
    dataport15 : data Base_Types::Float;
    dataport14 : data Base_Types::Float;
    dataport12 : data Base_Types::Unsigned_8;
    dataport10 : data flightmode_type::flightmode.impl;
    dataport1 : data sensors_type::sensors_result.impl;
  connections
    port gcsTransmitTask_uart5_751_inst.gcsTxToEncSrc_766 -> encryptTask_uart5_743_inst.gcsTxToEnc_746;
    port encryptTask_uart5_743_inst.encToHxSrc_744 -> datalink_589_inst.framed_istream_612;
    port gcsReceiveTask_uart5_638_inst.streamperiods_731 -> gcsTransmitTask_uart5_751_inst.streamPeriod_816;
    port gcsReceiveTask_uart5_638_inst.rc_override_tx_727 -> userMAVInput_56_inst.rc_over_snk_68;
    port gcsReceiveTask_uart5_638_inst.param_req_725 -> gcsTransmitTask_uart5_751_inst.paramReqs_770;
    port gcsReceiveTask_uart5_638_inst.armed_643 -> armedMux_73_inst.mav_arming_81;
    port decryptTask_uart5_630_inst.decToGcsRxSrc_631 -> gcsReceiveTask_uart5_638_inst.mavStream_738;
    port datalink_589_inst.link_ostream_610 -> uartISR_574_inst.ostream_575;
    port datalink_589_inst.stat_ostream_596 -> stateProxy_622_inst.proxyEvent_625;
    port datalink_589_inst.framed_ostream_594 -> decryptTask_uart5_630_inst.hxToDecRcv_633;
    port gcsTransmitTask_uart1_498_inst.gcsTxToEncSrc_513 -> encryptTask_uart1_490_inst.gcsTxToEnc_493;
    port encryptTask_uart1_490_inst.encToHxSrc_491 -> datalink_336_inst.framed_istream_359;
    port gcsReceiveTask_uart1_385_inst.streamperiods_478 -> gcsTransmitTask_uart1_498_inst.streamPeriod_563;
    port gcsReceiveTask_uart1_385_inst.rc_override_tx_474 -> userMAVInput_56_inst.rc_over_snk_68;
    port gcsReceiveTask_uart1_385_inst.param_req_472 -> gcsTransmitTask_uart1_498_inst.paramReqs_517;
    port gcsReceiveTask_uart1_385_inst.armed_390 -> armedMux_73_inst.mav_arming_81;
    port decryptTask_uart1_377_inst.decToGcsRxSrc_378 -> gcsReceiveTask_uart1_385_inst.mavStream_485;
    port datalink_336_inst.link_ostream_357 -> uartISR_321_inst.ostream_322;
    port datalink_336_inst.stat_ostream_343 -> stateProxy_369_inst.proxyEvent_372;
    port datalink_336_inst.framed_ostream_341 -> decryptTask_uart1_377_inst.hxToDecRcv_380;
    port px4ioar_275_inst.newstateEmitter_290 -> px4ioar_275_inst.newstateEvent_292;
    port px4ioar_275_inst.uart_ostream_276 -> uartISR_270_inst.ostream_271;
    port sensorsCaptureTask_244_inst.newstateEmitter_258 -> sensorsCaptureTask_244_inst.newstateEvent_260;
    port sensorsCaptureTask_244_inst.sensors_245 -> control_121_inst.sensors_174;
    port sensorsCaptureTask_244_inst.sensors_245 -> stateProxy_2_inst.proxyEvent_5;
    port ubloxGPS_217_inst.position_222 -> sensorsCaptureTask_244_inst.position_248;
    port ubloxGPS_217_inst.position_222 -> stateProxy_236_inst.proxyEvent_239;
    port motmix_179_inst.motors_184 -> px4ioar_275_inst.motor_istream_278;
    port motmix_179_inst.motors_184 -> stateProxy_192_inst.proxyEvent_195;
    port control_121_inst.control_128 -> stateProxy_201_inst.proxyEvent_204;
    port control_121_inst.control_128 -> motmix_179_inst.control_186;
    port uartISR_574_inst.istream_577 -> datalink_589_inst.link_istream_590;
    port uartISR_321_inst.istream_324 -> datalink_336_inst.link_istream_337;
    port uartISR_211_inst.istream_214 -> ubloxGPS_217_inst.istream_218;
    data access dataport33 -> gcsTransmitTask_uart5_751_inst.paramReader_810;
    data access dataport32 -> gcsTransmitTask_uart5_751_inst.paramReader_808;
    data access dataport31 -> gcsTransmitTask_uart5_751_inst.paramReader_806;
    data access dataport30 -> gcsTransmitTask_uart5_751_inst.paramReader_804;
    data access dataport29 -> gcsTransmitTask_uart5_751_inst.paramReader_802;
    data access dataport28 -> gcsTransmitTask_uart5_751_inst.paramReader_800;
    data access dataport27 -> gcsTransmitTask_uart5_751_inst.paramReader_798;
    data access dataport26 -> gcsTransmitTask_uart5_751_inst.paramReader_796;
    data access dataport25 -> gcsTransmitTask_uart5_751_inst.paramReader_794;
    data access dataport24 -> gcsTransmitTask_uart5_751_inst.paramReader_792;
    data access dataport23 -> gcsTransmitTask_uart5_751_inst.paramReader_790;
    data access dataport22 -> gcsTransmitTask_uart5_751_inst.paramReader_788;
    data access dataport21 -> gcsTransmitTask_uart5_751_inst.paramReader_786;
    data access dataport20 -> gcsTransmitTask_uart5_751_inst.paramReader_784;
    data access dataport19 -> gcsTransmitTask_uart5_751_inst.paramReader_782;
    data access dataport18 -> gcsTransmitTask_uart5_751_inst.paramReader_780;
    data access dataport17 -> gcsTransmitTask_uart5_751_inst.paramReader_778;
    data access dataport16 -> gcsTransmitTask_uart5_751_inst.paramReader_776;
    data access dataport15 -> gcsTransmitTask_uart5_751_inst.paramReader_774;
    data access dataport14 -> gcsTransmitTask_uart5_751_inst.paramReader_772;
    data access dataport12 -> gcsTransmitTask_uart5_751_inst.armed_764;
    data access dataport621 -> gcsTransmitTask_uart5_751_inst.radio_762;
    data access dataport191 -> gcsTransmitTask_uart5_751_inst.motors_760;
    data access dataport200 -> gcsTransmitTask_uart5_751_inst.control_758;
    data access dataport235 -> gcsTransmitTask_uart5_751_inst.position_756;
    data access dataport1 -> gcsTransmitTask_uart5_751_inst.sensors_754;
    data access dataport10 -> gcsTransmitTask_uart5_751_inst.flightmode_752;
    data access dataport33 -> gcsReceiveTask_uart5_638_inst.paramWriter_683;
    data access dataport32 -> gcsReceiveTask_uart5_638_inst.paramWriter_681;
    data access dataport31 -> gcsReceiveTask_uart5_638_inst.paramWriter_679;
    data access dataport30 -> gcsReceiveTask_uart5_638_inst.paramWriter_677;
    data access dataport29 -> gcsReceiveTask_uart5_638_inst.paramWriter_675;
    data access dataport28 -> gcsReceiveTask_uart5_638_inst.paramWriter_673;
    data access dataport27 -> gcsReceiveTask_uart5_638_inst.paramWriter_671;
    data access dataport26 -> gcsReceiveTask_uart5_638_inst.paramWriter_669;
    data access dataport25 -> gcsReceiveTask_uart5_638_inst.paramWriter_667;
    data access dataport24 -> gcsReceiveTask_uart5_638_inst.paramWriter_665;
    data access dataport23 -> gcsReceiveTask_uart5_638_inst.paramWriter_663;
    data access dataport22 -> gcsReceiveTask_uart5_638_inst.paramWriter_661;
    data access dataport21 -> gcsReceiveTask_uart5_638_inst.paramWriter_659;
    data access dataport20 -> gcsReceiveTask_uart5_638_inst.paramWriter_657;
    data access dataport19 -> gcsReceiveTask_uart5_638_inst.paramWriter_655;
    data access dataport18 -> gcsReceiveTask_uart5_638_inst.paramWriter_653;
    data access dataport17 -> gcsReceiveTask_uart5_638_inst.paramWriter_651;
    data access dataport16 -> gcsReceiveTask_uart5_638_inst.paramWriter_649;
    data access dataport15 -> gcsReceiveTask_uart5_638_inst.paramWriter_647;
    data access dataport14 -> gcsReceiveTask_uart5_638_inst.paramWriter_645;
    data access dataport10 -> gcsReceiveTask_uart5_638_inst.flightMode_641;
    data access dataport33 -> gcsReceiveTask_uart5_638_inst.paramReader_723;
    data access dataport32 -> gcsReceiveTask_uart5_638_inst.paramReader_721;
    data access dataport31 -> gcsReceiveTask_uart5_638_inst.paramReader_719;
    data access dataport30 -> gcsReceiveTask_uart5_638_inst.paramReader_717;
    data access dataport29 -> gcsReceiveTask_uart5_638_inst.paramReader_715;
    data access dataport28 -> gcsReceiveTask_uart5_638_inst.paramReader_713;
    data access dataport27 -> gcsReceiveTask_uart5_638_inst.paramReader_711;
    data access dataport26 -> gcsReceiveTask_uart5_638_inst.paramReader_709;
    data access dataport25 -> gcsReceiveTask_uart5_638_inst.paramReader_707;
    data access dataport24 -> gcsReceiveTask_uart5_638_inst.paramReader_705;
    data access dataport23 -> gcsReceiveTask_uart5_638_inst.paramReader_703;
    data access dataport22 -> gcsReceiveTask_uart5_638_inst.paramReader_701;
    data access dataport21 -> gcsReceiveTask_uart5_638_inst.paramReader_699;
    data access dataport20 -> gcsReceiveTask_uart5_638_inst.paramReader_697;
    data access dataport19 -> gcsReceiveTask_uart5_638_inst.paramReader_695;
    data access dataport18 -> gcsReceiveTask_uart5_638_inst.paramReader_693;
    data access dataport17 -> gcsReceiveTask_uart5_638_inst.paramReader_691;
    data access dataport16 -> gcsReceiveTask_uart5_638_inst.paramReader_689;
    data access dataport15 -> gcsReceiveTask_uart5_638_inst.paramReader_687;
    data access dataport14 -> gcsReceiveTask_uart5_638_inst.paramReader_685;
    data access dataport621 -> stateProxy_622_inst.proxyData_623;
    data access dataport33 -> gcsTransmitTask_uart1_498_inst.paramReader_557;
    data access dataport32 -> gcsTransmitTask_uart1_498_inst.paramReader_555;
    data access dataport31 -> gcsTransmitTask_uart1_498_inst.paramReader_553;
    data access dataport30 -> gcsTransmitTask_uart1_498_inst.paramReader_551;
    data access dataport29 -> gcsTransmitTask_uart1_498_inst.paramReader_549;
    data access dataport28 -> gcsTransmitTask_uart1_498_inst.paramReader_547;
    data access dataport27 -> gcsTransmitTask_uart1_498_inst.paramReader_545;
    data access dataport26 -> gcsTransmitTask_uart1_498_inst.paramReader_543;
    data access dataport25 -> gcsTransmitTask_uart1_498_inst.paramReader_541;
    data access dataport24 -> gcsTransmitTask_uart1_498_inst.paramReader_539;
    data access dataport23 -> gcsTransmitTask_uart1_498_inst.paramReader_537;
    data access dataport22 -> gcsTransmitTask_uart1_498_inst.paramReader_535;
    data access dataport21 -> gcsTransmitTask_uart1_498_inst.paramReader_533;
    data access dataport20 -> gcsTransmitTask_uart1_498_inst.paramReader_531;
    data access dataport19 -> gcsTransmitTask_uart1_498_inst.paramReader_529;
    data access dataport18 -> gcsTransmitTask_uart1_498_inst.paramReader_527;
    data access dataport17 -> gcsTransmitTask_uart1_498_inst.paramReader_525;
    data access dataport16 -> gcsTransmitTask_uart1_498_inst.paramReader_523;
    data access dataport15 -> gcsTransmitTask_uart1_498_inst.paramReader_521;
    data access dataport14 -> gcsTransmitTask_uart1_498_inst.paramReader_519;
    data access dataport12 -> gcsTransmitTask_uart1_498_inst.armed_511;
    data access dataport368 -> gcsTransmitTask_uart1_498_inst.radio_509;
    data access dataport191 -> gcsTransmitTask_uart1_498_inst.motors_507;
    data access dataport200 -> gcsTransmitTask_uart1_498_inst.control_505;
    data access dataport235 -> gcsTransmitTask_uart1_498_inst.position_503;
    data access dataport1 -> gcsTransmitTask_uart1_498_inst.sensors_501;
    data access dataport10 -> gcsTransmitTask_uart1_498_inst.flightmode_499;
    data access dataport33 -> gcsReceiveTask_uart1_385_inst.paramWriter_430;
    data access dataport32 -> gcsReceiveTask_uart1_385_inst.paramWriter_428;
    data access dataport31 -> gcsReceiveTask_uart1_385_inst.paramWriter_426;
    data access dataport30 -> gcsReceiveTask_uart1_385_inst.paramWriter_424;
    data access dataport29 -> gcsReceiveTask_uart1_385_inst.paramWriter_422;
    data access dataport28 -> gcsReceiveTask_uart1_385_inst.paramWriter_420;
    data access dataport27 -> gcsReceiveTask_uart1_385_inst.paramWriter_418;
    data access dataport26 -> gcsReceiveTask_uart1_385_inst.paramWriter_416;
    data access dataport25 -> gcsReceiveTask_uart1_385_inst.paramWriter_414;
    data access dataport24 -> gcsReceiveTask_uart1_385_inst.paramWriter_412;
    data access dataport23 -> gcsReceiveTask_uart1_385_inst.paramWriter_410;
    data access dataport22 -> gcsReceiveTask_uart1_385_inst.paramWriter_408;
    data access dataport21 -> gcsReceiveTask_uart1_385_inst.paramWriter_406;
    data access dataport20 -> gcsReceiveTask_uart1_385_inst.paramWriter_404;
    data access dataport19 -> gcsReceiveTask_uart1_385_inst.paramWriter_402;
    data access dataport18 -> gcsReceiveTask_uart1_385_inst.paramWriter_400;
    data access dataport17 -> gcsReceiveTask_uart1_385_inst.paramWriter_398;
    data access dataport16 -> gcsReceiveTask_uart1_385_inst.paramWriter_396;
    data access dataport15 -> gcsReceiveTask_uart1_385_inst.paramWriter_394;
    data access dataport14 -> gcsReceiveTask_uart1_385_inst.paramWriter_392;
    data access dataport10 -> gcsReceiveTask_uart1_385_inst.flightMode_388;
    data access dataport33 -> gcsReceiveTask_uart1_385_inst.paramReader_470;
    data access dataport32 -> gcsReceiveTask_uart1_385_inst.paramReader_468;
    data access dataport31 -> gcsReceiveTask_uart1_385_inst.paramReader_466;
    data access dataport30 -> gcsReceiveTask_uart1_385_inst.paramReader_464;
    data access dataport29 -> gcsReceiveTask_uart1_385_inst.paramReader_462;
    data access dataport28 -> gcsReceiveTask_uart1_385_inst.paramReader_460;
    data access dataport27 -> gcsReceiveTask_uart1_385_inst.paramReader_458;
    data access dataport26 -> gcsReceiveTask_uart1_385_inst.paramReader_456;
    data access dataport25 -> gcsReceiveTask_uart1_385_inst.paramReader_454;
    data access dataport24 -> gcsReceiveTask_uart1_385_inst.paramReader_452;
    data access dataport23 -> gcsReceiveTask_uart1_385_inst.paramReader_450;
    data access dataport22 -> gcsReceiveTask_uart1_385_inst.paramReader_448;
    data access dataport21 -> gcsReceiveTask_uart1_385_inst.paramReader_446;
    data access dataport20 -> gcsReceiveTask_uart1_385_inst.paramReader_444;
    data access dataport19 -> gcsReceiveTask_uart1_385_inst.paramReader_442;
    data access dataport18 -> gcsReceiveTask_uart1_385_inst.paramReader_440;
    data access dataport17 -> gcsReceiveTask_uart1_385_inst.paramReader_438;
    data access dataport16 -> gcsReceiveTask_uart1_385_inst.paramReader_436;
    data access dataport15 -> gcsReceiveTask_uart1_385_inst.paramReader_434;
    data access dataport14 -> gcsReceiveTask_uart1_385_inst.paramReader_432;
    data access dataport368 -> stateProxy_369_inst.proxyData_370;
    data access dataport235 -> stateProxy_236_inst.proxyData_237;
    data access dataport200 -> stateProxy_201_inst.proxyData_202;
    data access dataport191 -> stateProxy_192_inst.proxyData_193;
    data access dataport10 -> motmix_179_inst.flightMode_182;
    data access dataport12 -> motmix_179_inst.armReader_180;
    data access dataport33 -> control_121_inst.paramReader_172;
    data access dataport32 -> control_121_inst.paramReader_170;
    data access dataport31 -> control_121_inst.paramReader_168;
    data access dataport30 -> control_121_inst.paramReader_166;
    data access dataport29 -> control_121_inst.paramReader_164;
    data access dataport28 -> control_121_inst.paramReader_162;
    data access dataport27 -> control_121_inst.paramReader_160;
    data access dataport26 -> control_121_inst.paramReader_158;
    data access dataport25 -> control_121_inst.paramReader_156;
    data access dataport24 -> control_121_inst.paramReader_154;
    data access dataport23 -> control_121_inst.paramReader_152;
    data access dataport22 -> control_121_inst.paramReader_150;
    data access dataport21 -> control_121_inst.paramReader_148;
    data access dataport20 -> control_121_inst.paramReader_146;
    data access dataport19 -> control_121_inst.paramReader_144;
    data access dataport18 -> control_121_inst.paramReader_142;
    data access dataport17 -> control_121_inst.paramReader_140;
    data access dataport16 -> control_121_inst.paramReader_138;
    data access dataport15 -> control_121_inst.paramReader_136;
    data access dataport14 -> control_121_inst.paramReader_134;
    data access dataport41 -> control_121_inst.userinput_126;
    data access dataport10 -> control_121_inst.flightmode_124;
    data access dataport12 -> control_121_inst.armedReader_122;
    data access dataport10 -> blink_109_inst.flightmode_112;
    data access dataport12 -> blink_109_inst.armed_110;
    data access dataport41 -> userInputMux_90_inst.src_res_99;
    data access dataport38 -> userInputMux_90_inst.snk_mav_failsafe_97;
    data access dataport37 -> userInputMux_90_inst.snk_mav_ppm_95;
    data access dataport36 -> userInputMux_90_inst.snk_rc_ppm_93;
    data access dataport12 -> userInputMux_90_inst.snk_armed_91;
    data access dataport12 -> armedMux_73_inst.armed_res_src_76;
    data access dataport40 -> armedMux_73_inst.ppm_input_snk_74;
    data access dataport38 -> userMAVInput_56_inst.src_js_fs_61;
    data access dataport37 -> userMAVInput_56_inst.rc_over_res_tx_59;
    data access dataport12 -> userMAVInput_56_inst.armedReader_57;
    data access dataport40 -> userPPMInput_42_inst.ppmChansWriter_47;
    data access dataport36 -> userPPMInput_42_inst.userInput_45;
    data access dataport39 -> userPPMInput_42_inst.flightMode_43;
    data access dataport1 -> stateProxy_2_inst.proxyData_3;
    
    --connections added by rockwell collins to link in hardware
    data access dataport191 -> motors_and_radios.motors;
    data access dataport1 -> sensors;
    
    --mavlink transmission connections
    data access dataport33 -> gcs_transmit.param1;
    data access dataport32 -> gcs_transmit.param2;
    data access dataport31 -> gcs_transmit.param3;
    data access dataport30 -> gcs_transmit.param4;
    data access dataport29 -> gcs_transmit.param5;
    data access dataport28 -> gcs_transmit.param6;
    data access dataport27 -> gcs_transmit.param7;
    data access dataport26 -> gcs_transmit.param8;
    data access dataport25 -> gcs_transmit.param9;
    data access dataport24 -> gcs_transmit.param10;
    data access dataport23 -> gcs_transmit.param11;
    data access dataport22 -> gcs_transmit.param12;
    data access dataport21 -> gcs_transmit.param13;
    data access dataport20 -> gcs_transmit.param14;
    data access dataport19 -> gcs_transmit.param15;
    data access dataport18 -> gcs_transmit.param16;
    data access dataport17 -> gcs_transmit.param17;
    data access dataport16 -> gcs_transmit.param18;
    data access dataport15 -> gcs_transmit.param19;
    data access dataport14 -> gcs_transmit.param20;
    
    --mavlink receive connections
    data access dataport33 -> gcs_receive.param1;
    data access dataport32 -> gcs_receive.param2;
    data access dataport31 -> gcs_receive.param3;
    data access dataport30 -> gcs_receive.param4;
    data access dataport29 -> gcs_receive.param5;
    data access dataport28 -> gcs_receive.param6;
    data access dataport27 -> gcs_receive.param7;
    data access dataport26 -> gcs_receive.param8;
    data access dataport25 -> gcs_receive.param9;
    data access dataport24 -> gcs_receive.param10;
    data access dataport23 -> gcs_receive.param11;
    data access dataport22 -> gcs_receive.param12;
    data access dataport21 -> gcs_receive.param13;
    data access dataport20 -> gcs_receive.param14;
    data access dataport19 -> gcs_receive.param15;
    data access dataport18 -> gcs_receive.param16;
    data access dataport17 -> gcs_receive.param17;
    data access dataport16 -> gcs_receive.param18;
    data access dataport15 -> gcs_receive.param19;
    data access dataport14 -> gcs_receive.param20; 
    
  properties 
    SMACCM::OS => "Breakaway-RTOS";
    
    
  annex resolute {**
    prove only_receive_gs(this.control_121_inst) 
  **};
    
    
end flight_gen_process.impl;



end flight_gen;