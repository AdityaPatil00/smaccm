-- AADL Document autogenerated by Ivory.Language.AADL

package flight_gen
public
  with SMACCM_SYS;
  with Base_Types;
  with TowerArrays;
  with gcsstream_timing;
  with userinput_type;
  with alt_control_dbg_type;
  with radio_stat_type;
  with motors_type;
  with controloutput_type;
  with gps_type;
  with sensors_type;
  with flightmode_type;
  with data_rate;
  with mavlink_rc_channels_override_msg;
  with mavlink_hil_state_msg;
  with radio_info_type;
  with UAV;
  with gcs_msgs;
  with SMACCM;

thread gcsTransmitTask_uart5
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart5_917_chan705_937";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_917_chan707_1009";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_917_chan707_1012");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_917_chan709_942";
    };
    paramReader: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport33_1002";
    };
    paramReader_999: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport32_1000";
    };
    paramReader_997: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport31_998";
    };
    paramReader_995: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport30_996";
    };
    paramReader_993: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport29_994";
    };
    paramReader_991: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport28_992";
    };
    paramReader_989: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport27_990";
    };
    paramReader_987: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport26_988";
    };
    paramReader_985: requires data access Base_Types::Float {
      Access_Right => read_only; 
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport25_986";
    };
    paramReader_983: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport24_984";
    };
    paramReader_981: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport23_982";
    };
    paramReader_979: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport22_980";
    };
    paramReader_977: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport21_978";
    };
    paramReader_975: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport20_976";
    };
    paramReader_973: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport19_974";
    };
    paramReader_971: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport18_972";
    };
    paramReader_969: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport17_970";
    };
    paramReader_967: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport16_968";
    };
    paramReader_965: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport15_966";
    };
    paramReader_963: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport14_964";
    };
    paramReader_961: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport13_962";
    };
    paramReader_959: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport12_960";
    };
    paramReader_957: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport11_958";
    };
    paramReader_955: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport10_956";
    };
    paramReader_953: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport9_954";
    };
    paramReader_951: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport8_952";
    };
    paramReader_949: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport7_950";
    };
    paramReader_947: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport6_948";
    };
    paramReader_945: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport5_946";
    };
    paramReader_943: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport4_944";
    };
    userinput_result: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport101_935";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport36_933";
    };
    armed: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport37_931";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport747_929";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport260_927";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport251_925";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport295_923";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport0_921";
    };
    flightmode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_917.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_917_dataport87_919";
    };
  properties
    SMACCM::Language => "Ivory";
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart5_917.c");
    Priority => 0;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_917_per50_1016");
end gcsTransmitTask_uart5;


thread encryptTask_uart5
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_909.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart5_909_chan711_911";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_909.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart5_909_chan705_913";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart5_909_chan705_916");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart5_909.c");
    SMACCM::Language => "Ivory";
    Priority => 1;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end encryptTask_uart5;


thread gcsReceiveTask_uart5
  features
    data_rate_chan: out event data port data_rate::data_rate_state.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan708_900";
    };
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan707_898";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan3_894";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan709_892";
    };
    armed: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan1_770";
    };
    hil_src: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_764_chan710_766";
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart5_764_chan706_905";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart5_764_chan706_908");
    };
    paramWriter: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport33_830";
    };
    paramWriter_827: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport32_828";
    };
    paramWriter_825: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport31_826";
    };
    paramWriter_823: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport30_824";
    };
    paramWriter_821: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport29_822";
    };
    paramWriter_819: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport28_820";
    };
    paramWriter_817: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport27_818";
    };
    paramWriter_815: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport26_816";
    };
    paramWriter_813: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport25_814";
    };
    paramWriter_811: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport24_812";
    };
    paramWriter_809: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport23_810";
    };
    paramWriter_807: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport22_808";
    };
    paramWriter_805: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport21_806";
    };
    paramWriter_803: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport20_804";
    };
    paramWriter_801: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport19_802";
    };
    paramWriter_799: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport18_800";
    };
    paramWriter_797: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport17_798";
    };
    paramWriter_795: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport16_796";
    };
    paramWriter_793: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport15_794";
    };
    paramWriter_791: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport14_792";
    };
    paramWriter_789: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport13_790";
    };
    paramWriter_787: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport12_788";
    };
    paramWriter_785: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport11_786";
    };
    paramWriter_783: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport10_784";
    };
    paramWriter_781: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport9_782";
    };
    paramWriter_779: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport8_780";
    };
    paramWriter_777: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport7_778";
    };
    paramWriter_775: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport6_776";
    };
    paramWriter_773: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport5_774";
    };
    paramWriter_771: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport4_772";
    };
    flightMode: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_764_dataport2_768";
    };
    paramReader: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport33_890";
    };
    paramReader_887: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport32_888";
    };
    paramReader_885: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport31_886";
    };
    paramReader_883: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport30_884";
    };
    paramReader_881: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport29_882";
    };
    paramReader_879: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport28_880";
    };
    paramReader_877: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport27_878";
    };
    paramReader_875: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport26_876";
    };
    paramReader_873: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport25_874";
    };
    paramReader_871: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport24_872";
    };
    paramReader_869: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport23_870";
    };
    paramReader_867: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport22_868";
    };
    paramReader_865: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport21_866";
    };
    paramReader_863: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport20_864";
    };
    paramReader_861: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport19_862";
    };
    paramReader_859: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport18_860";
    };
    paramReader_857: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport17_858";
    };
    paramReader_855: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport16_856";
    };
    paramReader_853: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport15_854";
    };
    paramReader_851: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport14_852";
    };
    paramReader_849: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport13_850";
    };
    paramReader_847: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport12_848";
    };
    paramReader_845: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport11_846";
    };
    paramReader_843: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport10_844";
    };
    paramReader_841: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport9_842";
    };
    paramReader_839: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport8_840";
    };
    paramReader_837: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport7_838";
    };
    paramReader_835: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport6_836";
    };
    paramReader_833: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport5_834";
    };
    paramReader_831: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_764.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_764_dataport4_832";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart5_764.c");
    SMACCM::Language => "Ivory";
    Priority => 2;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Sporadic;
end gcsReceiveTask_uart5;


thread decryptTask_uart5
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_756.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart5_756_chan706_758";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_756.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart5_756_chan712_760";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart5_756_chan712_763");
    };
  properties
    SMACCM::Encryption_Algorthim => "AES-128-CTR-HMAC-SHA1";
    Source_Text => ("tower_task_usercode_decryptTask_uart5_756.c");
    SMACCM::Language => "Ivory";
    Priority => 3;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end decryptTask_uart5;


thread stateProxy
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_748.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_748_chan713_752";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_748_chan713_755");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_748.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_748_dataport747_750";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_748.c");
    SMACCM::Language => "Ivory";
    Priority => 4;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end stateProxy;


thread datalink
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_715_chan698_737";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_715_chan714_725";
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_715_chan713_723";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_715_chan712_721";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_715_chan711_739";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_715_chan711_742");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_715.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_715_chan699_717";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_715_chan699_735");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_715.c");
    SMACCM::Language => "Ivory";
    Priority => 5;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_715_per1000_746");
end datalink;


thread gcsTransmitTask_uart1
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart1_598_chan386_618";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_598_chan388_690";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_598_chan388_693");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_598_chan390_623";
    };
    paramReader: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport33_683";
    };
    paramReader_680: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport32_681";
    };
    paramReader_678: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport31_679";
    };
    paramReader_676: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport30_677";
    };
    paramReader_674: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport29_675";
    };
    paramReader_672: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport28_673";
    };
    paramReader_670: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport27_671";
    };
    paramReader_668: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport26_669";
    };
    paramReader_666: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport25_667";
    };
    paramReader_664: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport24_665";
    };
    paramReader_662: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport23_663";
    };
    paramReader_660: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport22_661";
    };
    paramReader_658: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport21_659";
    };
    paramReader_656: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport20_657";
    };
    paramReader_654: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport19_655";
    };
    paramReader_652: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport18_653";
    };
    paramReader_650: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport17_651";
    };
    paramReader_648: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport16_649";
    };
    paramReader_646: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport15_647";
    };
    paramReader_644: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport14_645";
    };
    paramReader_642: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport13_643";
    };
    paramReader_640: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport12_641";
    };
    paramReader_638: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport11_639";
    };
    paramReader_636: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport10_637";
    };
    paramReader_634: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport9_635";
    };
    paramReader_632: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport8_633";
    };
    paramReader_630: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport7_631";
    };
    paramReader_628: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport6_629";
    };
    paramReader_626: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport5_627";
    };
    paramReader_624: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport4_625";
    };
    userinput_result: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport101_616";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport36_614";
    };
    armed: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport37_612";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport428_610";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport260_608";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport251_606";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport295_604";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport0_602";
    };
    flightmode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_598.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_598_dataport87_600";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart1_598.c");
    SMACCM::Language => "Ivory";
    Priority => 6;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_598_per50_697");
end gcsTransmitTask_uart1;


thread encryptTask_uart1
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_590.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart1_590_chan392_592";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_590.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart1_590_chan386_594";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart1_590_chan386_597");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart1_590.c");
    SMACCM::Language => "Ivory";
    Priority => 7;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end encryptTask_uart1;


thread gcsReceiveTask_uart1
  features
    data_rate_chan: out event data port data_rate::data_rate_state.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan389_581";
    };
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan388_579";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan3_575";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 512;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan390_573";
    };
    armed: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan1_451";
    };
    hil_src: out event data port mavlink_hil_state_msg::hil_state_msg.impl {
      Queue_Size => 4;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_445_chan391_447";
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart1_445_chan387_586";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart1_445_chan387_589");
    };
    paramWriter: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport33_511";
    };
    paramWriter_508: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport32_509";
    };
    paramWriter_506: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport31_507";
    };
    paramWriter_504: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport30_505";
    };
    paramWriter_502: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport29_503";
    };
    paramWriter_500: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport28_501";
    };
    paramWriter_498: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport27_499";
    };
    paramWriter_496: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport26_497";
    };
    paramWriter_494: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport25_495";
    };
    paramWriter_492: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport24_493";
    };
    paramWriter_490: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport23_491";
    };
    paramWriter_488: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport22_489";
    };
    paramWriter_486: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport21_487";
    };
    paramWriter_484: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport20_485";
    };
    paramWriter_482: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport19_483";
    };
    paramWriter_480: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport18_481";
    };
    paramWriter_478: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport17_479";
    };
    paramWriter_476: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport16_477";
    };
    paramWriter_474: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport15_475";
    };
    paramWriter_472: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport14_473";
    };
    paramWriter_470: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport13_471";
    };
    paramWriter_468: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport12_469";
    };
    paramWriter_466: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport11_467";
    };
    paramWriter_464: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport10_465";
    };
    paramWriter_462: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport9_463";
    };
    paramWriter_460: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport8_461";
    };
    paramWriter_458: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport7_459";
    };
    paramWriter_456: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport6_457";
    };
    paramWriter_454: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport5_455";
    };
    paramWriter_452: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport4_453";
    };
    flightMode: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart1_445_dataport2_449";
    };
    paramReader: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport33_571";
    };
    paramReader_568: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport32_569";
    };
    paramReader_566: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport31_567";
    };
    paramReader_564: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport30_565";
    };
    paramReader_562: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport29_563";
    };
    paramReader_560: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport28_561";
    };
    paramReader_558: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport27_559";
    };
    paramReader_556: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport26_557";
    };
    paramReader_554: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport25_555";
    };
    paramReader_552: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport24_553";
    };
    paramReader_550: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport23_551";
    };
    paramReader_548: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport22_549";
    };
    paramReader_546: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport21_547";
    };
    paramReader_544: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport20_545";
    };
    paramReader_542: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport19_543";
    };
    paramReader_540: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport18_541";
    };
    paramReader_538: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport17_539";
    };
    paramReader_536: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport16_537";
    };
    paramReader_534: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport15_535";
    };
    paramReader_532: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport14_533";
    };
    paramReader_530: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport13_531";
    };
    paramReader_528: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport12_529";
    };
    paramReader_526: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport11_527";
    };
    paramReader_524: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport10_525";
    };
    paramReader_522: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport9_523";
    };
    paramReader_520: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport8_521";
    };
    paramReader_518: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport7_519";
    };
    paramReader_516: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport6_517";
    };
    paramReader_514: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport5_515";
    };
    paramReader_512: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_445.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart1_445_dataport4_513";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart1_445.c");
    SMACCM::Language => "Ivory";
    Priority => 8;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Sporadic;
end gcsReceiveTask_uart1;


thread decryptTask_uart1
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_437.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart1_437_chan387_439";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_437.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart1_437_chan393_441";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart1_437_chan393_444");
    };
  properties
    SMACCM::Encryption_Algorthim => "AES-128-CTR-HMAC-SHA1";    
    Source_Text => ("tower_task_usercode_decryptTask_uart1_437.c");
    SMACCM::Language => "Ivory";
    Priority => 9;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end decryptTask_uart1;


thread stateProxy_429
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_429.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_429_chan394_433";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_429_chan394_436");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_429.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_429_dataport428_431";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_429.c");
    SMACCM::Language => "Ivory";
    Priority => 10;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end stateProxy_429;


thread datalink_396
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_396_chan379_418";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_396_chan395_406";
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_396_chan394_404";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_396_chan393_402";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_396_chan392_420";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_396_chan392_423");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_396_chan380_398";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_396_chan380_416");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_396.c");
    SMACCM::Language => "Ivory";
    Priority => 11;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_396_per1000_427");
end datalink_396;


thread px4ioar
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_335.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_335_chan349_351";
    };
    uart_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_335.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_335_chan328_337";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_335.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_335_chan349_353";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_335_chan349_newstate_loop_378", "eventhandler_px4ioar_335_chan349_newstate_bootCheckComplete_374", "eventhandler_px4ioar_335_chan349_newstate_initMulti_371", "eventhandler_px4ioar_335_chan349_newstate_init4_370", "eventhandler_px4ioar_335_chan349_newstate_init3_367", "eventhandler_px4ioar_335_chan349_newstate_init2_364", "eventhandler_px4ioar_335_chan349_newstate_init1_361", "eventhandler_px4ioar_335_chan349_newstate_bootBegin_358");
    };
    motor_istream: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_335.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_335_chan34_339";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_335_chan34_loop_377");
    };
  properties
    Source_Text => ("tower_task_usercode_px4ioar_335.c");
    SMACCM::Language => "Ivory";
    Priority => 12;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_335_per1_loop_376", "eventhandler_px4ioar_335_per1_bootCheckComplete_373", "eventhandler_px4ioar_335_per1_init4_369", "eventhandler_px4ioar_335_per1_init3_366", "eventhandler_px4ioar_335_per1_init2_363", "eventhandler_px4ioar_335_per1_init1_360", "eventhandler_px4ioar_335_per1_bootBegin_357");
end px4ioar;


thread sensorsCaptureTask
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_304.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_sensorsCaptureTask_304_chan317_319";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_304.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_304_chan317_321";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_304_chan317_newstate_captureloop_327", "eventhandler_sensorsCaptureTask_304_chan317_newstate_init_324");
    };
    position: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_304.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_304_chan276_309";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_304_chan276_312");
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_304.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_sensorsCaptureTask_304_dataport0_306";
    };
  properties
    Source_Text => ("tower_task_usercode_sensorsCaptureTask_304.c");
    SMACCM::Language => "Ivory";
    Priority => 13;
    Source_Stack_Size => 1024 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_304_per1_captureloop_326");
end sensorsCaptureTask;


thread stateProxy_296
  features
    proxyEvent: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_296.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_296_chan276_300";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_296_chan276_303");
    };
    proxyData: requires data access gps_type::position.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_296.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_296_dataport295_298";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_296.c");
    SMACCM::Language => "Ivory";
    Priority => 14;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end stateProxy_296;


thread ubloxGPS
  features
    position: out event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_277.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ubloxGPS_277_chan276_283";
    };
    istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_277.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_ubloxGPS_277_chan270_279";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_ubloxGPS_277_chan270_294");
    };
  properties
    Source_Text => ("tower_task_usercode_ubloxGPS_277.c");
    SMACCM::Language => "Ivory";
    Priority => 15;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end ubloxGPS;


thread stateProxy_261
  features
    proxyEvent: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_261.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_261_chan34_265";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_261_chan34_268");
    };
    proxyData: requires data access motors_type::motors.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_261.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_261_dataport260_263";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_261.c");
    SMACCM::Language => "Ivory";
    Priority => 16;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end stateProxy_261;


thread stateProxy_252
  features
    proxyEvent: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_252.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_stateProxy_252_chan35_256";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_stateProxy_252_chan35_259");
    };
    proxyData: requires data access controloutput_type::controloutput.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_stateProxy_252.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_stateProxy_252_dataport251_254";
    };
  properties
    Source_Text => ("tower_task_usercode_stateProxy_252.c");
    SMACCM::Language => "Ivory";
    Priority => 17;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end stateProxy_252;


thread motmix
  features
    motors: out event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_239.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_motmix_239_chan34_245";
    };
    control: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_239.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motmix_239_chan35_247";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motmix_239_chan35_250");
    };
    flightMode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_239.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_239_dataport87_243";
    };
    armReader: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_239.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_239_dataport37_241";
    };
  properties
    Source_Text => ("tower_task_usercode_motmix_239.c");
    SMACCM::Language => "Ivory";
    Priority => 18;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end motmix;


thread control
  features
    control: out event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_control_136_chan35_148";
    };
    alt_control_dbg: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_136_dataport36_146";
    };
    paramReader: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport33_208";
    };
    paramReader_205: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport32_206";
    };
    paramReader_203: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport31_204";
    };
    paramReader_201: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport30_202";
    };
    paramReader_199: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport29_200";
    };
    paramReader_197: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport28_198";
    };
    paramReader_195: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport27_196";
    };
    paramReader_193: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport26_194";
    };
    paramReader_191: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport25_192";
    };
    paramReader_189: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport24_190";
    };
    paramReader_187: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport23_188";
    };
    paramReader_185: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport22_186";
    };
    paramReader_183: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport21_184";
    };
    paramReader_181: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport20_182";
    };
    paramReader_179: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport19_180";
    };
    paramReader_177: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport18_178";
    };
    paramReader_175: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport17_176";
    };
    paramReader_173: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport16_174";
    };
    paramReader_171: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport15_172";
    };
    paramReader_169: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport14_170";
    };
    paramReader_167: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport13_168";
    };
    paramReader_165: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport12_166";
    };
    paramReader_163: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport11_164";
    };
    paramReader_161: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport10_162";
    };
    paramReader_159: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport9_160";
    };
    paramReader_157: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport8_158";
    };
    paramReader_155: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport7_156";
    };
    paramReader_153: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport6_154";
    };
    paramReader_151: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport5_152";
    };
    paramReader_149: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport4_150";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport0_144";
    };
    userinput: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport101_142";
    };
    flightmode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport87_140";
    };
    armedReader: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_136.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_136_dataport37_138";
    };
  properties
    Source_Text => ("tower_task_usercode_control_136.c");
    SMACCM::Language => "Ivory";
    Priority => 19;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_136_per5_238");
end control;


thread blink
  features
    flightmode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_124_dataport87_128";
    };
    armed: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_124_dataport37_126";
    };
  properties
    Source_Text => ("tower_task_usercode_blink_124.c");
    SMACCM::Language => "Ivory";
    Priority => 20;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 125 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_blink_124_per125_135");
end blink;


thread userInputMux
  features
    src_res: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userInputMux_102_dataport101_114";
    };
    snk_mav_failsafe: requires data access Base_Types::Boolean {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_102_dataport51_112";
    };
    snk_flightmode: requires data access flightmode_type::flightmode.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_102_dataport87_110";
    };
    snk_mav_ppm: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_102_dataport52_108";
    };
    snk_rc_ppm: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_102_dataport38_106";
    };
    snk_armed: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userInputMux_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userInputMux_102_dataport37_104";
    };
  properties
    Source_Text => ("tower_task_usercode_userInputMux_102.c");
    SMACCM::Language => "Ivory";
    Priority => 21;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userInputMux_102_per50_123");
end userInputMux;


thread flightModeMuxTask
  features
    flightmode_src: requires data access flightmode_type::flightmode.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_flightModeMuxTask_88.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_flightModeMuxTask_88_dataport87_94";
    };
    mav_armed_snk: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_flightModeMuxTask_88.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_flightModeMuxTask_88_dataport37_92";
    };
    ppm_input_snk: requires data access TowerArrays::ArrTy_8TyBase_Types_Unsigned_16.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_flightModeMuxTask_88.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_flightModeMuxTask_88_dataport39_90";
    };
  properties
    Source_Text => ("tower_task_usercode_flightModeMuxTask_88.c");
    SMACCM::Language => "Ivory";
    Priority => 22;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_flightModeMuxTask_88_per50_100");
end flightModeMuxTask;


thread armingTask
  features
    mav_arming: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armingTask_70.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_armingTask_70_chan1_79";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_armingTask_70_chan1_82");
    };
    armed_res_src: requires data access Base_Types::Unsigned_8 {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armingTask_70.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_armingTask_70_dataport37_74";
    };
    ppm_input_snk: requires data access TowerArrays::ArrTy_8TyBase_Types_Unsigned_16.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_armingTask_70.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_armingTask_70_dataport39_72";
    };
  properties
    Source_Text => ("tower_task_usercode_armingTask_70.c");
    SMACCM::Language => "Ivory";
    Priority => 23;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_armingTask_70_per50_86");
end armingTask;


thread userMAVInput
  features
    rc_over_snk: in event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_53.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_userMAVInput_53_chan3_66";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userMAVInput_53_chan3_69");
    };
    src_js_fs: requires data access Base_Types::Boolean {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_53.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userMAVInput_53_dataport51_59";
    };
    rc_over_res_tx: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_53.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userMAVInput_53_dataport52_57";
    };
    armedReader: requires data access Base_Types::Unsigned_8 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userMAVInput_53.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_userMAVInput_53_dataport37_55";
    };
  properties
    Source_Text => ("tower_task_usercode_userMAVInput_53.c");
    SMACCM::Language => "Ivory";
    Priority => 24;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Sporadic;
end userMAVInput;


thread userPPMInput
  features
    ppmChansWriter: requires data access TowerArrays::ArrTy_8TyBase_Types_Unsigned_16.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userPPMInput_40.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userPPMInput_40_dataport39_44";
    };
    userInput: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_userPPMInput_40.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_userPPMInput_40_dataport38_42";
    };
  properties
    Source_Text => ("tower_task_usercode_userPPMInput_40.c");
    SMACCM::Language => "Ivory";
    Priority => 25;
    Source_Stack_Size => 256 bytes;
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_userPPMInput_40_per50_50");
end userPPMInput;


thread uartISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_700.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_700_chan699_704";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_700.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_700_chan698_702";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_700.c");
    SMACCM::Language => "Ivory";
    Priority => 26;
    SMACCM_SYS::Signal_Name => "UART5_IRQHandler";
end uartISR;


thread uartISR_381
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_381_chan380_385";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_381.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_381_chan379_383";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_381.c");
    SMACCM::Language => "Ivory";
    Priority => 27;
    SMACCM_SYS::Signal_Name => "USART1_IRQHandler";
end uartISR_381;


thread uartISR_330
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_330.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_330_chan329_334";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_330.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_330_chan328_332";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_330.c");
    SMACCM::Language => "Ivory";
    Priority => 28;
    SMACCM_SYS::Signal_Name => "USART2_IRQHandler";
end uartISR_330;


thread uartISR_271
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_271.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uartISR_271_chan270_275";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uartISR_271.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uartISR_271_chan269_273";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uartISR_271.c");
    SMACCM::Language => "Ivory";
    Priority => 29;
    SMACCM_SYS::Signal_Name => "USART6_IRQHandler";
end uartISR_271;



system Software
  features
  	sensors: provides data access sensors_type::sensors_result.impl;
  	motors_and_radios: feature group UAV::motors_and_radios;
  	gcs_transmit : feature group gcs_msgs::gcs_msg;
  	gcs_receive : feature group gcs_msgs::gcs_msg;
  	
end Software;

system implementation Software.impl
  subcomponents
  	main : process flight_gen_process.impl;
  	
  connections
    conn0 : data access sensors -> main.sensors;
    conn1 : feature group main.motors_and_radios <-> motors_and_radios;
    conn2 : feature group gcs_transmit <-> main.gcs_transmit;
    conn3 : feature group gcs_receive <-> main.gcs_receive;
  	
end Software.impl;

process flight_gen_process
  features
  	sensors: provides data access sensors_type::sensors_result.impl{
  		Access_Right => read_write;
  	};
  	motors_and_radios: feature group UAV::motors_and_radios;
  	gcs_transmit: feature group gcs_msgs::gcs_msg {
  		Access_Right => read_only applies to param1;
  		Access_Right => read_only applies to param2;
  		Access_Right => read_only applies to param3;
  		Access_Right => read_only applies to param4;
  		Access_Right => read_only applies to param5;
  		Access_Right => read_only applies to param6;
  		Access_Right => read_only applies to param7;
  		Access_Right => read_only applies to param8;
  		Access_Right => read_only applies to param9;
  		Access_Right => read_only applies to param10;
  		Access_Right => read_only applies to param11;
  		Access_Right => read_only applies to param12;
  		Access_Right => read_only applies to param13;
  		Access_Right => read_only applies to param14;
  		Access_Right => read_only applies to param15;
  		Access_Right => read_only applies to param16;
  		Access_Right => read_only applies to param17;
  		Access_Right => read_only applies to param18;
  		Access_Right => read_only applies to param19;
  		Access_Right => read_only applies to param20;
  	};
  	gcs_receive: feature group gcs_msgs::gcs_msg {
  		Access_Right => write_only applies to param1;
  		Access_Right => write_only applies to param2;
  		Access_Right => write_only applies to param3;
  		Access_Right => write_only applies to param4;
  		Access_Right => write_only applies to param5;
  		Access_Right => write_only applies to param6;
  		Access_Right => write_only applies to param7;
  		Access_Right => write_only applies to param8;
  		Access_Right => write_only applies to param9;
  		Access_Right => write_only applies to param10;
  		Access_Right => write_only applies to param11;
  		Access_Right => write_only applies to param12;
  		Access_Right => write_only applies to param13;
  		Access_Right => write_only applies to param14;
  		Access_Right => write_only applies to param15;
  		Access_Right => write_only applies to param16;
  		Access_Right => write_only applies to param17;
  		Access_Right => write_only applies to param18;
  		Access_Right => write_only applies to param19;
  		Access_Right => write_only applies to param20;
  	};
  
   annex agree {**
    	guarantee "whatever" : true;
    **};
end flight_gen_process;

process implementation flight_gen_process.impl
  subcomponents
    dataport747 : data radio_stat_type::radio_stat.impl;
    dataport428 : data radio_stat_type::radio_stat.impl;
    dataport295 : data gps_type::position.impl;
    dataport260 : data motors_type::motors.impl;
    dataport251 : data controloutput_type::controloutput.impl;
    dataport101 : data userinput_type::userinput_result.impl;
    dataport87 : data flightmode_type::flightmode.impl;
    dataport52 : data userinput_type::userinput_result.impl;
    dataport51 : data Base_Types::Boolean;
    dataport39 : data TowerArrays::ArrTy_8TyBase_Types_Unsigned_16.impl;
    dataport38 : data userinput_type::userinput_result.impl;
    dataport37 : data Base_Types::Unsigned_8;
    dataport36 : data alt_control_dbg_type::alt_control_dbg.impl;
    dataport33 : data Base_Types::Float;
    dataport32 : data Base_Types::Float;
    dataport31 : data Base_Types::Float;
    dataport30 : data Base_Types::Float;
    dataport29 : data Base_Types::Float;
    dataport28 : data Base_Types::Float;
    dataport27 : data Base_Types::Float;
    dataport26 : data Base_Types::Float;
    dataport25 : data Base_Types::Float;
    dataport24 : data Base_Types::Float;
    dataport23 : data Base_Types::Float;
    dataport22 : data Base_Types::Float;
    dataport21 : data Base_Types::Float;
    dataport20 : data Base_Types::Float;
    dataport19 : data Base_Types::Float;
    dataport18 : data Base_Types::Float;
    dataport17 : data Base_Types::Float;
    dataport16 : data Base_Types::Float;
    dataport15 : data Base_Types::Float;
    dataport14 : data Base_Types::Float;
    dataport13 : data Base_Types::Float;
    dataport12 : data Base_Types::Float;
    dataport11 : data Base_Types::Float;
    dataport10 : data Base_Types::Float;
    dataport9 : data Base_Types::Float;
    dataport8 : data Base_Types::Float;
    dataport7 : data Base_Types::Float;
    dataport6 : data Base_Types::Float;
    dataport5 : data Base_Types::Float;
    dataport4 : data Base_Types::Float;
    dataport2 : data flightmode_type::flightmode.impl;
    dataport0 : data sensors_type::sensors_result.impl;
    gcsTransmitTask_uart5_inst : thread gcsTransmitTask_uart5;
    encryptTask_uart5_inst : thread encryptTask_uart5;
    gcsReceiveTask_uart5_inst : thread gcsReceiveTask_uart5;
    decryptTask_uart5_inst : thread decryptTask_uart5;
    stateProxy_inst : thread stateProxy;
    datalink_inst : thread datalink;
    gcsTransmitTask_uart1_inst : thread gcsTransmitTask_uart1;
    encryptTask_uart1_inst : thread encryptTask_uart1;
    gcsReceiveTask_uart1_inst : thread gcsReceiveTask_uart1;
    decryptTask_uart1_inst : thread decryptTask_uart1;
    stateProxy_429_inst : thread stateProxy_429;
    datalink_396_inst : thread datalink_396;
    px4ioar_inst : thread px4ioar;
    sensorsCaptureTask_inst : thread sensorsCaptureTask;
    stateProxy_296_inst : thread stateProxy_296;
    ubloxGPS_inst : thread ubloxGPS;
    stateProxy_261_inst : thread stateProxy_261;
    stateProxy_252_inst : thread stateProxy_252;
    motmix_inst : thread motmix;
    control_inst : thread control;
    blink_inst : thread blink;
    userInputMux_inst : thread userInputMux;
    flightModeMuxTask_inst : thread flightModeMuxTask;
    armingTask_inst : thread armingTask;
    userMAVInput_inst : thread userMAVInput;
    userPPMInput_inst : thread userPPMInput;
    uartISR_inst : thread uartISR;
    uartISR_381_inst : thread uartISR_381;
    uartISR_330_inst : thread uartISR_330;
    uartISR_271_inst : thread uartISR_271;
  connections
conn0:     port gcsTransmitTask_uart5_inst.gcsTxToEncSrc -> encryptTask_uart5_inst.gcsTxToEnc;
conn1:     port encryptTask_uart5_inst.encToHxSrc -> datalink_inst.framed_istream;
conn2:     port gcsReceiveTask_uart5_inst.streamperiods -> gcsTransmitTask_uart5_inst.streamPeriod;
conn3:     port gcsReceiveTask_uart5_inst.rc_override_tx -> userMAVInput_inst.rc_over_snk;
conn4:     port gcsReceiveTask_uart5_inst.param_req -> gcsTransmitTask_uart5_inst.paramReqs;
conn5:     port gcsReceiveTask_uart5_inst.armed -> armingTask_inst.mav_arming;
conn6:     port decryptTask_uart5_inst.decToGcsRxSrc -> gcsReceiveTask_uart5_inst.mavStream;
conn7:     port datalink_inst.link_ostream -> uartISR_inst.ostream;
conn8:     port datalink_inst.stat_ostream -> stateProxy_inst.proxyEvent;
conn9:     port datalink_inst.framed_ostream -> decryptTask_uart5_inst.hxToDecRcv;
conn10:     port gcsTransmitTask_uart1_inst.gcsTxToEncSrc -> encryptTask_uart1_inst.gcsTxToEnc;
conn11:     port encryptTask_uart1_inst.encToHxSrc -> datalink_396_inst.framed_istream;
conn12:     port gcsReceiveTask_uart1_inst.streamperiods -> gcsTransmitTask_uart1_inst.streamPeriod;
conn13:     port gcsReceiveTask_uart1_inst.rc_override_tx -> userMAVInput_inst.rc_over_snk;
conn14:     port gcsReceiveTask_uart1_inst.param_req -> gcsTransmitTask_uart1_inst.paramReqs;
conn15:     port gcsReceiveTask_uart1_inst.armed -> armingTask_inst.mav_arming;
conn16:     port decryptTask_uart1_inst.decToGcsRxSrc -> gcsReceiveTask_uart1_inst.mavStream;
conn17:     port datalink_396_inst.link_ostream -> uartISR_381_inst.ostream;
conn18:     port datalink_396_inst.stat_ostream -> stateProxy_429_inst.proxyEvent;
conn19:     port datalink_396_inst.framed_ostream -> decryptTask_uart1_inst.hxToDecRcv;
conn20:     port px4ioar_inst.newstateEmitter -> px4ioar_inst.newstateEvent;
conn21:     port px4ioar_inst.uart_ostream -> uartISR_330_inst.ostream;
conn22:     port sensorsCaptureTask_inst.newstateEmitter -> sensorsCaptureTask_inst.newstateEvent;
conn23:     port ubloxGPS_inst.position -> sensorsCaptureTask_inst.position;
conn24:     port ubloxGPS_inst.position -> stateProxy_296_inst.proxyEvent;
conn25:     port motmix_inst.motors -> px4ioar_inst.motor_istream;
conn26:     port motmix_inst.motors -> stateProxy_261_inst.proxyEvent;
conn27:     port control_inst.control -> stateProxy_252_inst.proxyEvent;
conn28:     port control_inst.control -> motmix_inst.control;
conn29:     port uartISR_inst.istream -> datalink_inst.link_istream;
conn30:     port uartISR_381_inst.istream -> datalink_396_inst.link_istream;
conn31:     port uartISR_271_inst.istream -> ubloxGPS_inst.istream;
conn32:     data access dataport33 -> gcsTransmitTask_uart5_inst.paramReader;
conn33:     data access dataport32 -> gcsTransmitTask_uart5_inst.paramReader_999;
conn34:     data access dataport31 -> gcsTransmitTask_uart5_inst.paramReader_997;
conn35:     data access dataport30 -> gcsTransmitTask_uart5_inst.paramReader_995;
conn36:     data access dataport29 -> gcsTransmitTask_uart5_inst.paramReader_993;
conn37:     data access dataport28 -> gcsTransmitTask_uart5_inst.paramReader_991;
conn38:     data access dataport27 -> gcsTransmitTask_uart5_inst.paramReader_989;
conn39:     data access dataport26 -> gcsTransmitTask_uart5_inst.paramReader_987;
conn40:     data access dataport25 -> gcsTransmitTask_uart5_inst.paramReader_985;
conn41:     data access dataport24 -> gcsTransmitTask_uart5_inst.paramReader_983;
conn42:     data access dataport23 -> gcsTransmitTask_uart5_inst.paramReader_981;
conn43:     data access dataport22 -> gcsTransmitTask_uart5_inst.paramReader_979;
conn44:     data access dataport21 -> gcsTransmitTask_uart5_inst.paramReader_977;
conn45:     data access dataport20 -> gcsTransmitTask_uart5_inst.paramReader_975;
conn46:     data access dataport19 -> gcsTransmitTask_uart5_inst.paramReader_973;
conn47:     data access dataport18 -> gcsTransmitTask_uart5_inst.paramReader_971;
conn48:     data access dataport17 -> gcsTransmitTask_uart5_inst.paramReader_969;
conn49:     data access dataport16 -> gcsTransmitTask_uart5_inst.paramReader_967;
conn50:     data access dataport15 -> gcsTransmitTask_uart5_inst.paramReader_965;
conn51:     data access dataport14 -> gcsTransmitTask_uart5_inst.paramReader_963;
conn52:     data access dataport13 -> gcsTransmitTask_uart5_inst.paramReader_961;
conn53:     data access dataport12 -> gcsTransmitTask_uart5_inst.paramReader_959;
conn54:     data access dataport11 -> gcsTransmitTask_uart5_inst.paramReader_957;
conn55:     data access dataport10 -> gcsTransmitTask_uart5_inst.paramReader_955;
conn56:     data access dataport9 -> gcsTransmitTask_uart5_inst.paramReader_953;
conn57:     data access dataport8 -> gcsTransmitTask_uart5_inst.paramReader_951;
conn58:     data access dataport7 -> gcsTransmitTask_uart5_inst.paramReader_949;
conn59:     data access dataport6 -> gcsTransmitTask_uart5_inst.paramReader_947;
conn60:     data access dataport5 -> gcsTransmitTask_uart5_inst.paramReader_945;
conn61:     data access dataport4 -> gcsTransmitTask_uart5_inst.paramReader_943;
conn62:     data access dataport101 -> gcsTransmitTask_uart5_inst.userinput_result;
conn63:     data access dataport36 -> gcsTransmitTask_uart5_inst.alt_control;
conn64:     data access dataport37 -> gcsTransmitTask_uart5_inst.armed;
conn65:     data access dataport747 -> gcsTransmitTask_uart5_inst.radio;
conn66:     data access dataport260 -> gcsTransmitTask_uart5_inst.motors;
conn67:     data access dataport251 -> gcsTransmitTask_uart5_inst.control;
conn68:     data access dataport295 -> gcsTransmitTask_uart5_inst.position;
conn69:     data access dataport0 -> gcsTransmitTask_uart5_inst.sensors;
conn70:     data access dataport87 -> gcsTransmitTask_uart5_inst.flightmode;
conn71:     data access dataport33 -> gcsReceiveTask_uart5_inst.paramWriter;
conn72:     data access dataport32 -> gcsReceiveTask_uart5_inst.paramWriter_827;
conn73:     data access dataport31 -> gcsReceiveTask_uart5_inst.paramWriter_825;
conn74:     data access dataport30 -> gcsReceiveTask_uart5_inst.paramWriter_823;
conn75:     data access dataport29 -> gcsReceiveTask_uart5_inst.paramWriter_821;
conn76:     data access dataport28 -> gcsReceiveTask_uart5_inst.paramWriter_819;
conn77:     data access dataport27 -> gcsReceiveTask_uart5_inst.paramWriter_817;
conn78:     data access dataport26 -> gcsReceiveTask_uart5_inst.paramWriter_815;
conn79:     data access dataport25 -> gcsReceiveTask_uart5_inst.paramWriter_813;
conn80:     data access dataport24 -> gcsReceiveTask_uart5_inst.paramWriter_811;
conn81:     data access dataport23 -> gcsReceiveTask_uart5_inst.paramWriter_809;
conn82:     data access dataport22 -> gcsReceiveTask_uart5_inst.paramWriter_807;
conn83:     data access dataport21 -> gcsReceiveTask_uart5_inst.paramWriter_805;
conn84:     data access dataport20 -> gcsReceiveTask_uart5_inst.paramWriter_803;
conn85:     data access dataport19 -> gcsReceiveTask_uart5_inst.paramWriter_801;
conn86:     data access dataport18 -> gcsReceiveTask_uart5_inst.paramWriter_799;
conn87:     data access dataport17 -> gcsReceiveTask_uart5_inst.paramWriter_797;
conn88:     data access dataport16 -> gcsReceiveTask_uart5_inst.paramWriter_795;
conn89:     data access dataport15 -> gcsReceiveTask_uart5_inst.paramWriter_793;
conn90:     data access dataport14 -> gcsReceiveTask_uart5_inst.paramWriter_791;
conn91:     data access dataport13 -> gcsReceiveTask_uart5_inst.paramWriter_789;
conn92:     data access dataport12 -> gcsReceiveTask_uart5_inst.paramWriter_787;
conn93:     data access dataport11 -> gcsReceiveTask_uart5_inst.paramWriter_785;
conn94:     data access dataport10 -> gcsReceiveTask_uart5_inst.paramWriter_783;
conn95:     data access dataport9 -> gcsReceiveTask_uart5_inst.paramWriter_781;
conn96:     data access dataport8 -> gcsReceiveTask_uart5_inst.paramWriter_779;
conn97:     data access dataport7 -> gcsReceiveTask_uart5_inst.paramWriter_777;
conn98:     data access dataport6 -> gcsReceiveTask_uart5_inst.paramWriter_775;
conn99:     data access dataport5 -> gcsReceiveTask_uart5_inst.paramWriter_773;
conn100:     data access dataport4 -> gcsReceiveTask_uart5_inst.paramWriter_771;
conn101:     data access dataport2 -> gcsReceiveTask_uart5_inst.flightMode;
conn102:     data access dataport33 -> gcsReceiveTask_uart5_inst.paramReader;
conn103:     data access dataport32 -> gcsReceiveTask_uart5_inst.paramReader_887;
conn104:     data access dataport31 -> gcsReceiveTask_uart5_inst.paramReader_885;
conn105:     data access dataport30 -> gcsReceiveTask_uart5_inst.paramReader_883;
conn106:     data access dataport29 -> gcsReceiveTask_uart5_inst.paramReader_881;
conn107:     data access dataport28 -> gcsReceiveTask_uart5_inst.paramReader_879;
conn108:     data access dataport27 -> gcsReceiveTask_uart5_inst.paramReader_877;
conn109:     data access dataport26 -> gcsReceiveTask_uart5_inst.paramReader_875;
conn110:     data access dataport25 -> gcsReceiveTask_uart5_inst.paramReader_873;
conn111:     data access dataport24 -> gcsReceiveTask_uart5_inst.paramReader_871;
conn112:     data access dataport23 -> gcsReceiveTask_uart5_inst.paramReader_869;
conn113:     data access dataport22 -> gcsReceiveTask_uart5_inst.paramReader_867;
conn114:     data access dataport21 -> gcsReceiveTask_uart5_inst.paramReader_865;
conn115:     data access dataport20 -> gcsReceiveTask_uart5_inst.paramReader_863;
conn116:     data access dataport19 -> gcsReceiveTask_uart5_inst.paramReader_861;
conn117:     data access dataport18 -> gcsReceiveTask_uart5_inst.paramReader_859;
conn118:     data access dataport17 -> gcsReceiveTask_uart5_inst.paramReader_857;
conn119:     data access dataport16 -> gcsReceiveTask_uart5_inst.paramReader_855;
conn120:     data access dataport15 -> gcsReceiveTask_uart5_inst.paramReader_853;
conn121:     data access dataport14 -> gcsReceiveTask_uart5_inst.paramReader_851;
conn122:     data access dataport13 -> gcsReceiveTask_uart5_inst.paramReader_849;
conn123:     data access dataport12 -> gcsReceiveTask_uart5_inst.paramReader_847;
conn124:     data access dataport11 -> gcsReceiveTask_uart5_inst.paramReader_845;
conn125:     data access dataport10 -> gcsReceiveTask_uart5_inst.paramReader_843;
conn126:     data access dataport9 -> gcsReceiveTask_uart5_inst.paramReader_841;
conn127:     data access dataport8 -> gcsReceiveTask_uart5_inst.paramReader_839;
conn128:     data access dataport7 -> gcsReceiveTask_uart5_inst.paramReader_837;
conn129:     data access dataport6 -> gcsReceiveTask_uart5_inst.paramReader_835;
conn130:     data access dataport5 -> gcsReceiveTask_uart5_inst.paramReader_833;
conn131:     data access dataport4 -> gcsReceiveTask_uart5_inst.paramReader_831;
conn132:     data access dataport747 -> stateProxy_inst.proxyData;
conn133:     data access dataport33 -> gcsTransmitTask_uart1_inst.paramReader;
conn134:     data access dataport32 -> gcsTransmitTask_uart1_inst.paramReader_680;
conn135:     data access dataport31 -> gcsTransmitTask_uart1_inst.paramReader_678;
conn136:     data access dataport30 -> gcsTransmitTask_uart1_inst.paramReader_676;
conn137:     data access dataport29 -> gcsTransmitTask_uart1_inst.paramReader_674;
conn138:     data access dataport28 -> gcsTransmitTask_uart1_inst.paramReader_672;
conn139:     data access dataport27 -> gcsTransmitTask_uart1_inst.paramReader_670;
conn140:     data access dataport26 -> gcsTransmitTask_uart1_inst.paramReader_668;
conn141:     data access dataport25 -> gcsTransmitTask_uart1_inst.paramReader_666;
conn142:     data access dataport24 -> gcsTransmitTask_uart1_inst.paramReader_664;
conn143:     data access dataport23 -> gcsTransmitTask_uart1_inst.paramReader_662;
conn144:     data access dataport22 -> gcsTransmitTask_uart1_inst.paramReader_660;
conn145:     data access dataport21 -> gcsTransmitTask_uart1_inst.paramReader_658;
conn146:     data access dataport20 -> gcsTransmitTask_uart1_inst.paramReader_656;
conn147:     data access dataport19 -> gcsTransmitTask_uart1_inst.paramReader_654;
conn148:     data access dataport18 -> gcsTransmitTask_uart1_inst.paramReader_652;
conn149:     data access dataport17 -> gcsTransmitTask_uart1_inst.paramReader_650;
conn150:     data access dataport16 -> gcsTransmitTask_uart1_inst.paramReader_648;
conn151:     data access dataport15 -> gcsTransmitTask_uart1_inst.paramReader_646;
conn152:     data access dataport14 -> gcsTransmitTask_uart1_inst.paramReader_644;
conn153:     data access dataport13 -> gcsTransmitTask_uart1_inst.paramReader_642;
conn154:     data access dataport12 -> gcsTransmitTask_uart1_inst.paramReader_640;
conn155:     data access dataport11 -> gcsTransmitTask_uart1_inst.paramReader_638;
conn156:     data access dataport10 -> gcsTransmitTask_uart1_inst.paramReader_636;
conn157:     data access dataport9 -> gcsTransmitTask_uart1_inst.paramReader_634;
conn158:     data access dataport8 -> gcsTransmitTask_uart1_inst.paramReader_632;
conn159:     data access dataport7 -> gcsTransmitTask_uart1_inst.paramReader_630;
conn160:     data access dataport6 -> gcsTransmitTask_uart1_inst.paramReader_628;
conn161:     data access dataport5 -> gcsTransmitTask_uart1_inst.paramReader_626;
conn162:     data access dataport4 -> gcsTransmitTask_uart1_inst.paramReader_624;
conn163:     data access dataport101 -> gcsTransmitTask_uart1_inst.userinput_result;
conn164:     data access dataport36 -> gcsTransmitTask_uart1_inst.alt_control;
conn165:     data access dataport37 -> gcsTransmitTask_uart1_inst.armed;
conn166:     data access dataport428 -> gcsTransmitTask_uart1_inst.radio;
conn167:     data access dataport260 -> gcsTransmitTask_uart1_inst.motors;
conn168:     data access dataport251 -> gcsTransmitTask_uart1_inst.control;
conn169:     data access dataport295 -> gcsTransmitTask_uart1_inst.position;
conn170:     data access dataport0 -> gcsTransmitTask_uart1_inst.sensors;
conn171:     data access dataport87 -> gcsTransmitTask_uart1_inst.flightmode;
conn172:     data access dataport33 -> gcsReceiveTask_uart1_inst.paramWriter;
conn173:     data access dataport32 -> gcsReceiveTask_uart1_inst.paramWriter_508;
conn174:     data access dataport31 -> gcsReceiveTask_uart1_inst.paramWriter_506;
conn175:     data access dataport30 -> gcsReceiveTask_uart1_inst.paramWriter_504;
conn176:     data access dataport29 -> gcsReceiveTask_uart1_inst.paramWriter_502;
conn177:     data access dataport28 -> gcsReceiveTask_uart1_inst.paramWriter_500;
conn178:     data access dataport27 -> gcsReceiveTask_uart1_inst.paramWriter_498;
conn179:     data access dataport26 -> gcsReceiveTask_uart1_inst.paramWriter_496;
conn180:     data access dataport25 -> gcsReceiveTask_uart1_inst.paramWriter_494;
conn181:     data access dataport24 -> gcsReceiveTask_uart1_inst.paramWriter_492;
conn182:     data access dataport23 -> gcsReceiveTask_uart1_inst.paramWriter_490;
conn183:     data access dataport22 -> gcsReceiveTask_uart1_inst.paramWriter_488;
conn184:     data access dataport21 -> gcsReceiveTask_uart1_inst.paramWriter_486;
conn185:     data access dataport20 -> gcsReceiveTask_uart1_inst.paramWriter_484;
conn186:     data access dataport19 -> gcsReceiveTask_uart1_inst.paramWriter_482;
conn187:     data access dataport18 -> gcsReceiveTask_uart1_inst.paramWriter_480;
conn188:     data access dataport17 -> gcsReceiveTask_uart1_inst.paramWriter_478;
conn189:     data access dataport16 -> gcsReceiveTask_uart1_inst.paramWriter_476;
conn190:     data access dataport15 -> gcsReceiveTask_uart1_inst.paramWriter_474;
conn191:     data access dataport14 -> gcsReceiveTask_uart1_inst.paramWriter_472;
conn192:     data access dataport13 -> gcsReceiveTask_uart1_inst.paramWriter_470;
conn193:     data access dataport12 -> gcsReceiveTask_uart1_inst.paramWriter_468;
conn194:     data access dataport11 -> gcsReceiveTask_uart1_inst.paramWriter_466;
conn195:     data access dataport10 -> gcsReceiveTask_uart1_inst.paramWriter_464;
conn196:     data access dataport9 -> gcsReceiveTask_uart1_inst.paramWriter_462;
conn197:     data access dataport8 -> gcsReceiveTask_uart1_inst.paramWriter_460;
conn198:     data access dataport7 -> gcsReceiveTask_uart1_inst.paramWriter_458;
conn199:     data access dataport6 -> gcsReceiveTask_uart1_inst.paramWriter_456;
conn200:     data access dataport5 -> gcsReceiveTask_uart1_inst.paramWriter_454;
conn201:     data access dataport4 -> gcsReceiveTask_uart1_inst.paramWriter_452;
conn202:     data access dataport2 -> gcsReceiveTask_uart1_inst.flightMode;
conn203:     data access dataport33 -> gcsReceiveTask_uart1_inst.paramReader;
conn204:     data access dataport32 -> gcsReceiveTask_uart1_inst.paramReader_568;
conn205:     data access dataport31 -> gcsReceiveTask_uart1_inst.paramReader_566;
conn206:     data access dataport30 -> gcsReceiveTask_uart1_inst.paramReader_564;
conn207:     data access dataport29 -> gcsReceiveTask_uart1_inst.paramReader_562;
conn208:     data access dataport28 -> gcsReceiveTask_uart1_inst.paramReader_560;
conn209:     data access dataport27 -> gcsReceiveTask_uart1_inst.paramReader_558;
conn210:     data access dataport26 -> gcsReceiveTask_uart1_inst.paramReader_556;
conn211:     data access dataport25 -> gcsReceiveTask_uart1_inst.paramReader_554;
conn212:     data access dataport24 -> gcsReceiveTask_uart1_inst.paramReader_552;
conn213:     data access dataport23 -> gcsReceiveTask_uart1_inst.paramReader_550;
conn214:     data access dataport22 -> gcsReceiveTask_uart1_inst.paramReader_548;
conn215:     data access dataport21 -> gcsReceiveTask_uart1_inst.paramReader_546;
conn216:     data access dataport20 -> gcsReceiveTask_uart1_inst.paramReader_544;
conn217:     data access dataport19 -> gcsReceiveTask_uart1_inst.paramReader_542;
conn218:     data access dataport18 -> gcsReceiveTask_uart1_inst.paramReader_540;
conn219:     data access dataport17 -> gcsReceiveTask_uart1_inst.paramReader_538;
conn220:     data access dataport16 -> gcsReceiveTask_uart1_inst.paramReader_536;
conn221:     data access dataport15 -> gcsReceiveTask_uart1_inst.paramReader_534;
conn222:     data access dataport14 -> gcsReceiveTask_uart1_inst.paramReader_532;
conn223:     data access dataport13 -> gcsReceiveTask_uart1_inst.paramReader_530;
conn224:     data access dataport12 -> gcsReceiveTask_uart1_inst.paramReader_528;
conn225:     data access dataport11 -> gcsReceiveTask_uart1_inst.paramReader_526;
conn226:     data access dataport10 -> gcsReceiveTask_uart1_inst.paramReader_524;
conn227:     data access dataport9 -> gcsReceiveTask_uart1_inst.paramReader_522;
conn228:     data access dataport8 -> gcsReceiveTask_uart1_inst.paramReader_520;
conn229:     data access dataport7 -> gcsReceiveTask_uart1_inst.paramReader_518;
conn230:     data access dataport6 -> gcsReceiveTask_uart1_inst.paramReader_516;
conn231:     data access dataport5 -> gcsReceiveTask_uart1_inst.paramReader_514;
conn232:     data access dataport4 -> gcsReceiveTask_uart1_inst.paramReader_512;
conn233:     data access dataport428 -> stateProxy_429_inst.proxyData;
conn234:     data access dataport0 -> sensorsCaptureTask_inst.sensors;
conn235:     data access dataport295 -> stateProxy_296_inst.proxyData;
conn236:     data access dataport260 -> stateProxy_261_inst.proxyData;
conn237:     data access dataport251 -> stateProxy_252_inst.proxyData;
conn238:     data access dataport87 -> motmix_inst.flightMode;
conn239:     data access dataport37 -> motmix_inst.armReader;
conn240:     data access dataport36 -> control_inst.alt_control_dbg;
conn241:     data access dataport33 -> control_inst.paramReader;
conn242:     data access dataport32 -> control_inst.paramReader_205;
conn243:     data access dataport31 -> control_inst.paramReader_203;
conn244:     data access dataport30 -> control_inst.paramReader_201;
conn245:     data access dataport29 -> control_inst.paramReader_199;
conn246:     data access dataport28 -> control_inst.paramReader_197;
conn247:     data access dataport27 -> control_inst.paramReader_195;
conn248:     data access dataport26 -> control_inst.paramReader_193;
conn249:     data access dataport25 -> control_inst.paramReader_191;
conn250:     data access dataport24 -> control_inst.paramReader_189;
conn251:     data access dataport23 -> control_inst.paramReader_187;
conn252:     data access dataport22 -> control_inst.paramReader_185;
conn253:     data access dataport21 -> control_inst.paramReader_183;
conn254:     data access dataport20 -> control_inst.paramReader_181;
conn255:     data access dataport19 -> control_inst.paramReader_179;
conn256:     data access dataport18 -> control_inst.paramReader_177;
conn257:     data access dataport17 -> control_inst.paramReader_175;
conn258:     data access dataport16 -> control_inst.paramReader_173;
conn259:     data access dataport15 -> control_inst.paramReader_171;
conn260:     data access dataport14 -> control_inst.paramReader_169;
conn261:     data access dataport13 -> control_inst.paramReader_167;
conn262:     data access dataport12 -> control_inst.paramReader_165;
conn263:     data access dataport11 -> control_inst.paramReader_163;
conn264:     data access dataport10 -> control_inst.paramReader_161;
conn265:     data access dataport9 -> control_inst.paramReader_159;
conn266:     data access dataport8 -> control_inst.paramReader_157;
conn267:     data access dataport7 -> control_inst.paramReader_155;
conn268:     data access dataport6 -> control_inst.paramReader_153;
conn269:     data access dataport5 -> control_inst.paramReader_151;
conn270:     data access dataport4 -> control_inst.paramReader_149;
conn271:     data access dataport0 -> control_inst.sensors;
conn272:     data access dataport101 -> control_inst.userinput;
conn273:     data access dataport87 -> control_inst.flightmode;
conn274:     data access dataport37 -> control_inst.armedReader;
conn275:     data access dataport87 -> blink_inst.flightmode;
conn276:     data access dataport37 -> blink_inst.armed;
conn277:     data access dataport101 -> userInputMux_inst.src_res;
conn278:     data access dataport51 -> userInputMux_inst.snk_mav_failsafe;
conn279:     data access dataport87 -> userInputMux_inst.snk_flightmode;
conn280:     data access dataport52 -> userInputMux_inst.snk_mav_ppm;
conn281:     data access dataport38 -> userInputMux_inst.snk_rc_ppm;
conn282:     data access dataport37 -> userInputMux_inst.snk_armed;
conn283:     data access dataport87 -> flightModeMuxTask_inst.flightmode_src;
conn284:     data access dataport37 -> flightModeMuxTask_inst.mav_armed_snk;
conn285:     data access dataport39 -> flightModeMuxTask_inst.ppm_input_snk;
conn286:     data access dataport37 -> armingTask_inst.armed_res_src;
conn287:     data access dataport39 -> armingTask_inst.ppm_input_snk;
conn288:     data access dataport51 -> userMAVInput_inst.src_js_fs;
conn289:     data access dataport52 -> userMAVInput_inst.rc_over_res_tx;
conn290:     data access dataport37 -> userMAVInput_inst.armedReader;
conn291:     data access dataport39 -> userPPMInput_inst.ppmChansWriter;
conn292:     data access dataport38 -> userPPMInput_inst.userInput;

     --connections added by rockwell collins to link in hardware
conn294:     data access dataport260 -> motors_and_radios.motors;
conn295:     data access sensors -> dataport0;

     --mavlink transmission connections
conn298:     data access dataport33 -> gcs_transmit.param1;
conn299:     data access dataport32 -> gcs_transmit.param2;
conn300:     data access dataport31 -> gcs_transmit.param3;
conn301:     data access dataport30 -> gcs_transmit.param4;
conn302:     data access dataport29 -> gcs_transmit.param5;
conn303:     data access dataport28 -> gcs_transmit.param6;
conn304:     data access dataport27 -> gcs_transmit.param7;
conn305:     data access dataport26 -> gcs_transmit.param8;
conn306:     data access dataport25 -> gcs_transmit.param9;
conn307:     data access dataport24 -> gcs_transmit.param10;
conn308:     data access dataport23 -> gcs_transmit.param11;
conn309:     data access dataport22 -> gcs_transmit.param12;
conn310:     data access dataport21 -> gcs_transmit.param13;
conn311:     data access dataport20 -> gcs_transmit.param14;
conn312:     data access dataport19 -> gcs_transmit.param15;
conn313:     data access dataport18 -> gcs_transmit.param16;
conn314:     data access dataport17 -> gcs_transmit.param17;
conn315:     data access dataport16 -> gcs_transmit.param18;
conn316:     data access dataport15 -> gcs_transmit.param19;
conn317:     data access dataport14 -> gcs_transmit.param20;

     --mavlink receive connections
conn320:     data access dataport33 -> gcs_receive.param1;
conn321:     data access dataport32 -> gcs_receive.param2;
conn322:     data access dataport31 -> gcs_receive.param3;
conn323:     data access dataport30 -> gcs_receive.param4;
conn324:     data access dataport29 -> gcs_receive.param5;
conn325:     data access dataport28 -> gcs_receive.param6;
conn326:     data access dataport27 -> gcs_receive.param7;
conn327:     data access dataport26 -> gcs_receive.param8;
conn328:     data access dataport25 -> gcs_receive.param9;
conn329:     data access dataport24 -> gcs_receive.param10;
conn330:     data access dataport23 -> gcs_receive.param11;
conn331:     data access dataport22 -> gcs_receive.param12;
conn332:     data access dataport21 -> gcs_receive.param13;
conn333:     data access dataport20 -> gcs_receive.param14;
conn334:     data access dataport19 -> gcs_receive.param15;
conn335:     data access dataport18 -> gcs_receive.param16;
conn336:     data access dataport17 -> gcs_receive.param17;
conn337:     data access dataport16 -> gcs_receive.param18;
conn338:     data access dataport15 -> gcs_receive.param19;
conn339:     data access dataport14 -> gcs_receive.param20; 

  properties 
    SMACCM::OS => "Breakaway-RTOS";
    
    
  annex resolute {**
    prove only_receive_gs(this.control_inst) 
  **};

end flight_gen_process.impl;



end flight_gen;