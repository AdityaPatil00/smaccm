/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: C:\Users\jdbackes\runtime-FMWorkbench\hello_vm\wrapper_i_assembly.camkes
   Created on: 2015/06/09 14:14:34
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the main CAmkES assembly for the  
  AADL system instance rooted at wrapper_i_Instance.

 **************************************************************************/
import <std_connector.camkes>;
import <TimeServerOdroid/TimeServer.camkes>;


import "components/vm_camera/vm_camera.camkes";
import "components/receiver/receiver.camkes";

import "components/VM/VM.camkes";
import <Vchan/Vchan.camkes>;
import "components/helloworld/helloworld.camkes";

connector seL4RPCCallDataport {
    from Procedure client template "seL4RPCCallDataport-from.template.c";
    to Procedure server template "seL4RPCCallDataport-to.template.c";
}


assembly {
	composition {


		// IRQ-handling hardware components

		// component instances for all AADL-defined threads
		component vm_camera vm_camera_inst;
		component receiver receiver_inst;
        component VM vm;
        component Vchan vchan_0;
        component helloworld hello;
        
        connection seL4RPCCall vchan(from vm.vchan_con, to vchan_0.vchan_com);
        connection seL4Asynch vchan_event_init(from vchan_0.vevent_cl, to vm.vevent);
        connection seL4SharedData vchan_sharemem_0(from vm.share_mem, to vchan_0.share_mem);

        connection seL4Asynch vchan_event(from vchan_0.vevent_sv, to hello.vevent);
        connection seL4SharedData hvchan_sharemem_0(from hello.share_mem, to vchan_0.share_mem);
        connection seL4RPCCall hvchan(from hello.vchan_con, to vchan_0.vchan_com);
        
		// connections from active dispatchers to passive threads
	

		// connections from active dispatcher send/receive to other active dispatcher send/receive
		connection seL4RPCCall conn1 (from vm_camera_inst.vm_camera_bbox_out, to receiver_inst.bbox_in); 
			



		// IRQ connections (if any)

		// component read/write connections

		// Direct RPC connections

		// Shared memory connections
	}
    configuration {
		receiver_inst.priority = 11;	


		receiver_inst._control_stack_size = 4096;	

		/* MMIO regions are
            0x10000000 CHIP_ID
            0x10486000 VCPU
            0x12c20000 UART2
            0x13400000 GPIO_RIGHT
            0x10040000 POWER0
            0x10041000 POWER1
            0x10042000 POWER2
            0x10043000 POWER3
            0x10044000 POWER4
            0x10050000 SYSREG
            0x10020000 CMU_TOP
            0x10014000 CMU_CORE
            0x10010000 CMU_CPU
            0x10030000 CMU_COREX
            0x10038000 CMU_MEM
            0x1001c000 CMU_ISP
            0x10018000 CMU_ACP
            0x12110000 USB EHCI
            0x12130000 USB CTRL
            0x12200000 MSH0
            0x12220000 MSH2
            0x40000000 RAM
        */
        vm.mmios = "0x10000000:0x1000:12,
                    0x10486000:0x1000:12,
                    0x12c20000:0x1000:12,
                    0x13400000:0x1000:12,
                    0x10040000:0x1000:12,
                    0x10041000:0x1000:12,
                    0x10042000:0x1000:12,
                    0x10043000:0x1000:12,
                    0x10044000:0x1000:12,
                    0x10050000:0x1000:12,
                    0x10020000:0x1000:12,
                    0x10014000:0x1000:12,
                    0x10010000:0x1000:12,
                    0x10030000:0x1000:12,
                    0x10038000:0x1000:12,
                    0x1001c000:0x1000:12,
                    0x10018000:0x1000:12,
                    0x12110000:0x1000:12,
                    0x12130000:0x1000:12,
                    0x12200000:0x1000:12,
                    0x12220000:0x1000:12,
                    0x40000000:0x20000000:21";

        /* IRQs are
            27  VTCNT (arch timer)
            85  UART2
            107 SDMMC0
            109 SDMMC2
            103 USB
        */
        vm.irqs =  "27,
                    85,
                    107,
                    109,
                    103";

        vm.asid_pool = true;

        vm.simple = true;
        vm.cnode_size_bits = 18;
        vm.simple_untyped24_pool = 10;

	    vm._control_priority = 101;
	    vm.sem_value = 0;

    }
}
/**************************************************************************
  End of autogenerated file: wrapper_i_assembly.camkes
 **************************************************************************/

