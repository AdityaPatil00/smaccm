-- 
package Signals
public
with Base_Types,Data_Model;
  system Fall
    features
      I: in data port Base_Types::Boolean;
      O: out data port Base_Types::Boolean {
        Data_Model::Initial_Value => ("false");
        };
    annex behavior_specification {**
      
      variables
        prev_I: Base_Types::Boolean;
      states
        St_Step :  state ;
        St_Start :  initial state ;
        St_Stop :  complete final state ;
      transitions
        T2 [1] : St_Step -[  ]-> St_Step
          { O := prev_I and not I; prev_I := i }  ; 
        T1 [1] : St_Start -[  ]-> St_Step
          { O := false; prev_I := I }  ; 
**};
  end Fall;
  
  system Rise
    features
      I: in data port Base_Types::Boolean;
      O: out data port Base_Types::Boolean {
        Data_Model::Initial_Value => ("false");
        };
    annex behavior_specification {**
      
      variables
        prev_I: Base_Types::Boolean;
      states
        St_Step :  state ;
        St_Start :  initial state ;
        St_Stop :  complete final state ;
      transitions
        T2 [1] : St_Step -[  ]-> St_Step
          { O := not prev_I and I; prev_I := I }  ; 
        T1 [1] : St_Start -[  ]-> St_Step
          { O := false; prev_I := I }  ; 
  **};

  end Rise;

 system implementation Rise.Rise_Impl

  annex agree{**
  	    	
  	assert O <=> (false -> not pre (I) and I);
  
  **};
  end Rise.Rise_Impl;

end Signals;
