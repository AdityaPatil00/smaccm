package Mission_Software
public
  with SMACCM;
  with SMACCM_SYS;
  with Base_Types;
  with mavlink_veh_commsec_msg;
  with TowerArrays;
  with gcsstream_timing;
  with nav_law_type;
  with pos_control_dbg_type;
  with att_control_dbg_type;
  with alt_control_dbg_type;
  with radio_stat_type;
  with motors_type;
  with controloutput_type;
  with gps_type;
  with sensors_type;
  with control_law_type;
  with nav_command_type;
  with mavlink_rc_channels_override_msg;
  with control_law_request_type;
  with radio_info_type;
  with control_setpoint_type;
  with userinput_type;
  with DATATYPES;

 system Software
    features
     rcoverride_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl{Queue_Size => 16;};
	 control_law_request: out event data port control_law_request_type::control_law_request.impl{Queue_Size => 16;};
      
  end Software;
  
  system implementation Software.Impl 
    subcomponents
      ML: process flight_gen_process.Impl;

  end Software.Impl;

  process flight_gen_process
	features
     rcoverride_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl{Queue_Size => 16;};
	 control_law_request: out event data port control_law_request_type::control_law_request.impl{Queue_Size => 16;};
      
  end flight_gen_process;

process implementation flight_gen_process.impl
  subcomponents
    dataport686 : data radio_stat_type::radio_stat.impl;
    dataport632 : data gps_type::position.impl;
    dataport631 : data mavlink_veh_commsec_msg::veh_commsec_msg.impl;
    dataport571 : data motors_type::motors.impl;
    dataport562 : data controloutput_type::controloutput.impl;
    dataport395 : data att_control_dbg_type::att_control_dbg.impl;
    dataport394 : data alt_control_dbg_type::alt_control_dbg.impl;
    dataport384 : data nav_law_type::nav_law.impl;
    dataport375 : data control_setpoint_type::control_setpoint.impl;
    dataport366 : data control_law_type::control_law.impl;
    dataport357 : data userinput_type::userinput_result.impl;
    dataport198 : data pos_control_dbg_type::pos_control_dbg.impl;
    dataport97 : data Base_Types::Unsigned_32;
    control_data : data DATATYPES::control_data.impl;
    dataport0 : data sensors_type::sensors_result.impl;
    commsecRecoveryTask_inst : thread commsecRecoveryTask;
    gcsTransmitTask_uart1_inst : thread gcsTransmitTask_uart1;
    encryptTask_uart1_inst : thread encryptTask_uart1;
    gcsReceiveTask_uart1_inst : thread gcsReceiveTask_uart1;
    decryptTask_uart1_inst : thread decryptTask_uart1;
    radio_status_uart1_inst : thread radio_status_uart1;
    datalink_uart1_inst : thread datalink_uart1;
    proxy_nav_law_inst : thread proxy_nav_law;
    proxy_navsetpt_inst : thread proxy_navsetpt;
    navigation_inst : thread navigation;
    mavlinkInputTask_inst : thread mavlinkInputTask;
    ubloxGPS_inst : thread ubloxGPS;
    uart5ISR_inst : thread uart5ISR;
    uart1ISR_inst : thread uart1ISR;
    uart2ISR_inst : thread uart2ISR;
    uart6ISR_inst : thread uart6ISR;
  connections
    conn_12 : port gcsTransmitTask_uart1_inst.gcsTxToEncSrc -> encryptTask_uart1_inst.gcsTxToEnc;
    conn_13 : port encryptTask_uart1_inst.encToHxSrc -> datalink_uart1_inst.framed_istream;
    conn_14 : port gcsReceiveTask_uart1_inst.streamperiods -> gcsTransmitTask_uart1_inst.streamPeriod;
    conn_15 : port gcsReceiveTask_uart1_inst.nav_cmd -> navigation_inst.nav_cmd;
    conn_16 : port gcsReceiveTask_uart1_inst.rc_override_tx -> mavlinkInputTask_inst.rcoverride;
    conn_17 : port gcsReceiveTask_uart1_inst.param_req -> gcsTransmitTask_uart1_inst.paramReqs;
    conn_18 : port gcsReceiveTask_uart1_inst.ctl_req -> mavlinkInputTask_inst.mav_controllaw_req;
    conn_19 : port decryptTask_uart1_inst.decToGcsRxSrc -> gcsReceiveTask_uart1_inst.mavStream;
    conn_20 : port datalink_uart1_inst.link_ostream -> uart1ISR_inst.ostream;
    conn_21 : port datalink_uart1_inst.stat_ostream -> radio_status_uart1_inst.proxyEvent;
    conn_22 : port datalink_uart1_inst.framed_ostream -> decryptTask_uart1_inst.hxToDecRcv;

    conn_29 : port navigation_inst.nav_law -> proxy_nav_law_inst.proxyEvent;
    conn_30 : port navigation_inst.ctl_law_req -> controlLawTask_inst.nav_req_snk;
    conn_31 : port navigation_inst.control_setpt -> proxy_navsetpt_inst.proxyEvent;
    --conn_33 : port uiMuxTask_inst.ui_emitter -> navigation_inst.ui_chan_313;
    --conn_35 : port controlLawTask_inst.law_emitter -> navigation_inst.law_chan_322;
    conn_37 : port mavlinkInputTask_inst.cr_emitter -> controlLawTask_inst.mavlink_req_snk;
    conn_38 : port mavlinkInputTask_inst.ui_emitter -> uiMuxTask_inst.mavlink_ui;
    conn_42 : port ubloxGPS_inst.position -> position_state_inst.proxyEvent;
    conn_43 : port ubloxGPS_inst.position -> navigation_inst.pos_chan_331;
    conn_44 : port ubloxGPS_inst.position -> sensorsCaptureTask_inst.position;
    conn_46 : port uart1ISR_inst.istream -> datalink_uart1_inst.link_istream;
    conn_47 : port uart6ISR_inst.istream -> ubloxGPS_inst.istream;
    conn_48 : data access dataport97 -> commsecRecoveryTask_inst.comm_mon_res;
    conn_49 : data access dataport631 -> commsecRecoveryTask_inst.commsec_info_snk;
    
    conn_tran_ctrl_data : port control_data -> gcsTransmitTask_uart1_inst.param_reader;
    conn_232 : data access dataport384 -> gcsTransmitTask_uart1_inst.navlaw;
    conn_233 : data access dataport97 -> gcsTransmitTask_uart1_inst.commsecMonitor;
    conn_234 : data access dataport631 -> gcsTransmitTask_uart1_inst.commsecInfo;
    conn_235 : data access dataport198 -> gcsTransmitTask_uart1_inst.pos_control;
    conn_236 : data access dataport395 -> gcsTransmitTask_uart1_inst.att_control;
    conn_237 : data access dataport394 -> gcsTransmitTask_uart1_inst.alt_control;
    conn_238 : data access dataport686 -> gcsTransmitTask_uart1_inst.radio;
    conn_239 : data access dataport571 -> gcsTransmitTask_uart1_inst.motors;
    conn_240 : data access dataport562 -> gcsTransmitTask_uart1_inst.control;
    conn_241 : data access dataport632 -> gcsTransmitTask_uart1_inst.position;
    conn_242 : data access dataport0 -> gcsTransmitTask_uart1_inst.sensors;
    conn_243 : data access dataport366 -> gcsTransmitTask_uart1_inst.controllaw;
    conn_rec_write : port gcsReceiveTask_uart1_inst.param_writer -> control_data ;
    conn_328 : data access dataport631 -> decryptTask_uart1_inst.commsec_info_src;
    conn_329 : data access dataport686 -> radio_status_uart1_inst.proxyData;
    conn_383 : data access dataport384 -> proxy_nav_law_inst.proxyData;
    conn_384 : data access dataport375 -> proxy_navsetpt_inst.proxyData;
    conn_387 : data access dataport198 -> navigation_inst.pos_dbg;
    conn_nav_ctrl_params : port control_data -> navigation_inst.param_reader;
    conn_389 : data access dataport97 -> navigation_inst.commsec_status;
    conn_432 : data access dataport0 -> navigation_inst.sensors;
  properties 
    SMACCM::OS => "Sel4";

end flight_gen_process.impl;

thread commsecRecoveryTask
  features
    comm_mon_res: requires data access Base_Types::Unsigned_32 {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_commsecRecoveryTask_1433.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_commsecRecoveryTask_1433_dataport97_1437";
    };
    commsec_info_snk: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_commsecRecoveryTask_1433.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_commsecRecoveryTask_1433_dataport631_1435";
    };
  properties
    Source_Text => ("tower_task_usercode_commsecRecoveryTask_1433.c");
    Priority => 0;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 20 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_commsecRecoveryTask_1433_per20_1446");
end commsecRecoveryTask;


thread gcsTransmitTask_uart5
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart5_1302_chan1293_1328";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_1302_chan1044_1425";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_1302_chan1044_1428");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 64;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart5_1302_chan1045_1333";
    };
    param_reader_FS_ALT_OFFS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport45_1417";
    };
    param_reader_POS_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport44_1415";
    };
    param_reader_POS_THRUST_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport43_1413";
    };
    param_reader_POS_THRUST_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport42_1411";
    };
    param_reader_POS_THRUST_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport41_1409";
    };
    param_reader_POS_THRUST_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport40_1407";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport39_1405";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport38_1403";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport37_1401";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport36_1399";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport35_1397";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport34_1395";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport33_1393";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport32_1391";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport31_1389";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport30_1387";
    };
    param_reader_YAW_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport29_1385";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport28_1383";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport27_1381";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport26_1379";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport25_1377";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport24_1375";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport23_1373";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport22_1371";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport21_1369";
    };
    param_reader_PITRLL_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport20_1367";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport19_1365";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport18_1363";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport17_1361";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport16_1359";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport15_1357";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport14_1355";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport13_1353";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport12_1351";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport11_1349";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport10_1347";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport9_1345";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport8_1343";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport7_1341";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport6_1339";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport5_1337";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport4_1335";
    };
    navlaw: requires data access nav_law_type::nav_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport384_1326";
    };
    commsecMonitor: requires data access Base_Types::Unsigned_32 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport97_1324";
    };
    commsecInfo: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport631_1322";
    };
    pos_control: requires data access pos_control_dbg_type::pos_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport198_1320";
    };
    att_control: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport395_1318";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport394_1316";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport1082_1314";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport571_1312";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport562_1310";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport632_1308";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport0_1306";
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart5_1302.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart5_1302_dataport366_1304";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart5_1302.c");
    Priority => 1;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart5_1302_per50_1432");
end gcsTransmitTask_uart5;


thread encryptTask_uart5
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_1294.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart5_1294_chan1046_1296";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart5_1294.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart5_1294_chan1293_1298";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart5_1294_chan1293_1301");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart5_1294.c");
    Priority => 2;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end encryptTask_uart5;


thread gcsReceiveTask_uart5
  features
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_1105_chan1044_1285";
    };
    nav_cmd: out event data port nav_command_type::nav_command.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_1105_chan3_1113";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_1105_chan2_1111";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 64;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_1105_chan1045_1109";
    };
    ctl_req: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart5_1105_chan1_1107";
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart5_1105_chan1091_1289";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart5_1105_chan1091_1292");
    };
    param_writer_FS_ALT_OFFS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport45_1197";
    };
    param_writer_POS_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport44_1195";
    };
    param_writer_POS_THRUST_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport43_1193";
    };
    param_writer_POS_THRUST_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport42_1191";
    };
    param_writer_POS_THRUST_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport41_1189";
    };
    param_writer_POS_THRUST_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport40_1187";
    };
    param_writer_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport39_1185";
    };
    param_writer_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport38_1183";
    };
    param_writer_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport37_1181";
    };
    param_writer_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport36_1179";
    };
    param_writer_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport35_1177";
    };
    param_writer_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport34_1175";
    };
    param_writer_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport33_1173";
    };
    param_writer_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport32_1171";
    };
    param_writer_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport31_1169";
    };
    param_writer_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport30_1167";
    };
    param_writer_YAW_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport29_1165";
    };
    param_writer_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport28_1163";
    };
    param_writer_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport27_1161";
    };
    param_writer_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport26_1159";
    };
    param_writer_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport25_1157";
    };
    param_writer_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport24_1155";
    };
    param_writer_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport23_1153";
    };
    param_writer_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport22_1151";
    };
    param_writer_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport21_1149";
    };
    param_writer_PITRLL_UI_SENS: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport20_1147";
    };
    param_writer_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport19_1145";
    };
    param_writer_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport18_1143";
    };
    param_writer_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport17_1141";
    };
    param_writer_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport16_1139";
    };
    param_writer_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport15_1137";
    };
    param_writer_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport14_1135";
    };
    param_writer_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport13_1133";
    };
    param_writer_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport12_1131";
    };
    param_writer_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport11_1129";
    };
    param_writer_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport10_1127";
    };
    param_writer_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport9_1125";
    };
    param_writer_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport8_1123";
    };
    param_writer_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport7_1121";
    };
    param_writer_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport6_1119";
    };
    param_writer_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport5_1117";
    };
    param_writer_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_gcsReceiveTask_uart5_1105_dataport4_1115";
    };
    param_reader_FS_ALT_OFFS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport45_1281";
    };
    param_reader_POS_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport44_1279";
    };
    param_reader_POS_THRUST_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport43_1277";
    };
    param_reader_POS_THRUST_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport42_1275";
    };
    param_reader_POS_THRUST_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport41_1273";
    };
    param_reader_POS_THRUST_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport40_1271";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport39_1269";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport38_1267";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport37_1265";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport36_1263";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport35_1261";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport34_1259";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport33_1257";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport32_1255";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport31_1253";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport30_1251";
    };
    param_reader_YAW_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport29_1249";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport28_1247";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport27_1245";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport26_1243";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport25_1241";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport24_1239";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport23_1237";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport22_1235";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport21_1233";
    };
    param_reader_PITRLL_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport20_1231";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport19_1229";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport18_1227";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport17_1225";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport16_1223";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport15_1221";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport14_1219";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport13_1217";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport12_1215";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport11_1213";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport10_1211";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport9_1209";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport8_1207";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport7_1205";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport6_1203";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport5_1201";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart5_1105.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsReceiveTask_uart5_1105_dataport4_1199";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart5_1105.c");
    Priority => 3;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end gcsReceiveTask_uart5;


thread decryptTask_uart5
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_1092.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart5_1092_chan1091_1094";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_1092.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart5_1092_chan1047_1101";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart5_1092_chan1047_1104");
    };
    commsec_info_src: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart5_1092.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_decryptTask_uart5_1092_dataport631_1096";
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart5_1092.c");
    Priority => 4;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end decryptTask_uart5;


thread radio_status_uart5
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart5_1083.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_radio_status_uart5_1083_chan1048_1087";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_radio_status_uart5_1083_chan1048_1090");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart5_1083.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_radio_status_uart5_1083_dataport1082_1085";
    };
  properties
    Source_Text => ("tower_task_usercode_radio_status_uart5_1083.c");
    Priority => 5;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end radio_status_uart5;


thread datalink_uart5
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_1050_chan1037_1072";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_1050_chan1049_1060";
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_1050_chan1048_1058";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart5_1050_chan1047_1056";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart5_1050_chan1046_1074";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_1050_chan1046_1077");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart5_1050.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart5_1050_chan1038_1052";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_1050_chan1038_1070");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_uart5_1050.c");
    Priority => 6;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart5_1050_per1000_1081");
end datalink_uart5;


thread gcsTransmitTask_uart1
  features
    gcsTxToEncSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsTransmitTask_uart1_906_chan897_932";
    };
    streamPeriod: in event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_906_chan648_1029";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_906_chan648_1032");
    };
    paramReqs: in event data port Base_Types::Integer_16 {
      Queue_Size => 64;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsTransmitTask_uart1_906_chan649_937";
    };
    param_reader : in event data port DATATYPES::control_data.impl;
    navlaw: requires data access nav_law_type::nav_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport384_930";
    };
    commsecMonitor: requires data access Base_Types::Unsigned_32 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport97_928";
    };
    commsecInfo: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport631_926";
    };
    pos_control: requires data access pos_control_dbg_type::pos_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport198_924";
    };
    att_control: requires data access att_control_dbg_type::att_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport395_922";
    };
    alt_control: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport394_920";
    };
    radio: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport686_918";
    };
    motors: requires data access motors_type::motors.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport571_916";
    };
    control: requires data access controloutput_type::controloutput.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport562_914";
    };
    position: requires data access gps_type::position.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport632_912";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport0_910";
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsTransmitTask_uart1_906.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_gcsTransmitTask_uart1_906_dataport366_908";
    };
  properties
    Source_Text => ("tower_task_usercode_gcsTransmitTask_uart1_906.c");
    Priority => 7;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsTransmitTask_uart1_906_per50_1036");
end gcsTransmitTask_uart1;


thread encryptTask_uart1
  features
    encToHxSrc: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_898.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_encryptTask_uart1_898_chan650_900";
    };
    gcsTxToEnc: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_encryptTask_uart1_898.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_encryptTask_uart1_898_chan897_902";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_encryptTask_uart1_898_chan897_905");
    };
  properties
    Source_Text => ("tower_task_usercode_encryptTask_uart1_898.c");
    Priority => 8;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end encryptTask_uart1;


thread gcsReceiveTask_uart1
  features
    streamperiods: out event data port gcsstream_timing::gcsstream_timing.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_709_chan648_889";
    };
    nav_cmd: out event data port nav_command_type::nav_command.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_709_chan3_717";
    };
    rc_override_tx: out event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_709_chan2_715";
    };
    param_req: out event data port Base_Types::Integer_16 {
      Queue_Size => 64;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_709_chan649_713";
    };
    ctl_req: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_gcsReceiveTask_uart1_709_chan1_711";
    };
    mavStream: in event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_gcsReceiveTask_uart1_709.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_gcsReceiveTask_uart1_709_chan695_893";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_gcsReceiveTask_uart1_709_chan695_896");
    };
    
    param_writer : out event data port DATATYPES::control_data.impl;
    param_reader : in event data port DATATYPES::control_data.impl;
   
  properties
    Source_Text => ("tower_task_usercode_gcsReceiveTask_uart1_709.c");
    Priority => 9;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end gcsReceiveTask_uart1;


thread decryptTask_uart1
  features
    decToGcsRxSrc: out event data port TowerArrays::ArrTy_80TyBase_Types_Unsigned_8.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_696.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_decryptTask_uart1_696_chan695_698";
    };
    hxToDecRcv: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_696.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_decryptTask_uart1_696_chan651_705";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_decryptTask_uart1_696_chan651_708");
    };
    commsec_info_src: requires data access mavlink_veh_commsec_msg::veh_commsec_msg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_decryptTask_uart1_696.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_decryptTask_uart1_696_dataport631_700";
    };
  properties
    Source_Text => ("tower_task_usercode_decryptTask_uart1_696.c");
    Priority => 10;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end decryptTask_uart1;


thread radio_status_uart1
  features
    proxyEvent: in event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart1_687.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_radio_status_uart1_687_chan652_691";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_radio_status_uart1_687_chan652_694");
    };
    proxyData: requires data access radio_stat_type::radio_stat.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_radio_status_uart1_687.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_radio_status_uart1_687_dataport686_689";
    };
  properties
    Source_Text => ("tower_task_usercode_radio_status_uart1_687.c");
    Priority => 11;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end radio_status_uart1;


thread datalink_uart1
  features
    link_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_654_chan641_676";
    };
    info_ostream: out event data port radio_info_type::radio_info.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_654_chan653_664";
    };
    stat_ostream: out event data port radio_stat_type::radio_stat.impl {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_654_chan652_662";
    };
    framed_ostream: out event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_datalink_uart1_654_chan651_660";
    };
    framed_istream: in event data port TowerArrays::ArrTy_96TyBase_Types_Unsigned_8.impl {
      Queue_Size => 8;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart1_654_chan650_678";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_654_chan650_681");
    };
    link_istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_datalink_uart1_654.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_datalink_uart1_654_chan642_656";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_654_chan642_674");
    };
  properties
    Source_Text => ("tower_task_usercode_datalink_uart1_654.c");
    Priority => 12;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1000 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_datalink_uart1_654_per1000_685");
end datalink_uart1;


thread position_state
  features
    proxyEvent: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_position_state_633.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_position_state_633_chan53_637";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_position_state_633_chan53_640");
    };
    proxyData: requires data access gps_type::position.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_position_state_633.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_position_state_633_dataport632_635";
    };
  properties
    Source_Text => ("tower_task_usercode_position_state_633.c");
    Priority => 13;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end position_state;


thread px4ioar
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_587.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_587_chan601_603";
    };
    uart_ostream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_587.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_px4ioar_587_chan580_589";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_587.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_587_chan601_605";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_587_chan601_newstate_loop_630", "eventhandler_px4ioar_587_chan601_newstate_bootCheckComplete_626", "eventhandler_px4ioar_587_chan601_newstate_initMulti_623", "eventhandler_px4ioar_587_chan601_newstate_init4_622", "eventhandler_px4ioar_587_chan601_newstate_init3_619", "eventhandler_px4ioar_587_chan601_newstate_init2_616", "eventhandler_px4ioar_587_chan601_newstate_init1_613", "eventhandler_px4ioar_587_chan601_newstate_bootBegin_610");
    };
    motor_istream: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_px4ioar_587.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_px4ioar_587_chan98_591";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_587_chan98_loop_629");
    };
  properties
    Source_Text => ("tower_task_usercode_px4ioar_587.c");
    Priority => 14;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_px4ioar_587_per1_loop_628", "eventhandler_px4ioar_587_per1_bootCheckComplete_625", "eventhandler_px4ioar_587_per1_init4_621", "eventhandler_px4ioar_587_per1_init3_618", "eventhandler_px4ioar_587_per1_init2_615", "eventhandler_px4ioar_587_per1_init1_612", "eventhandler_px4ioar_587_per1_bootBegin_609");
end px4ioar;


thread motors_state
  features
    proxyEvent: in event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motors_state_572.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motors_state_572_chan98_576";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motors_state_572_chan98_579");
    };
    proxyData: requires data access motors_type::motors.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motors_state_572.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_motors_state_572_dataport571_574";
    };
  properties
    Source_Text => ("tower_task_usercode_motors_state_572.c");
    Priority => 15;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end motors_state;


thread control_state
  features
    proxyEvent: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_563.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_control_state_563_chan393_567";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_state_563_chan393_570");
    };
    proxyData: requires data access controloutput_type::controloutput.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_state_563.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_state_563_dataport562_565";
    };
  properties
    Source_Text => ("tower_task_usercode_control_state_563.c");
    Priority => 16;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end control_state;


thread motmix
  features
    motors: out event data port motors_type::motors.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_552.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_motmix_552_chan98_556";
    };
    control: in event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_552.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_motmix_552_chan393_558";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_motmix_552_chan393_561");
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_motmix_552.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_motmix_552_dataport366_554";
    };
  properties
    Source_Text => ("tower_task_usercode_motmix_552.c");
    Priority => 17;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end motmix;


thread blink
  features
    commstatus: requires data access Base_Types::Unsigned_32 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_542.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_542_dataport97_546";
    };
    controllaw: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_blink_542.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_blink_542_dataport366_544";
    };
  properties
    Source_Text => ("tower_task_usercode_blink_542.c");
    Priority => 18;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 125 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_blink_542_per125_551");
end blink;


thread control
  features
    control: out event data port controloutput_type::controloutput.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_control_396_chan393_406";
    };
    alt_control_dbg: requires data access alt_control_dbg_type::alt_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_control_396_dataport394_513";
    };
    param_reader_FS_ALT_OFFS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport45_490";
    };
    param_reader_POS_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport44_488";
    };
    param_reader_POS_THRUST_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport43_486";
    };
    param_reader_POS_THRUST_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport42_484";
    };
    param_reader_POS_THRUST_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport41_482";
    };
    param_reader_POS_THRUST_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport40_480";
    };
    param_reader_ALT_UI_DEAD: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport39_478";
    };
    param_reader_ALT_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport38_476";
    };
    param_reader_ALT_POS_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport37_474";
    };
    param_reader_ALT_POS_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport36_472";
    };
    param_reader_ALT_POS_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport35_470";
    };
    param_reader_ALT_POS_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport34_468";
    };
    param_reader_ALT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport33_466";
    };
    param_reader_ALT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport32_464";
    };
    param_reader_ALT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport31_462";
    };
    param_reader_ALT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport30_460";
    };
    param_reader_YAW_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport29_458";
    };
    param_reader_YAW_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport28_456";
    };
    param_reader_YAW_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport27_454";
    };
    param_reader_YAW_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport26_452";
    };
    param_reader_YAW_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport25_450";
    };
    param_reader_YAW_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport24_448";
    };
    param_reader_YAW_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport23_446";
    };
    param_reader_YAW_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport22_444";
    };
    param_reader_YAW_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport21_442";
    };
    param_reader_PITRLL_UI_SENS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport20_440";
    };
    param_reader_PIT_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport19_438";
    };
    param_reader_PIT_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport18_436";
    };
    param_reader_PIT_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport17_434";
    };
    param_reader_PIT_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport16_432";
    };
    param_reader_PIT_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport15_430";
    };
    param_reader_PIT_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport14_428";
    };
    param_reader_PIT_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport13_426";
    };
    param_reader_PIT_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport12_424";
    };
    param_reader_RLL_RATE_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport11_422";
    };
    param_reader_RLL_RATE_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport10_420";
    };
    param_reader_RLL_RATE_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport9_418";
    };
    param_reader_RLL_RATE_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport8_416";
    };
    param_reader_RLL_STAB_IMAX: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport7_414";
    };
    param_reader_RLL_STAB_D: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport6_412";
    };
    param_reader_RLL_STAB_I: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport5_410";
    };
    param_reader_RLL_STAB_P: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport4_408";
    };
    nav_setpt: requires data access control_setpoint_type::control_setpoint.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport375_404";
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport0_402";
    };
    userinput: requires data access userinput_type::userinput_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport357_400";
    };
    control_law: requires data access control_law_type::control_law.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_control_396.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_control_396_dataport366_398";
    };
  properties
    Source_Text => ("tower_task_usercode_control_396.c");
    Priority => 19;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_control_396_per5_541");
end control;


thread proxy_nav_law
  features
    proxyEvent: in event data port nav_law_type::nav_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_nav_law_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_proxy_nav_law_385_chan197_389";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_proxy_nav_law_385_chan197_392");
    };
    proxyData: requires data access nav_law_type::nav_law.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_nav_law_385.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_proxy_nav_law_385_dataport384_387";
    };
  properties
    Source_Text => ("tower_task_usercode_proxy_nav_law_385.c");
    Priority => 20;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end proxy_nav_law;


thread proxy_navsetpt
  features
    proxyEvent: in event data port control_setpoint_type::control_setpoint.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_navsetpt_376.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_proxy_navsetpt_376_chan196_380";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_proxy_navsetpt_376_chan196_383");
    };
    proxyData: requires data access control_setpoint_type::control_setpoint.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_navsetpt_376.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_proxy_navsetpt_376_dataport375_378";
    };
  properties
    Source_Text => ("tower_task_usercode_proxy_navsetpt_376.c");
    Priority => 21;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end proxy_navsetpt;


thread proxy_controllaw
  features
    proxyEvent: in event data port control_law_type::control_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_controllaw_367.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_proxy_controllaw_367_chan145_371";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_proxy_controllaw_367_chan145_374");
    };
    proxyData: requires data access control_law_type::control_law.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_controllaw_367.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_proxy_controllaw_367_dataport366_369";
    };
  properties
    Source_Text => ("tower_task_usercode_proxy_controllaw_367.c");
    Priority => 22;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end proxy_controllaw;


thread proxy_userinput
  features
    proxyEvent: in event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_userinput_358.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_proxy_userinput_358_chan169_362";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_proxy_userinput_358_chan169_365");
    };
    proxyData: requires data access userinput_type::userinput_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_proxy_userinput_358.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_proxy_userinput_358_dataport357_360";
    };
  properties
    Source_Text => ("tower_task_usercode_proxy_userinput_358.c");
    Priority => 23;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end proxy_userinput;


thread navigation
  features
    nav_law: out event data port nav_law_type::nav_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_navigation_199_chan197_209";
    };
    ctl_law_req: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_navigation_199_chan99_203";
    };
    control_setpt: out event data port control_setpoint_type::control_setpoint.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_navigation_199_chan196_201";
    };
    nav_cmd: in event data port nav_command_type::nav_command.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_navigation_199_chan3_353";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_navigation_199_chan3_356");
    };
    pos_chan_331: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_navigation_199_chan53_336";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_navigation_199_chan53_339");
    };
    law_chan_322: in event data port control_law_type::control_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_navigation_199_chan145_327";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_navigation_199_chan145_330");
    };
    ui_chan_313: in event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_navigation_199_chan169_318";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_navigation_199_chan169_321");
    };
    pos_dbg: requires data access pos_control_dbg_type::pos_control_dbg.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_navigation_199_dataport198_207";
    };
    param_reader_FS_ALT_OFFS: requires data access Base_Types::Float {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_navigation_199_dataport45_347";
    };
    commsec_status: requires data access Base_Types::Unsigned_32 {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_navigation_199_dataport97_345";
    };
    param_reader : in event data port DATATYPES::control_data.impl;
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => read_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_navigation_199.h";
      SMACCM_SYS::CommPrim_Source_Text => "read_navigation_199_dataport0_205";
    };
  properties
    Source_Text => ("tower_task_usercode_navigation_199.c");
    Priority => 24;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_navigation_199_per5_351");
end navigation;


thread uiMuxTask
  features
    ui_emitter: out event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_uiMuxTask_170.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_uiMuxTask_170_chan169_179";
    };
    mavlink_ui: in event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_uiMuxTask_170.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_uiMuxTask_170_chan122_191";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_uiMuxTask_170_chan122_194");
    };
    ppm_ui: in event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_uiMuxTask_170.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_uiMuxTask_170_chan100_186";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_uiMuxTask_170_chan100_189");
    };
    law: in event data port control_law_type::control_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_uiMuxTask_170.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_uiMuxTask_170_chan145_181";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_uiMuxTask_170_chan145_184");
    };
  properties
    Source_Text => ("tower_task_usercode_uiMuxTask_170.c");
    Priority => 25;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end uiMuxTask;


thread controlLawTask
  features
    law_emitter: out event data port control_law_type::control_law.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_controlLawTask_146.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_controlLawTask_146_chan145_148";
    };
    nav_req_snk: in event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_controlLawTask_146.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_controlLawTask_146_chan99_165";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_controlLawTask_146_chan99_168");
    };
    mavlink_req_snk: in event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_controlLawTask_146.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_controlLawTask_146_chan123_160";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_controlLawTask_146_chan123_163");
    };
    ppm_req_snk: in event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_controlLawTask_146.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_controlLawTask_146_chan101_155";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_controlLawTask_146_chan101_158");
    };
  properties
    Source_Text => ("tower_task_usercode_controlLawTask_146.c");
    Priority => 26;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end controlLawTask;


thread mavlinkInputTask
  features
    cr_emitter: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_mavlinkInputTask_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_mavlinkInputTask_124_chan123_128";
    };
    ui_emitter: out event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_mavlinkInputTask_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_mavlinkInputTask_124_chan122_126";
    };
    mav_controllaw_req: in event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_mavlinkInputTask_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_mavlinkInputTask_124_chan1_137";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_mavlinkInputTask_124_chan1_140");
    };
    rcoverride: in event data port mavlink_rc_channels_override_msg::rc_channels_override_msg.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_mavlinkInputTask_124.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_mavlinkInputTask_124_chan2_132";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_mavlinkInputTask_124_chan2_135");
    };
  properties
    Source_Text => ("tower_task_usercode_mavlinkInputTask_124.c");
    Priority => 27;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 5 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_mavlinkInputTask_124_per5_144");
end mavlinkInputTask;


thread ppmInputTower
  features
    cr_emitter: out event data port control_law_request_type::control_law_request.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ppmInputTower_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ppmInputTower_102_chan101_106";
    };
    ui_emitter: out event data port userinput_type::userinput_result.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ppmInputTower_102.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ppmInputTower_102_chan100_104";
    };
  properties
    Source_Text => ("tower_task_usercode_ppmInputTower_102.c");
    Priority => 28;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 50 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_ppmInputTower_102_per50_121");
end ppmInputTower;


thread sensorsCaptureTask
  features
    newstateEmitter: out event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_72.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_sensorsCaptureTask_72_chan86_88";
    };
    newstateEvent: in event data port Base_Types::Unsigned_32 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_72.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_72_chan86_90";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_72_chan86_newstate_captureloop_96", "eventhandler_sensorsCaptureTask_72_chan86_newstate_init_93");
    };
    position: in event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_72.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_sensorsCaptureTask_72_chan53_78";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_72_chan53_81");
    };
    sensors: requires data access sensors_type::sensors_result.impl {
      Access_Right => write_only;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_sensorsCaptureTask_72.h";
      SMACCM_SYS::CommPrim_Source_Text => "write_sensorsCaptureTask_72_dataport0_74";
    };
  properties
    Source_Text => ("tower_task_usercode_sensorsCaptureTask_72.c");
    Priority => 29;
    Stack_Size => 1024 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Hybrid;
    Period => 1 ms;
    SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_sensorsCaptureTask_72_per1_captureloop_95");
end sensorsCaptureTask;


thread ubloxGPS
  features
    position: out event data port gps_type::position.impl {
      Queue_Size => 16;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_54.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromTask_ubloxGPS_54_chan53_60";
    };
    istream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_task_loop_ubloxGPS_54.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromTask_ubloxGPS_54_chan47_56";
      SMACCM_SYS::Compute_Entrypoint_Source_Text => ("eventhandler_ubloxGPS_54_chan47_71");
    };
  properties
    Source_Text => ("tower_task_usercode_ubloxGPS_54.c");
    Priority => 30;
    Stack_Size => 256 bytes;
    SMACCM::Language => "Ivory";
    Dispatch_Protocol => Sporadic;
end ubloxGPS;


thread uart5ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart5ISR_1039.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart5ISR_1039_chan1038_1043";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart5ISR_1039.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart5ISR_1039_chan1037_1041";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart5ISR_1039.c");
    Priority => 31;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "UART5_IRQn";
    SMACCM_SYS::ISR_Handler => "UART5_IRQHandler";
end uart5ISR;


thread uart1ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart1ISR_643.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart1ISR_643_chan642_647";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 1024;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart1ISR_643.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart1ISR_643_chan641_645";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart1ISR_643.c");
    Priority => 32;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART1_IRQn";
    SMACCM_SYS::ISR_Handler => "USART1_IRQHandler";
end uart1ISR;


thread uart2ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 1;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart2ISR_582.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart2ISR_582_chan581_586";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 12;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart2ISR_582.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart2ISR_582_chan580_584";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart2ISR_582.c");
    Priority => 33;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART2_IRQn";
    SMACCM_SYS::ISR_Handler => "USART2_IRQHandler";
end uart2ISR;


thread uart6ISR
  features
    istream: out event data port Base_Types::Unsigned_8 {
      Queue_Size => 256;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart6ISR_48.h";
      SMACCM_SYS::CommPrim_Source_Text => "emitFromSig_uart6ISR_48_chan47_52";
    };
    ostream: in event data port Base_Types::Unsigned_8 {
      Queue_Size => 2;
      SMACCM_SYS::CommPrim_Source_Header => "tower_signal_comm_uart6ISR_48.h";
      SMACCM_SYS::CommPrim_Source_Text => "receiveFromSig_uart6ISR_48_chan46_50";
    };
  properties
    Dispatch_Protocol => Sporadic;
    Source_Text => ("tower_signal_usercode_uart6ISR_48.c");
    Priority => 34;
    SMACCM::Language => "Ivory";
    SMACCM_SYS::Signal_Name => "USART6_IRQn";
    SMACCM_SYS::ISR_Handler => "USART6_IRQHandler";
end uart6ISR;

end Mission_Software;