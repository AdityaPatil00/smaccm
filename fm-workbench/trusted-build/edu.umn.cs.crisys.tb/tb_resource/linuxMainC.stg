import "Common.stg"
import "CommonOSSpecificNames.stg"
import "CommonCPrototypes.stg"
import "LinuxAssemblyHeader.stg"

/*********************************************************************
 *
 *********************************************************************/

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component gluecode C files for CAmkES/eChronos
//
//
////////////////////////////////////////////////////////////////////////////

mainGlueCodeCFilePurpose(name) ::= <<
This C file contains the main function for model <name>.

>>

filePrefix(name, date, path) ::=
    "<stdFilePrefix(date, path, mainGlueCodeCFilePurpose(name))>"

filePostfix(name, path) ::= <<


<blockComment(arg={End of autogenerated file: <path>})>
>>

constructThreadDispatcher(sem) ::= <<
tb_sem_create(&<sem>);
>>

destructSem(sem) ::= <<
tb_sem_destroy(&<sem>);
>>

createMutex(mutex) ::= <<
tb_mutex_create(&<mutex>);
>>

destroyMutex(mutex) ::= <<
tb_mutex_destroy(&<mutex>);
>>

createActiveThreadMutexes(threadImpl) ::= <<
<constructThreadDispatcher(threadImpl.threadDispatcherMutex)>
<threadImpl.externalMutexes:{ m |<createMutex(m)>}>
>>

createPassiveThreadMutexes(threadImpl) ::= <<
<constructThreadDispatcher(threadImpl.threadDispatcherMutex)>
<threadImpl.externalMutexes:{ m | <createMutex(m)>}>
>>

createMutexes(model) ::= <<
/* create system-implementation level external mutexes */
<model.externalMutexList:{ m | <createMutex(m)>}>

/* create active thread mutexes */
<model.activeThreadImplementations:createActiveThreadMutexes()>

/* create monitor mutexes */
<model.passiveThreadImplementations:createPassiveThreadMutexes()>
>>

destructActiveThreadMutexes(threadImpl) ::= <<
destructSem(<threadImpl.threadDispatcherMutex>)
<threadImpl.externalMutexes:{ m | destructMutex(<m>) }>
>>

destructPassiveThreadMutexes(threadImpl) ::= <<
destructSem(<threadImpl.threadDispatcherMutex>)
<threadImpl.externalMutexes:{ m | destructMutex(<m>) }>
>>

destructMutexes(model) ::= <<
/* destruct system-implementation level external mutexes */
<model.externalMutexList:{ m | destructMutex(<m>) }>

/* destruct active thread mutexes */
<model.activeThreadImplementations:destructActiveThreadMutexes()>

/* destruct monitor mutexes */
<model.passiveThreadImplementations:destructPassiveThreadMutexes()>
>>

threadInitializePorts(threadImpl) ::= <<
    threadImpl.portList{ port | port.linuxAddMainCFileInitializers }
>>

initializePorts(model) ::= <<
<model.activeThreadImplementations:threadInitializePorts()>
>>

threadDestructPorts(threadImpl) ::= <<
    threadImpl.portList{ port | port.linuxAddMainCFileDestructors }
>>

destructPorts(model) ::= <<
<model.activeThreadImplementations:threadDestructPorts()>
>>

// currently right here!

createTask(threadImpl) ::= <<
<threadImpl.normalizedName> = taskCreate("<threadImpl.normalizedName>",
    <threadImpl.priority>,
    VX_FP_TASK,
    <threadImpl.osSpecificStackSize>,
    (FUNCPTR)<threadImpl.threadImplMainFnName>,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
assert(<threadImpl.normalizedName> != NULL);

>>

activateTask(threadImpl) ::= <<
status = taskActivate(<threadImpl.normalizedName>);
assert(status == OK);

>>

createTasks(model) ::= <<
<model.ActiveThreadImplementations:createTask()>

<model.ActiveThreadImplementations:activateTask()>
>>

destructTasks(model) ::= <<
<model.ActiveThreadImplementations:{threadImpl | taskDestruct(<threadImpl.normalizedName>);
}>
>>

sharedDataDefinition(sharedData) ::= <<
<sharedData.type.name> <sharedData.varName>;

>>

/////////////////////////////////////////////////////////////////////
//
// Main function
//
/////////////////////////////////////////////////////////////////////
mainFunction(model) ::= <<
int trusted_build_main(uint32_t runDurationInSeconds) {

    <createMutexes(model)>

    <initializePorts(model)>

    <createTasks(model)>

    // MWW: fix this with the appropriate linux alternative.
    if (runDurationInSeconds == 0) {
        taskSuspend(0);
    } else {
        sleep(runDurationInSeconds);
    }

    /* if bounded-time run, kill the tasks and destruct the mutexes */

    <destructTasks(model)>

    <destructPorts(model)>

    <destructMutexes(model)>

    return 0;
}
>>

writeThreadPortIncludes(threadImpl) ::= <<
<threadImpl.portList:{port|port.linuxAddMainCFileIncludes}>
>>

writeThreadPortDeclarations(threadImpl) ::= <<
<threadImpl.portList:{port|port.linuxAddMainCFileDeclarations}>
>>


///////////////////////////////////////////////////////////////////////////
//
// Putting it all together...
//
///////////////////////////////////////////////////////////////////////////

body(model) ::= <<

#include <\u0022><model.prefix>_decls.h<\u0022>
#include <\u003C>unistd.h<\u003E>
#include <\u003C>sysLib.h<\u003E>
#include <\u003C>assert.h<\u003E>

<model.threadImplementations:writeThreadPortIncludes()>


<if(model.sharedData)>
// shared data definitions for tasks
<model.sharedData:sharedDataDefinition()>
<endif>

<writeModelMutexes(model, "")>

<model.threadImplementations:writeThreadPortDeclarations()>

<mainFunction(model)>

>>
