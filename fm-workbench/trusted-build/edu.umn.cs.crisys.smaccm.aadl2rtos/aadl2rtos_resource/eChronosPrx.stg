delimiters "$", "$"
import "xmlCommon.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to eChronos .prx file
// 
////////////////////////////////////////////////////////////////////////////

prxPurpose(sysInstanceName) ::= <<
This file contains the main eChronos .prx assembly for the  
AADL system instance rooted at $sysInstanceName$.
>>

prxPrefix(name, date, path, datatypesHeader) ::= <<
<?xml version="1.0" encoding="UTF-8" ?>
$xmlDARPALicenseComment()$

$xmlFilenameBlockComment(date, path, prxPurpose(name))$

>>

prxPostfix(name, path) ::= <<

$xmlBlockComment(arg={End of autogenerated file: $path$})$

>>

writeTrampoline(name, flihName) ::= <<

	<tramopoline>
		<name>$name$</name>
		<handler>$flihName$</handler>
	</trampoline>

>>

writeDispatcherTrampoline(dispatcher) ::= <<
$writeTrampoline(dispatcher.name, dispatcher.eChronosIrqSmaccmFlihName)$
>>

writeExternalIsrTrampoline(externalIsr) ::= <<
$writeTrampoline(externalIsr.name, externalIsr.handlerName)$
>>

writeTrampolines(model) ::= << 
$model.irqDispatchers:writeDispatcherTrampoline()$
$if(model.threadCalendar.hasDispatchers && 
	model.generateSystickIrq)$
$writeTrampoline("systick", model.threadCalendar.calendarFnName)$
$endif$
$model.externalIsrs:writeExternalIsrTrampoline()$
>>

writeInterruptHandler(signalName) ::= <<
<$signalName$>rtos_internal_exception_preempt_trampoline_$signalName$</$signalName$>
>>

writeDispatcherInterruptHandler(dispatcher) ::= << 
	$writeInterruptHandler(dispatcher.name)$
>>


writeInterruptHandlers(model) ::= <<
	$writeInterruptHandler("systick")$
    $model.irqDispatchers:writeInterruptHandler()$
>>

writeSignalLabels(model) ::= <<
<!-- TBD: since each task will want to define its own signals, I'm not sure
     whether we want to define signal labels or not; I'm also not sure whether
     this is required by eChronos --> 
>>

writeTask(threadImpl) ::= <<
	<task>
		<name>$threadImpl.normalizedName$</name>
		<function>$threadImpl.threadImplMainFnName$</function>
		<priority>$threadImpl.priority$</priority>
		<stack_size>$threadImpl.stackSize$</stack_size>
	</task>
>>

writeTasks(model) ::= <<
$model.ActiveThreadImplementations:writeTask()$
>>

writeMutex(name) ::= <<
	<mutex>$name$</mutex>
>>

// Fill in more stuff HERE!
writeInputPortMutex(port) ::= << >> 

writeActiveThreadMutexes(threadImpl) ::= <<
	$threadImpl.inputPortList:writeInputPortMutex()$
>>

writeMutexes(model) ::= <<
	$model.externalMutexList:writeMutex()$
	$model.activeThreadImplementations:writeActiveThreadMutexes()$
>>

writeSemaphores(model) ::= <<

>>

writeInterruptEvents(model) ::= <<

>>