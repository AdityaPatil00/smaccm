import "CommonComponentC.stg"

/*
 * Overrides for OS-specific names/behavior for generated C code.
 * 
 */

osSpecificThreadEntrypoint(threadImpl) ::= "<threadImpl.threadImplMainFnName>"
osSpecificThreadReturnStmt(threadImpl) ::= "return; "

incomingPortWriterName(port) ::= "smaccm_<port.qualifiedName>_<port.type.writerFn>"

outgoingPortWriterName(connection) ::= "<incomingPortWriterName(connection.destPort)>"

incomingActiveThreadDispatchName(dispatcher) ::= "<incomingPortWriterName(dispatcher)>"
outgoingActiveThreadDispatchName(dispatcher) ::= "<incomingActiveThreadDispatchName(dispatcher)>"

incomingUserEntrypointCallerName(dispatcher) ::= "smaccm_entrypoint_<dispatcher.qualifiedName>"

outgoingUserEntrypointCallerName(dispatcher) ::= "<incomingUserEntrypointCallerName(dispatcher)>"

portLockStmt(port) ::= << 
semTake(<port.mutex>, WAIT_FOREVER);  

>>

portUnlockStmt(port) ::= <<
semGive(<port.mutex>); 

>>

portDispatcherLock(dispatcher) ::= <<
semTake(<dispatcher.threadImplementation.threadDispatcherMutex>, WAIT_FOREVER);
>>

portDispatcherUnlock(dispatcher) ::= <<
semGive(<dispatcher.threadImplementation.threadDispatcherMutex>);
>>

dispatcherMainInitializeLockStmt(threadImpl) ::= " "

osSpecificThreadPostInitializer(threadImpl) ::= " "


dispatcherMainLockWaitStmt(threadImpl) ::= <<
	semTake(<threadImpl.threadDispatcherMutex>);
>>

dispatcherMainLockReleaseStmt(dispatcher) ::= <<
	<if(dispatcher.isIRQ || dispatcher.isPeriodic)>
	rtos_interrupt_event_raise(<dispatcher.threadImplementation.eChronosInterruptSignalConst>);<else>
	rtos_signal_send(<dispatcher.threadImplementation.eChronosTaskIdConst>, <dispatcher.threadImplementation.eChronosDispatchSignalConst>);
	<endif>
>>

osSpecificIncludeFiles(threadImpl) ::= <<
#include <\u003C>smaccm_decls.h<\u003E>
#include <\u003C>string.h<\u003E>
#include <\u003C>wdLib.h<\u003E>
>>

osSpecificIrqDispatcher(dispatcher) ::= << 
bool <incomingActiveThreadDispatchName(dispatcher)>() {
	<dispatcher.firstLevelInterruptHandler>();
	<dispatcher.dispatchOccurredVar> = true;
	<dispatcherMainLockReleaseStmt(dispatcher)>
	return true;
}
>>

osSpecificRegisterIrqs(dispatcher) ::= ""

osSpecificComponentLocalCallerFunction(connection) ::= ""

// TODO: add an eChronos assert function.
osSpecificAssert(predicate) ::= ""

