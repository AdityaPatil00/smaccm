import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to eChronos .prx file
// 
////////////////////////////////////////////////////////////////////////////

filePurpose(sysInstanceName) ::= <<
This file contains the declarations required for the cross-component 
RPC calls for eChronos.
>>

headerIfdef(sysInstanceName) ::= "__SMACCM_<sysInstanceName>_decls__H"

headerPrefix(name, date, path) ::= <<
#ifndef <headerIfdef(name)>
#define <headerIfdef(name)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, filePurpose(name))>
	
#include \<stdbool.h>
#include \<stddef.h>
#include \<stdint.h>

>>

headerPostfix(name, path) ::= <<

/* endif for: #ifndef <headerIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>

localPortWriterName(port) ::= << 
<genericFailure("localPortWriterName")>
<port.dummyFieldForError>
>>

portDispatcherWriterName(port) ::= << 
<genericFailure("portDispatcherWriterName")>
<port.dummyFieldForError>
>>

dataWriterDecl(port) ::= <<
bool <localPortWriterName(port)>(<port.type.camkesInputType.name> arg); 
>> 

eventWriterDecl(port) ::= <<
bool <localPortWriterName(port)>(); 
>>


activeThreadDecls(threadImpl) ::= <<
<threadImpl.
>>

headerBody(model) ::= <<
   <model.activeThreadImplementations:activeThreadDecls()>
   <model.passiveThreadImplementations:passiveThreadDecls()>
>>