import "Common.stg"
import "CommonOSSpecificNames.stg"
import "CommonCPrototypes.stg"

/*********************************************************************
 *
 *********************************************************************/

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component gluecode C files for CAmkES/eChronos
// 
// 
////////////////////////////////////////////////////////////////////////////

mainGlueCodeCFilePurpose(name) ::= <<
This C file contains the main function for model <name>.   

>>

filePrefix(name, date, path) ::= 
	"<stdFilePrefix(date, path, mainGlueCodeCFilePurpose(name))>"

filePostfix(name, path) ::= <<


<blockComment(arg={End of autogenerated file: <path>})>
>>

createActiveThreadMutexes(threadImpl) ::= <<
<threadImpl.threadDispatcherMutex> = semMCreate(SEM_Q_PRIORITY);
<threadImpl.inputPortList:{port | <port.mutex> = semMCreate(SEM_Q_PRIORITY);
}>
<threadImpl.externalMutexes:{ m | <m> = semMCreate(SEM_Q_PRIORITY);
}>
>>

createPassiveThreadMutexes(threadImpl) ::= <<
<threadImpl.threadDispatcherMutex> = semMCreate(SEM_Q_PRIORITY);
<threadImpl.externalMutexes:{ m | <m> = semMCreate(SEM_Q_PRIORITY);
}>
>>

createMutexes(model) ::= <<
/* create system-implementation level external mutexes */
<model.externalMutexList:{ m | <m> = semMCreate(SEM_Q_PRIORITY);
}>

/* create active thread mutexes */
<model.activeThreadImplementations:createActiveThreadMutexes()>

/* create monitor mutexes */
<model.passiveThreadImplementations:createPassiveThreadMutexes()>
>>

deleteActiveThreadMutexes(threadImpl) ::= <<
semDelete(<threadImpl.threadDispatcherMutex>);
<threadImpl.inputPortList:{port | semDelete(<port.mutex>);
}>
<threadImpl.externalMutexes:{ m | semDelete(<m>);
}>
>>

deletePassiveThreadMutexes(threadImpl) ::= <<
semDelete(<threadImpl.threadDispatcherMutex>);
<threadImpl.externalMutexes:{ m | semDelete(<m>);
}>
>>

deleteMutexes(model) ::= <<
/* delete system-implementation level external mutexes */
<model.externalMutexList:{ m | semDelete(<m>);
}>

/* delete active thread mutexes */
<model.activeThreadImplementations:deleteActiveThreadMutexes()>

/* delete monitor mutexes */
<model.passiveThreadImplementations:deletePassiveThreadMutexes()>
>>


createTask(threadImpl) ::= <<
	<threadImpl.normalizedName> = taskCreate("<threadImpl.normalizedName>", 
		<threadImpl.priority>,
		0, 
		<threadImpl.osSpecificStackSize>,
		(FUNCPTR)<threadImpl.threadImplMainFnName>, 
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0); 
>>

createTasks(model) ::= <<
<model.ActiveThreadImplementations:createTask()>
>>

deleteTasks(model) ::= <<
<model.ActiveThreadImplementations:{threadImpl | taskDelete(<threadImpl.normalizedName>);
}>
>>

/////////////////////////////////////////////////////////////////////
//
// Main function
//
/////////////////////////////////////////////////////////////////////
mainFunction(model) ::= <<
int trusted_build_main(uint runDurationInSeconds) {

	<createMutexes(model)>

	<createTasks(model)>
	
	if (runDurationInSeconds == 0) {
		taskSuspend(0);
	} else {
		sleep(runDurationInSeconds); 
	}
	
	/* if bounded-time run, kill the tasks and delete the mutexes */
	
	<deleteTasks(model)>
	
	<deleteMutexes(model)>
	
	return 0; 
}
>>


///////////////////////////////////////////////////////////////////////////
//
// Putting it all together...
//
///////////////////////////////////////////////////////////////////////////

body(model) ::= <<

#include <\u003C>smaccm_decls.h<\u003E>

<mainFunction(model)>

>>

