

blockComment(arg) ::= <<

/**************************************************************************
  <arg>
 **************************************************************************/

>>

DARPALicense() ::= <<
Copyright (c) 2013, Rockwell Collins and the University of Minnesota.
Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
including any software or models in source or binary form, as well as any drawings, specifications, 
and documentation (collectively \"the Data\"), to deal in the Data without restriction, including 
without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Data.

THE DATA IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

>>

DARPALicenseComment() ::= "<blockComment(DARPALicense())>"

filenameBlockComment(date, path, purpose) ::= <<
/**************************************************************************

   File: <path>
   Created on: <date>
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  <purpose>

 **************************************************************************/
>>


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to AADL datatype file for CAmkES
// 
////////////////////////////////////////////////////////////////////////////



datatypesblockPurpose(sysInstanceName) ::= <<
This file contains the datatypes used for communications between 
AADL components as defined in the system implementation <sysInstanceName>.
>>


datatypesHeaderIfdef(sysInstanceName) ::= "__<sysInstanceName>_types__H"

datatypesPrefix(sysInstanceName, date, path) ::= <<
#ifdef <datatypesHeaderIfdef(sysInstanceName)>
#define <datatypesHeaderIfdef(sysInstanceName)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, datatypesblockPurpose(sysInstanceName))>
	
>>

datatypesPostfix(sysInstanceName, hname) ::= <<

/* endif for: #ifdef <datatypesHeaderIfdef(sysInstanceName)> */
#endif

<blockComment(arg={End of autogenerated file: <hname>})>

>>


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to .idl4 files for CAmkES
// 
////////////////////////////////////////////////////////////////////////////


dispatchInterfaceIdlPurpose(componentName) ::= <<
This .idl4 file contains the dispatcher interface used for dispatching 
the thread implementation <componentName>.
>>

dispatchInterfaceIdlPrefix(name, date, path) ::= <<
	
<DARPALicenseComment()>

<filenameBlockComment(date, path, dispatchInterfaceIdlPurpose(name))>

>>

dispatchInterfaceIdlPostfix(path) ::= <<

<\n>
<blockComment(arg={End of autogenerated file: <path>})>
>>

dispatcherArg(arg) ::= "<if(arg)> in <arg> arg<endif>"

dispatcherPrototype(dispatcher) ::= <<
	void dispatch_<dispatcher.name>(<dispatcherArg(dispatcher.type)>); 
>>

dispatcherProc(name, datatypeHeader, dispatchers) ::= <<
<\n>
procedure <name>_dispatch {
    include "<datatypeHeader>";
<dispatchers; separator="\n">
}

>> 

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component gluecode header files for CAmkES
// 
////////////////////////////////////////////////////////////////////////////

componentGlueCodeHeaderPurpose(componentName) ::= <<
This header file contains the AADL gluecode interfaces used by the client
for the thread implementation <componentName>.
>>

componentGlueCodeHeaderIfdef(sysInstanceName) ::= "__<sysInstanceName>_types__H"


componentGlueCodeHeaderPrefix(name, date, path, datatypesHeader) ::= <<
#ifdef <componentGlueCodeHeaderIfdef(name)>
#define <componentGlueCodeHeaderIfdef(name)>

#include "../../interfaces/<datatypesHeader>"
	
<DARPALicenseComment()>

<filenameBlockComment(date, path, dispatchInterfaceIdlPurpose(name))>

>>

componentGlueCodeHeaderPostfix(name, path) ::= <<

/* endif for: #ifdef <componentGlueCodeHeaderIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component CAmkES file
// 
////////////////////////////////////////////////////////////////////////////

componentCamkesPurpose(componentName) ::= <<
This header file contains the CAmkES component definition for the 
AADL thread implementation <componentName>.
>>

componentCamkesPrefix(name, date, path, datatypesHeader) ::= <<
#include "../../interfaces/<datatypesHeader>"
	
<DARPALicenseComment()>

<filenameBlockComment(date, path, dispatchInterfaceIdlPurpose(name))>

>>

componentCamkesPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>

componentCamkesInterface(dispatcher) ::= <<
	void dispatch_<dispatcher.name>(<dispatcherArg(dispatcher.type)>); 
>>


////////////////////////////////////////////////////////////////////////////
//
// Some dummy definitions for syntax
// 
////////////////////////////////////////////////////////////////////////////



decl(type, name, value) ::= "<type> <name><init(value)>;"
init(v) ::= "<if(v)> = <v><endif>"

test(name) ::= "<name:bracket(); separator=\", \">" // apply bracket template to each name
bracket(x) ::= "[<x>]"            // surround parameter with square brackets

test1(name) ::= "<name:{x | [<x>]}; separator=\", \">" // another example, with inlined bracket
