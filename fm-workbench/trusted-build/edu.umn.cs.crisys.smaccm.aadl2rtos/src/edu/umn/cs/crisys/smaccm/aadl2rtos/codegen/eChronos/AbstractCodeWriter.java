package edu.umn.cs.crisys.smaccm.aadl2rtos.codegen.eChronos;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import edu.umn.cs.crisys.smaccm.aadl2rtos.model.thread.ThreadImplementation;
import edu.umn.cs.crisys.smaccm.aadl2rtos.model.type.Type;
import edu.umn.cs.crisys.smaccm.aadl2rtos.parse.Model;
import edu.umn.cs.crisys.smaccm.aadl2rtos.util.Util;

public abstract class AbstractCodeWriter {
	protected File CFile;
	protected File HFile;
	protected BufferedWriter out;

	protected Model model;
	protected String sysInstanceName;

	protected Set<Entry<String, Type>> astTypesEntrySet = new HashSet<Entry<String, Type>>();
	protected List<ThreadImplementation> taskThreads = new ArrayList<ThreadImplementation>();
	protected List<ThreadImplementation> allThreads = new ArrayList<ThreadImplementation>();

	public AbstractCodeWriter(BufferedWriter out, File CFile, File HFile,
			Model model) {
		this.out = out;
		this.CFile = CFile;
		this.HFile = HFile;
		this.model = model;
		this.sysInstanceName = model.getSystemInstanceName();
		this.astTypesEntrySet = model.getAstTypes().entrySet();
		this.allThreads = model.getThreadImplementations();
	}

	protected void writeFileMetadata(File f) throws IOException {
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();

		writeComment("   File: " + f.getCanonicalPath() + "\n" + "   Created on: "
				+ dateFormat.format(cal.getTime()) + "\n"
				+ "   using Dulcimer AADL system build tool suite \n\n"
				+ "   ***AUTOGENERATED CODE: DO NOT MODIFY***\n");
	}

	protected void writeComment(String comment) throws IOException {
		out.append("\n/**************************************************************************\n"
				+ comment
				+ " **************************************************************************/\n");
	}

	protected void writeLicense() throws IOException {
		writeComment(Util.DARPA_License);
	}

	protected String getRtosPrefix() {
		return "rtos_";
	}

	protected String rtosFnName(String postfix) {
		return getRtosPrefix() + postfix;
	}

	/*
	protected Type getType(PortImpl impl) {
		if (impl == null) {
			return null;
		}
		return astHelper.lookupType((DataClassifier) impl.getClassifier());
	} */
	
}