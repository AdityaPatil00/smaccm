/*
* generated by Xtext
*/
package com.rockwellcollins.atc.agree.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class AgreeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFnDefExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NamedElement returns aadl2::NamedElement:
		//	Arg | FnDefExpr | PropertyStatement | ConstStatement;
		public ParserRule getRule() { return rule; }

		//Arg | FnDefExpr | PropertyStatement | ConstStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Arg
		public RuleCall getArgParserRuleCall_0() { return cArgParserRuleCall_0; }

		//FnDefExpr
		public RuleCall getFnDefExprParserRuleCall_1() { return cFnDefExprParserRuleCall_1; }

		//PropertyStatement
		public RuleCall getPropertyStatementParserRuleCall_2() { return cPropertyStatementParserRuleCall_2; }

		//ConstStatement
		public RuleCall getConstStatementParserRuleCall_3() { return cConstStatementParserRuleCall_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAgreeContractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSpecStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNodeStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNodeBodyExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEqStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Element returns aadl2::Element:
		//	Expr | Type | AgreeContract | SpecStatement | NodeStmt | NodeBodyExpr | EqStatement;
		public ParserRule getRule() { return rule; }

		//Expr | Type | AgreeContract | SpecStatement | NodeStmt | NodeBodyExpr | EqStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//AgreeContract
		public RuleCall getAgreeContractParserRuleCall_2() { return cAgreeContractParserRuleCall_2; }

		//SpecStatement
		public RuleCall getSpecStatementParserRuleCall_3() { return cSpecStatementParserRuleCall_3; }

		//NodeStmt
		public RuleCall getNodeStmtParserRuleCall_4() { return cNodeStmtParserRuleCall_4; }

		//NodeBodyExpr
		public RuleCall getNodeBodyExprParserRuleCall_5() { return cNodeBodyExprParserRuleCall_5; }

		//EqStatement
		public RuleCall getEqStatementParserRuleCall_6() { return cEqStatementParserRuleCall_6; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final RuleCall cNodeDefExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Namespace returns aadl2::Namespace:
		//	NodeDefExpr;
		public ParserRule getRule() { return rule; }

		//NodeDefExpr
		public RuleCall getNodeDefExprParserRuleCall() { return cNodeDefExprParserRuleCall; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cAgreeLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	AgreeLibrary;
		public ParserRule getRule() { return rule; }

		//AgreeLibrary
		public RuleCall getAgreeLibraryParserRuleCall() { return cAgreeLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cAgreeSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	AgreeSubclause;
		public ParserRule getRule() { return rule; }

		//AgreeSubclause
		public RuleCall getAgreeSubclauseParserRuleCall() { return cAgreeSubclauseParserRuleCall; }
	}

	public class AgreeLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgreeLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgreeContractLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractAgreeContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//AgreeLibrary:
		//	{AgreeContractLibrary} contract=AgreeContract;
		public ParserRule getRule() { return rule; }

		//{AgreeContractLibrary} contract=AgreeContract
		public Group getGroup() { return cGroup; }

		//{AgreeContractLibrary}
		public Action getAgreeContractLibraryAction_0() { return cAgreeContractLibraryAction_0; }

		//contract=AgreeContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//AgreeContract
		public RuleCall getContractAgreeContractParserRuleCall_1_0() { return cContractAgreeContractParserRuleCall_1_0; }
	}

	public class AgreeSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgreeSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgreeContractSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractAgreeContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//AgreeSubclause:
		//	{AgreeContractSubclause} contract=AgreeContract;
		public ParserRule getRule() { return rule; }

		//{AgreeContractSubclause} contract=AgreeContract
		public Group getGroup() { return cGroup; }

		//{AgreeContractSubclause}
		public Action getAgreeContractSubclauseAction_0() { return cAgreeContractSubclauseAction_0; }

		//contract=AgreeContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//AgreeContract
		public RuleCall getContractAgreeContractParserRuleCall_1_0() { return cContractAgreeContractParserRuleCall_1_0; }
	}

	public class AgreeContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgreeContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgreeContractAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecStatementParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//AgreeContract returns Contract:
		//	{AgreeContract} specs+=SpecStatement+;
		public ParserRule getRule() { return rule; }

		//{AgreeContract} specs+=SpecStatement+
		public Group getGroup() { return cGroup; }

		//{AgreeContract}
		public Action getAgreeContractAction_0() { return cAgreeContractAction_0; }

		//specs+=SpecStatement+
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }

		//SpecStatement
		public RuleCall getSpecsSpecStatementParserRuleCall_1_0() { return cSpecsSpecStatementParserRuleCall_1_0; }
	}

	public class SpecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssumeStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAssumeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStrAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cStrAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExprAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_0_4_0 = (RuleCall)cExprAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGuaranteeStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGuaranteeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cStrAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAssertStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAssertKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cParamStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cParameterKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_3_2_0 = (RuleCall)cExprAssignment_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_3_4_0 = (RuleCall)cTypeAssignment_3_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLemmaStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLemmaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStrAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cStrAssignment_4_2.eContents().get(0);
		private final Keyword cColonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cExprAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_4_0 = (RuleCall)cExprAssignment_4_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLiftStatementAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLiftKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSubcompAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSubcompNestedDotIDParserRuleCall_5_2_0 = (RuleCall)cSubcompAssignment_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final RuleCall cSynchStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPropertyStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConstStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEqStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFnDefExprParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNodeDefExprParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//SpecStatement:
		//	{AssumeStatement} "assume" str=STRING ":" expr=Expr ";" | {GuaranteeStatement} "guarantee" str=STRING ":" expr=Expr
		//	";" | {AssertStatement} "assert" expr=Expr ";" | {ParamStatement} "parameter" expr=Expr ":" type=Type ";" |
		//	{LemmaStatement} "lemma" str=STRING ":" expr=Expr ";" | {LiftStatement} "lift" subcomp=NestedDotID ";" |
		//	SynchStatement | PropertyStatement | ConstStatement | EqStatement | FnDefExpr | NodeDefExpr;
		public ParserRule getRule() { return rule; }

		//{AssumeStatement} "assume" str=STRING ":" expr=Expr ";" | {GuaranteeStatement} "guarantee" str=STRING ":" expr=Expr ";"
		//| {AssertStatement} "assert" expr=Expr ";" | {ParamStatement} "parameter" expr=Expr ":" type=Type ";" |
		//{LemmaStatement} "lemma" str=STRING ":" expr=Expr ";" | {LiftStatement} "lift" subcomp=NestedDotID ";" | SynchStatement
		//| PropertyStatement | ConstStatement | EqStatement | FnDefExpr | NodeDefExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AssumeStatement} "assume" str=STRING ":" expr=Expr ";"
		public Group getGroup_0() { return cGroup_0; }

		//{AssumeStatement}
		public Action getAssumeStatementAction_0_0() { return cAssumeStatementAction_0_0; }

		//"assume"
		public Keyword getAssumeKeyword_0_1() { return cAssumeKeyword_0_1; }

		//str=STRING
		public Assignment getStrAssignment_0_2() { return cStrAssignment_0_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_2_0() { return cStrSTRINGTerminalRuleCall_0_2_0; }

		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }

		//expr=Expr
		public Assignment getExprAssignment_0_4() { return cExprAssignment_0_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_4_0() { return cExprExprParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{GuaranteeStatement} "guarantee" str=STRING ":" expr=Expr ";"
		public Group getGroup_1() { return cGroup_1; }

		//{GuaranteeStatement}
		public Action getGuaranteeStatementAction_1_0() { return cGuaranteeStatementAction_1_0; }

		//"guarantee"
		public Keyword getGuaranteeKeyword_1_1() { return cGuaranteeKeyword_1_1; }

		//str=STRING
		public Assignment getStrAssignment_1_2() { return cStrAssignment_1_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_2_0() { return cStrSTRINGTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//expr=Expr
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_4_0() { return cExprExprParserRuleCall_1_4_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//{AssertStatement} "assert" expr=Expr ";"
		public Group getGroup_2() { return cGroup_2; }

		//{AssertStatement}
		public Action getAssertStatementAction_2_0() { return cAssertStatementAction_2_0; }

		//"assert"
		public Keyword getAssertKeyword_2_1() { return cAssertKeyword_2_1; }

		//expr=Expr
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_2_0() { return cExprExprParserRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//{ParamStatement} "parameter" expr=Expr ":" type=Type ";"
		public Group getGroup_3() { return cGroup_3; }

		//{ParamStatement}
		public Action getParamStatementAction_3_0() { return cParamStatementAction_3_0; }

		//"parameter"
		public Keyword getParameterKeyword_3_1() { return cParameterKeyword_3_1; }

		//expr=Expr
		public Assignment getExprAssignment_3_2() { return cExprAssignment_3_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_2_0() { return cExprExprParserRuleCall_3_2_0; }

		//":"
		public Keyword getColonKeyword_3_3() { return cColonKeyword_3_3; }

		//type=Type
		public Assignment getTypeAssignment_3_4() { return cTypeAssignment_3_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_4_0() { return cTypeTypeParserRuleCall_3_4_0; }

		//";"
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }

		//{LemmaStatement} "lemma" str=STRING ":" expr=Expr ";"
		public Group getGroup_4() { return cGroup_4; }

		//{LemmaStatement}
		public Action getLemmaStatementAction_4_0() { return cLemmaStatementAction_4_0; }

		//"lemma"
		public Keyword getLemmaKeyword_4_1() { return cLemmaKeyword_4_1; }

		//str=STRING
		public Assignment getStrAssignment_4_2() { return cStrAssignment_4_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_4_2_0() { return cStrSTRINGTerminalRuleCall_4_2_0; }

		//":"
		public Keyword getColonKeyword_4_3() { return cColonKeyword_4_3; }

		//expr=Expr
		public Assignment getExprAssignment_4_4() { return cExprAssignment_4_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_4_0() { return cExprExprParserRuleCall_4_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_5() { return cSemicolonKeyword_4_5; }

		//{LiftStatement} "lift" subcomp=NestedDotID ";"
		public Group getGroup_5() { return cGroup_5; }

		//{LiftStatement}
		public Action getLiftStatementAction_5_0() { return cLiftStatementAction_5_0; }

		//"lift"
		public Keyword getLiftKeyword_5_1() { return cLiftKeyword_5_1; }

		//subcomp=NestedDotID
		public Assignment getSubcompAssignment_5_2() { return cSubcompAssignment_5_2; }

		//NestedDotID
		public RuleCall getSubcompNestedDotIDParserRuleCall_5_2_0() { return cSubcompNestedDotIDParserRuleCall_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }

		//SynchStatement
		public RuleCall getSynchStatementParserRuleCall_6() { return cSynchStatementParserRuleCall_6; }

		//PropertyStatement
		public RuleCall getPropertyStatementParserRuleCall_7() { return cPropertyStatementParserRuleCall_7; }

		//ConstStatement
		public RuleCall getConstStatementParserRuleCall_8() { return cConstStatementParserRuleCall_8; }

		//EqStatement
		public RuleCall getEqStatementParserRuleCall_9() { return cEqStatementParserRuleCall_9; }

		//FnDefExpr
		public RuleCall getFnDefExprParserRuleCall_10() { return cFnDefExprParserRuleCall_10; }

		//NodeDefExpr
		public RuleCall getNodeDefExprParserRuleCall_11() { return cNodeDefExprParserRuleCall_11; }
	}

	public class SynchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynchronyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINTEGER_LITTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SynchStatement:
		//	"synchrony" ":" val=INTEGER_LIT ";";
		public ParserRule getRule() { return rule; }

		//"synchrony" ":" val=INTEGER_LIT ";"
		public Group getGroup() { return cGroup; }

		//"synchrony"
		public Keyword getSynchronyKeyword_0() { return cSynchronyKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//val=INTEGER_LIT
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//INTEGER_LIT
		public RuleCall getValINTEGER_LITTerminalRuleCall_2_0() { return cValINTEGER_LITTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class NamedCallDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedCallDef");
		private final RuleCall cCallDefParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NamedCallDef returns aadl2::NamedElement:
		//	CallDef;
		public ParserRule getRule() { return rule; }

		//CallDef
		public RuleCall getCallDefParserRuleCall() { return cCallDefParserRuleCall; }
	}

	public class CallDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFnDefExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeDefExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CallDef:
		//	FnDefExpr | NodeDefExpr;
		public ParserRule getRule() { return rule; }

		//FnDefExpr | NodeDefExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//FnDefExpr
		public RuleCall getFnDefExprParserRuleCall_0() { return cFnDefExprParserRuleCall_0; }

		//NodeDefExpr
		public RuleCall getNodeDefExprParserRuleCall_1() { return cNodeDefExprParserRuleCall_1; }
	}

	public class PropertyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyStatement:
		//	"property" name=ID "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"property" name=ID "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConstStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExprParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConstStatement:
		//	"const" name=ID ":" type=Type "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"const" name=ID ":" type=Type "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//expr=Expr
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expr
		public RuleCall getExprExprParserRuleCall_5_0() { return cExprExprParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class EqStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLhsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLhsArgParserRuleCall_1_0_0 = (RuleCall)cLhsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLhsArgParserRuleCall_1_1_1_0 = (RuleCall)cLhsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EqStatement:
		//	"eq" (lhs+=Arg ("," lhs+=Arg)*) ("=" expr=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//"eq" (lhs+=Arg ("," lhs+=Arg)*) ("=" expr=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//"eq"
		public Keyword getEqKeyword_0() { return cEqKeyword_0; }

		//lhs+=Arg ("," lhs+=Arg)*
		public Group getGroup_1() { return cGroup_1; }

		//lhs+=Arg
		public Assignment getLhsAssignment_1_0() { return cLhsAssignment_1_0; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_1_0_0() { return cLhsArgParserRuleCall_1_0_0; }

		//("," lhs+=Arg)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//lhs+=Arg
		public Assignment getLhsAssignment_1_1_1() { return cLhsAssignment_1_1_1; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_1_1_1_0() { return cLhsArgParserRuleCall_1_1_1_0; }

		//("=" expr=Expr)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FnDefExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnDefExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsArgParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_4_1_0 = (RuleCall)cArgsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cExprAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cExprExprParserRuleCall_9_0 = (RuleCall)cExprAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FnDefExpr:
		//	"fun" name=ID "(" args+=Arg ("," args+=Arg)* ")" ":" type=Type "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"fun" name=ID "(" args+=Arg ("," args+=Arg)* ")" ":" type=Type "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"fun"
		public Keyword getFunKeyword_0() { return cFunKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//args+=Arg
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_3_0() { return cArgsArgParserRuleCall_3_0; }

		//("," args+=Arg)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//args+=Arg
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_4_1_0() { return cArgsArgParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=Type
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_7_0() { return cTypeTypeParserRuleCall_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//expr=Expr
		public Assignment getExprAssignment_9() { return cExprAssignment_9; }

		//Expr
		public RuleCall getExprExprParserRuleCall_9_0() { return cExprExprParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class NodeDefExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeDefExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cRetsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cRetsArgParserRuleCall_7_0_0 = (RuleCall)cRetsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cRetsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cRetsArgParserRuleCall_7_1_1_0 = (RuleCall)cRetsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNodeBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNodeBodyNodeBodyExprParserRuleCall_10_0 = (RuleCall)cNodeBodyAssignment_10.eContents().get(0);
		
		//NodeDefExpr:
		//	"node" name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" "returns" "(" (rets+=Arg ("," rets+=Arg)*)? ")" ";"
		//	nodeBody=NodeBodyExpr;
		public ParserRule getRule() { return rule; }

		//"node" name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" "returns" "(" (rets+=Arg ("," rets+=Arg)*)? ")" ";"
		//nodeBody=NodeBodyExpr
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Arg
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_3_0_0() { return cArgsArgParserRuleCall_3_0_0; }

		//("," args+=Arg)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_3_1_1_0() { return cArgsArgParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"returns"
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(rets+=Arg ("," rets+=Arg)*)?
		public Group getGroup_7() { return cGroup_7; }

		//rets+=Arg
		public Assignment getRetsAssignment_7_0() { return cRetsAssignment_7_0; }

		//Arg
		public RuleCall getRetsArgParserRuleCall_7_0_0() { return cRetsArgParserRuleCall_7_0_0; }

		//("," rets+=Arg)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//rets+=Arg
		public Assignment getRetsAssignment_7_1_1() { return cRetsAssignment_7_1_1; }

		//Arg
		public RuleCall getRetsArgParserRuleCall_7_1_1_0() { return cRetsArgParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//nodeBody=NodeBodyExpr
		public Assignment getNodeBodyAssignment_10() { return cNodeBodyAssignment_10; }

		//NodeBodyExpr
		public RuleCall getNodeBodyNodeBodyExprParserRuleCall_10_0() { return cNodeBodyNodeBodyExprParserRuleCall_10_0; }
	}

	public class NodeBodyExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeBodyExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cLocsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cLocsArgParserRuleCall_0_1_0_0 = (RuleCall)cLocsAssignment_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsNodeStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cTelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeBodyExpr:
		//	("var" (locs+=Arg ";")+)? "let" stmts+=NodeStmt+ "tel" ";";
		public ParserRule getRule() { return rule; }

		//("var" (locs+=Arg ";")+)? "let" stmts+=NodeStmt+ "tel" ";"
		public Group getGroup() { return cGroup; }

		//("var" (locs+=Arg ";")+)?
		public Group getGroup_0() { return cGroup_0; }

		//"var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//(locs+=Arg ";")+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//locs+=Arg
		public Assignment getLocsAssignment_0_1_0() { return cLocsAssignment_0_1_0; }

		//Arg
		public RuleCall getLocsArgParserRuleCall_0_1_0_0() { return cLocsArgParserRuleCall_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }

		//"let"
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }

		//stmts+=NodeStmt+
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }

		//NodeStmt
		public RuleCall getStmtsNodeStmtParserRuleCall_2_0() { return cStmtsNodeStmtParserRuleCall_2_0; }

		//"tel"
		public Keyword getTelKeyword_3() { return cTelKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NodeStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNodeEqAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLhsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cLhsArgCrossReference_0_1_0 = (CrossReference)cLhsAssignment_0_1.eContents().get(0);
		private final RuleCall cLhsArgIDTerminalRuleCall_0_1_0_1 = (RuleCall)cLhsArgCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLhsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cLhsArgCrossReference_0_2_1_0 = (CrossReference)cLhsAssignment_0_2_1.eContents().get(0);
		private final RuleCall cLhsArgIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cLhsArgCrossReference_0_2_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExprAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_0_4_0 = (RuleCall)cExprAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeLemmaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLemmaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cStrAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//NodeStmt:
		//	{NodeEq} lhs+=[Arg] ("," lhs+=[Arg])* "=" expr=Expr ";" | {NodeLemma} "lemma" str=STRING ":" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//{NodeEq} lhs+=[Arg] ("," lhs+=[Arg])* "=" expr=Expr ";" | {NodeLemma} "lemma" str=STRING ":" expr=Expr ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NodeEq} lhs+=[Arg] ("," lhs+=[Arg])* "=" expr=Expr ";"
		public Group getGroup_0() { return cGroup_0; }

		//{NodeEq}
		public Action getNodeEqAction_0_0() { return cNodeEqAction_0_0; }

		//lhs+=[Arg]
		public Assignment getLhsAssignment_0_1() { return cLhsAssignment_0_1; }

		//[Arg]
		public CrossReference getLhsArgCrossReference_0_1_0() { return cLhsArgCrossReference_0_1_0; }

		//ID
		public RuleCall getLhsArgIDTerminalRuleCall_0_1_0_1() { return cLhsArgIDTerminalRuleCall_0_1_0_1; }

		//("," lhs+=[Arg])*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//lhs+=[Arg]
		public Assignment getLhsAssignment_0_2_1() { return cLhsAssignment_0_2_1; }

		//[Arg]
		public CrossReference getLhsArgCrossReference_0_2_1_0() { return cLhsArgCrossReference_0_2_1_0; }

		//ID
		public RuleCall getLhsArgIDTerminalRuleCall_0_2_1_0_1() { return cLhsArgIDTerminalRuleCall_0_2_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//expr=Expr
		public Assignment getExprAssignment_0_4() { return cExprAssignment_0_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_4_0() { return cExprExprParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{NodeLemma} "lemma" str=STRING ":" expr=Expr ";"
		public Group getGroup_1() { return cGroup_1; }

		//{NodeLemma}
		public Action getNodeLemmaAction_1_0() { return cNodeLemmaAction_1_0; }

		//"lemma"
		public Keyword getLemmaKeyword_1_1() { return cLemmaKeyword_1_1; }

		//str=STRING
		public Assignment getStrAssignment_1_2() { return cStrAssignment_1_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_2_0() { return cStrSTRINGTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//expr=Expr
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_4_0() { return cExprExprParserRuleCall_1_4_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Arg:
		//	name=ID ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStringAlternatives_0 = (Alternatives)cStringAssignment.eContents().get(0);
		private final Keyword cStringRealKeyword_0_0 = (Keyword)cStringAlternatives_0.eContents().get(0);
		private final Keyword cStringBoolKeyword_0_1 = (Keyword)cStringAlternatives_0.eContents().get(1);
		private final Keyword cStringIntKeyword_0_2 = (Keyword)cStringAlternatives_0.eContents().get(2);
		
		//Type:
		//	string=("real" | "bool" | "int");
		public ParserRule getRule() { return rule; }

		//string=("real" | "bool" | "int")
		public Assignment getStringAssignment() { return cStringAssignment; }

		//"real" | "bool" | "int"
		public Alternatives getStringAlternatives_0() { return cStringAlternatives_0; }

		//"real"
		public Keyword getStringRealKeyword_0_0() { return cStringRealKeyword_0_0; }

		//"bool"
		public Keyword getStringBoolKeyword_0_1() { return cStringBoolKeyword_0_1; }

		//"int"
		public Keyword getStringIntKeyword_0_2() { return cStringIntKeyword_0_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cArrowExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ArrowExpr;
		public ParserRule getRule() { return rule; }

		//ArrowExpr
		public RuleCall getArrowExprParserRuleCall() { return cArrowExprParserRuleCall; }
	}

	public class ArrowExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ArrowExpr returns Expr:
		//	ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ImpliesExpr)?;
		public ParserRule getRule() { return rule; }

		//ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall_0() { return cImpliesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="->") right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="->")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="->"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquivExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEquivExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr returns Expr:
		//	EquivExpr (=> ({BinaryExpr.left=current} op="=>") right=EquivExpr)?;
		public ParserRule getRule() { return rule; }

		//EquivExpr (=> ({BinaryExpr.left=current} op="=>") right=EquivExpr)?
		public Group getGroup() { return cGroup; }

		//EquivExpr
		public RuleCall getEquivExprParserRuleCall_0() { return cEquivExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="=>") right=EquivExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=EquivExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//EquivExpr
		public RuleCall getRightEquivExprParserRuleCall_1_1_0() { return cRightEquivExprParserRuleCall_1_1_0; }
	}

	public class EquivExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EquivExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EquivExpr returns Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op="<=>") right=OrExpr)?;
		public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op="<=>") right=OrExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="<=>") right=OrExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="<=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="<=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="<=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"<=>"
		public Keyword getOpLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=OrExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OrExpr
		public RuleCall getRightOrExprParserRuleCall_1_1_0() { return cRightOrExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="or")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="or"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="or"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelateExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelateExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	RelateExpr (=> ({BinaryExpr.left=current} op="and") right=RelateExpr)*;
		public ParserRule getRule() { return rule; }

		//RelateExpr (=> ({BinaryExpr.left=current} op="and") right=RelateExpr)*
		public Group getGroup() { return cGroup; }

		//RelateExpr
		public RuleCall getRelateExprParserRuleCall_0() { return cRelateExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="and") right=RelateExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="and")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=RelateExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelateExpr
		public RuleCall getRightRelateExprParserRuleCall_1_1_0() { return cRightRelateExprParserRuleCall_1_1_0; }
	}

	public class RelateOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelateOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExclamationMarkEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//RelateOp:
		//	"<" | "<=" | ">" | ">=" | "=" | "<>" | "!=";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">=" | "=" | "<>" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_6() { return cExclamationMarkEqualsSignKeyword_6; }
	}

	public class RelateExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelateExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddSubExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelateOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAddSubExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelateExpr returns Expr:
		//	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;
		public ParserRule getRule() { return rule; }

		//AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?
		public Group getGroup() { return cGroup; }

		//AddSubExpr
		public RuleCall getAddSubExprParserRuleCall_0() { return cAddSubExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelateOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=RelateOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelateOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelateOp
		public RuleCall getOpRelateOpParserRuleCall_1_0_0_1_0() { return cOpRelateOpParserRuleCall_1_0_0_1_0; }

		//right=AddSubExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AddSubExpr
		public RuleCall getRightAddSubExprParserRuleCall_1_1_0() { return cRightAddSubExprParserRuleCall_1_1_0; }
	}

	public class AddSubExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultDivExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultDivExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddSubExpr returns Expr:
		//	MultDivExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=MultDivExpr)*;
		public ParserRule getRule() { return rule; }

		//MultDivExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=MultDivExpr)*
		public Group getGroup() { return cGroup; }

		//MultDivExpr
		public RuleCall getMultDivExprParserRuleCall_0() { return cMultDivExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("+" | "-")) right=MultDivExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("+" | "-")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=MultDivExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultDivExpr
		public RuleCall getRightMultDivExprParserRuleCall_1_1_0() { return cRightMultDivExprParserRuleCall_1_1_0; }
	}

	public class MultDivExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultDivExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpDivKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cOpModKeyword_1_0_0_1_0_3 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultDivExpr returns Expr:
		//	UnaryExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=UnaryExpr)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=UnaryExpr)*
		public Group getGroup() { return cGroup; }

		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("*" | "/" | "div" | "mod")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"*" | "/" | "div" | "mod"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//"div"
		public Keyword getOpDivKeyword_1_0_0_1_0_2() { return cOpDivKeyword_1_0_0_1_0_2; }

		//"mod"
		public Keyword getOpModKeyword_1_0_0_1_0_3() { return cOpModKeyword_1_0_0_1_0_3; }

		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprUnaryExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cIfThenElseExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpr returns Expr:
		//	{UnaryExpr} op=("-" | "not") expr=UnaryExpr | IfThenElseExpr;
		public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=("-" | "not") expr=UnaryExpr | IfThenElseExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=("-" | "not") expr=UnaryExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=("-" | "not")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"-" | "not"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=UnaryExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_0_2_0() { return cExprUnaryExprParserRuleCall_0_2_0; }

		//IfThenElseExpr
		public RuleCall getIfThenElseExprParserRuleCall_1() { return cIfThenElseExprParserRuleCall_1; }
	}

	public class IfThenElseExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElseExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIfThenElseExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAExprParserRuleCall_0_2_0 = (RuleCall)cAAssignment_0_2.eContents().get(0);
		private final Keyword cThenKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cBAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cBExprParserRuleCall_0_4_0 = (RuleCall)cBAssignment_0_4.eContents().get(0);
		private final Keyword cElseKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cCAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cCExprParserRuleCall_0_6_0 = (RuleCall)cCAssignment_0_6.eContents().get(0);
		private final RuleCall cPreDefFnExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IfThenElseExpr returns Expr:
		//	{IfThenElseExpr} "if" a=Expr "then" b=Expr "else" c=Expr | PreDefFnExpr;
		public ParserRule getRule() { return rule; }

		//{IfThenElseExpr} "if" a=Expr "then" b=Expr "else" c=Expr | PreDefFnExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IfThenElseExpr} "if" a=Expr "then" b=Expr "else" c=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_0_0() { return cIfThenElseExprAction_0_0; }

		//"if"
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }

		//a=Expr
		public Assignment getAAssignment_0_2() { return cAAssignment_0_2; }

		//Expr
		public RuleCall getAExprParserRuleCall_0_2_0() { return cAExprParserRuleCall_0_2_0; }

		//"then"
		public Keyword getThenKeyword_0_3() { return cThenKeyword_0_3; }

		//b=Expr
		public Assignment getBAssignment_0_4() { return cBAssignment_0_4; }

		//Expr
		public RuleCall getBExprParserRuleCall_0_4_0() { return cBExprParserRuleCall_0_4_0; }

		//"else"
		public Keyword getElseKeyword_0_5() { return cElseKeyword_0_5; }

		//c=Expr
		public Assignment getCAssignment_0_6() { return cCAssignment_0_6; }

		//Expr
		public RuleCall getCExprParserRuleCall_0_6_0() { return cCExprParserRuleCall_0_6_0; }

		//PreDefFnExpr
		public RuleCall getPreDefFnExprParserRuleCall_1() { return cPreDefFnExprParserRuleCall_1; }
	}

	public class PreDefFnExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefFnExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrevExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPrevKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDelayAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDelayExprParserRuleCall_0_3_0 = (RuleCall)cDelayAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cInitAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cInitExprParserRuleCall_0_5_0 = (RuleCall)cInitAssignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNextExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNextKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_1_3_0 = (RuleCall)cExprAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGetPropertyExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cGet_PropertyKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cComponentAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cComponentExprParserRuleCall_2_3_0 = (RuleCall)cComponentAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cPropAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cPropExprParserRuleCall_2_5_0 = (RuleCall)cPropAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final RuleCall cTermExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PreDefFnExpr returns Expr:
		//	{PrevExpr} "prev" "(" delay=Expr "," init=Expr ")" | {NextExpr} "next" "(" expr=Expr ")" | {GetPropertyExpr}
		//	"Get_Property" "(" component=Expr "," prop=Expr ")" | TermExpr;
		public ParserRule getRule() { return rule; }

		//{PrevExpr} "prev" "(" delay=Expr "," init=Expr ")" | {NextExpr} "next" "(" expr=Expr ")" | {GetPropertyExpr}
		//"Get_Property" "(" component=Expr "," prop=Expr ")" | TermExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PrevExpr} "prev" "(" delay=Expr "," init=Expr ")"
		public Group getGroup_0() { return cGroup_0; }

		//{PrevExpr}
		public Action getPrevExprAction_0_0() { return cPrevExprAction_0_0; }

		//"prev"
		public Keyword getPrevKeyword_0_1() { return cPrevKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//delay=Expr
		public Assignment getDelayAssignment_0_3() { return cDelayAssignment_0_3; }

		//Expr
		public RuleCall getDelayExprParserRuleCall_0_3_0() { return cDelayExprParserRuleCall_0_3_0; }

		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//init=Expr
		public Assignment getInitAssignment_0_5() { return cInitAssignment_0_5; }

		//Expr
		public RuleCall getInitExprParserRuleCall_0_5_0() { return cInitExprParserRuleCall_0_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//{NextExpr} "next" "(" expr=Expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//{NextExpr}
		public Action getNextExprAction_1_0() { return cNextExprAction_1_0; }

		//"next"
		public Keyword getNextKeyword_1_1() { return cNextKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//expr=Expr
		public Assignment getExprAssignment_1_3() { return cExprAssignment_1_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_3_0() { return cExprExprParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//{GetPropertyExpr} "Get_Property" "(" component=Expr "," prop=Expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//{GetPropertyExpr}
		public Action getGetPropertyExprAction_2_0() { return cGetPropertyExprAction_2_0; }

		//"Get_Property"
		public Keyword getGet_PropertyKeyword_2_1() { return cGet_PropertyKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//component=Expr
		public Assignment getComponentAssignment_2_3() { return cComponentAssignment_2_3; }

		//Expr
		public RuleCall getComponentExprParserRuleCall_2_3_0() { return cComponentExprParserRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//prop=Expr
		public Assignment getPropAssignment_2_5() { return cPropAssignment_2_5; }

		//Expr
		public RuleCall getPropExprParserRuleCall_2_5_0() { return cPropExprParserRuleCall_2_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }

		//TermExpr
		public RuleCall getTermExprParserRuleCall_3() { return cTermExprParserRuleCall_3; }
	}

	public class PreDefFnNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefFnNames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrevKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGet_PropertyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//PreDefFnNames:
		//	"prev" | "next" | "Get_Property";
		public ParserRule getRule() { return rule; }

		//"prev" | "next" | "Get_Property"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"prev"
		public Keyword getPrevKeyword_0() { return cPrevKeyword_0; }

		//"next"
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }

		//"Get_Property"
		public Keyword getGet_PropertyKeyword_2() { return cGet_PropertyKeyword_2; }
	}

	public class TermExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdNamedElementCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdNamedElementQIDParserRuleCall_0_1_0_1 = (RuleCall)cIdNamedElementCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cClockIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cNestedDotIDParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cFnCallExprFnAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Assignment cArgsAssignment_2_1_2_0 = (Assignment)cGroup_2_1_2.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_2_1_2_0_0 = (RuleCall)cArgsAssignment_2_1_2_0.eContents().get(0);
		private final Group cGroup_2_1_2_1 = (Group)cGroup_2_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_2_1_0 = (Keyword)cGroup_2_1_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_2_1_1 = (Assignment)cGroup_2_1_2_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_2_1_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntLitExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValINTEGER_LITTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPreExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cPreKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExprAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_4_3_0 = (RuleCall)cExprAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRealLitExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValREAL_LITTerminalRuleCall_5_1_0 = (RuleCall)cValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBoolLitExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValBooleanLiteralParserRuleCall_6_1_0 = (RuleCall)cValAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cThisExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cThisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cFullStopKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSubThisAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cSubThisNestedDotIDParserRuleCall_7_2_1_0 = (RuleCall)cSubThisAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cExprParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//TermExpr returns Expr:
		//	{IdExpr} id=[aadl2::NamedElement|QID] | ClockID | NestedDotID ({FnCallExpr.fn=current} "(" (args+=Expr (","
		//	args+=Expr)*)? ")")? | {IntLitExpr} val=INTEGER_LIT | {PreExpr} "pre" "(" expr=Expr ")" | {RealLitExpr} val=REAL_LIT |
		//	{BoolLitExpr} val=BooleanLiteral | {ThisExpr} "this" ("." subThis=NestedDotID)? | "(" Expr ")";
		public ParserRule getRule() { return rule; }

		//{IdExpr} id=[aadl2::NamedElement|QID] | ClockID | NestedDotID ({FnCallExpr.fn=current} "(" (args+=Expr (","
		//args+=Expr)*)? ")")? | {IntLitExpr} val=INTEGER_LIT | {PreExpr} "pre" "(" expr=Expr ")" | {RealLitExpr} val=REAL_LIT |
		//{BoolLitExpr} val=BooleanLiteral | {ThisExpr} "this" ("." subThis=NestedDotID)? | "(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IdExpr} id=[aadl2::NamedElement|QID]
		public Group getGroup_0() { return cGroup_0; }

		//{IdExpr}
		public Action getIdExprAction_0_0() { return cIdExprAction_0_0; }

		//id=[aadl2::NamedElement|QID]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//[aadl2::NamedElement|QID]
		public CrossReference getIdNamedElementCrossReference_0_1_0() { return cIdNamedElementCrossReference_0_1_0; }

		//QID
		public RuleCall getIdNamedElementQIDParserRuleCall_0_1_0_1() { return cIdNamedElementQIDParserRuleCall_0_1_0_1; }

		//ClockID
		public RuleCall getClockIDParserRuleCall_1() { return cClockIDParserRuleCall_1; }

		//NestedDotID ({FnCallExpr.fn=current} "(" (args+=Expr ("," args+=Expr)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//NestedDotID
		public RuleCall getNestedDotIDParserRuleCall_2_0() { return cNestedDotIDParserRuleCall_2_0; }

		//({FnCallExpr.fn=current} "(" (args+=Expr ("," args+=Expr)*)? ")")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{FnCallExpr.fn=current}
		public Action getFnCallExprFnAction_2_1_0() { return cFnCallExprFnAction_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//args+=Expr
		public Assignment getArgsAssignment_2_1_2_0() { return cArgsAssignment_2_1_2_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_1_2_0_0() { return cArgsExprParserRuleCall_2_1_2_0_0; }

		//("," args+=Expr)*
		public Group getGroup_2_1_2_1() { return cGroup_2_1_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_2_1_0() { return cCommaKeyword_2_1_2_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_2_1_2_1_1() { return cArgsAssignment_2_1_2_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_1_2_1_1_0() { return cArgsExprParserRuleCall_2_1_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }

		//{IntLitExpr} val=INTEGER_LIT
		public Group getGroup_3() { return cGroup_3; }

		//{IntLitExpr}
		public Action getIntLitExprAction_3_0() { return cIntLitExprAction_3_0; }

		//val=INTEGER_LIT
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//INTEGER_LIT
		public RuleCall getValINTEGER_LITTerminalRuleCall_3_1_0() { return cValINTEGER_LITTerminalRuleCall_3_1_0; }

		//{PreExpr} "pre" "(" expr=Expr ")"
		public Group getGroup_4() { return cGroup_4; }

		//{PreExpr}
		public Action getPreExprAction_4_0() { return cPreExprAction_4_0; }

		//"pre"
		public Keyword getPreKeyword_4_1() { return cPreKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//expr=Expr
		public Assignment getExprAssignment_4_3() { return cExprAssignment_4_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_3_0() { return cExprExprParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//{RealLitExpr} val=REAL_LIT
		public Group getGroup_5() { return cGroup_5; }

		//{RealLitExpr}
		public Action getRealLitExprAction_5_0() { return cRealLitExprAction_5_0; }

		//val=REAL_LIT
		public Assignment getValAssignment_5_1() { return cValAssignment_5_1; }

		//REAL_LIT
		public RuleCall getValREAL_LITTerminalRuleCall_5_1_0() { return cValREAL_LITTerminalRuleCall_5_1_0; }

		//{BoolLitExpr} val=BooleanLiteral
		public Group getGroup_6() { return cGroup_6; }

		//{BoolLitExpr}
		public Action getBoolLitExprAction_6_0() { return cBoolLitExprAction_6_0; }

		//val=BooleanLiteral
		public Assignment getValAssignment_6_1() { return cValAssignment_6_1; }

		//BooleanLiteral
		public RuleCall getValBooleanLiteralParserRuleCall_6_1_0() { return cValBooleanLiteralParserRuleCall_6_1_0; }

		//{ThisExpr} "this" ("." subThis=NestedDotID)?
		public Group getGroup_7() { return cGroup_7; }

		//{ThisExpr}
		public Action getThisExprAction_7_0() { return cThisExprAction_7_0; }

		//"this"
		public Keyword getThisKeyword_7_1() { return cThisKeyword_7_1; }

		//("." subThis=NestedDotID)?
		public Group getGroup_7_2() { return cGroup_7_2; }

		//"."
		public Keyword getFullStopKeyword_7_2_0() { return cFullStopKeyword_7_2_0; }

		//subThis=NestedDotID
		public Assignment getSubThisAssignment_7_2_1() { return cSubThisAssignment_7_2_1; }

		//NestedDotID
		public RuleCall getSubThisNestedDotIDParserRuleCall_7_2_1_0() { return cSubThisNestedDotIDParserRuleCall_7_2_1_0; }

		//"(" Expr ")"
		public Group getGroup_8() { return cGroup_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//Expr
		public RuleCall getExprParserRuleCall_8_1() { return cExprParserRuleCall_8_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}

	public class NestedDotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedDotID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBaseNamedElementCrossReference_0_0 = (CrossReference)cBaseAssignment_0.eContents().get(0);
		private final RuleCall cBaseNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cBaseNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		
		//NestedDotID:
		//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
		public ParserRule getRule() { return rule; }

		//base=[aadl2::NamedElement] ("." sub=NestedDotID)?
		public Group getGroup() { return cGroup; }

		//base=[aadl2::NamedElement]
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//[aadl2::NamedElement]
		public CrossReference getBaseNamedElementCrossReference_0_0() { return cBaseNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getBaseNamedElementIDTerminalRuleCall_0_0_1() { return cBaseNamedElementIDTerminalRuleCall_0_0_1; }

		//("." sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_1_0() { return cSubNestedDotIDParserRuleCall_1_1_0; }
	}

	public class ClockIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCompAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCompNamedElementCrossReference_0_0 = (CrossReference)cCompAssignment_0.eContents().get(0);
		private final RuleCall cCompNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cCompNamedElementCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCLKKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClockID:
		//	comp=[aadl2::NamedElement] "." "CLK";
		public ParserRule getRule() { return rule; }

		//comp=[aadl2::NamedElement] "." "CLK"
		public Group getGroup() { return cGroup; }

		//comp=[aadl2::NamedElement]
		public Assignment getCompAssignment_0() { return cCompAssignment_0; }

		//[aadl2::NamedElement]
		public CrossReference getCompNamedElementCrossReference_0_0() { return cCompNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getCompNamedElementIDTerminalRuleCall_0_0_1() { return cCompNamedElementIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"CLK"
		public Keyword getCLKKeyword_2() { return cCLKKeyword_2; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QID:
		//	ID "::" ID;
		public ParserRule getRule() { return rule; }

		//ID "::" ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private NamedElementElements pNamedElement;
	private ElementElements pElement;
	private NamespaceElements pNamespace;
	private AnnexLibraryElements pAnnexLibrary;
	private AnnexSubclauseElements pAnnexSubclause;
	private AgreeLibraryElements pAgreeLibrary;
	private AgreeSubclauseElements pAgreeSubclause;
	private AgreeContractElements pAgreeContract;
	private SpecStatementElements pSpecStatement;
	private SynchStatementElements pSynchStatement;
	private NamedCallDefElements pNamedCallDef;
	private CallDefElements pCallDef;
	private PropertyStatementElements pPropertyStatement;
	private ConstStatementElements pConstStatement;
	private EqStatementElements pEqStatement;
	private FnDefExprElements pFnDefExpr;
	private NodeDefExprElements pNodeDefExpr;
	private NodeBodyExprElements pNodeBodyExpr;
	private NodeStmtElements pNodeStmt;
	private ArgElements pArg;
	private TypeElements pType;
	private ExprElements pExpr;
	private ArrowExprElements pArrowExpr;
	private ImpliesExprElements pImpliesExpr;
	private EquivExprElements pEquivExpr;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private RelateOpElements pRelateOp;
	private RelateExprElements pRelateExpr;
	private AddSubExprElements pAddSubExpr;
	private MultDivExprElements pMultDivExpr;
	private UnaryExprElements pUnaryExpr;
	private IfThenElseExprElements pIfThenElseExpr;
	private PreDefFnExprElements pPreDefFnExpr;
	private PreDefFnNamesElements pPreDefFnNames;
	private TermExprElements pTermExpr;
	private NestedDotIDElements pNestedDotID;
	private ClockIDElements pClockID;
	private QIDElements pQID;
	
	private final Grammar grammar;

	private PropertiesGrammarAccess gaProperties;

	@Inject
	public AgreeGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rockwellcollins.atc.agree.Agree".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//NamedElement returns aadl2::NamedElement:
	//	Arg | FnDefExpr | PropertyStatement | ConstStatement;
	public NamedElementElements getNamedElementAccess() {
		return (pNamedElement != null) ? pNamedElement : (pNamedElement = new NamedElementElements());
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//Element returns aadl2::Element:
	//	Expr | Type | AgreeContract | SpecStatement | NodeStmt | NodeBodyExpr | EqStatement;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Namespace returns aadl2::Namespace:
	//	NodeDefExpr;
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	AgreeLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return (pAnnexLibrary != null) ? pAnnexLibrary : (pAnnexLibrary = new AnnexLibraryElements());
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	AgreeSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return (pAnnexSubclause != null) ? pAnnexSubclause : (pAnnexSubclause = new AnnexSubclauseElements());
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//AgreeLibrary:
	//	{AgreeContractLibrary} contract=AgreeContract;
	public AgreeLibraryElements getAgreeLibraryAccess() {
		return (pAgreeLibrary != null) ? pAgreeLibrary : (pAgreeLibrary = new AgreeLibraryElements());
	}
	
	public ParserRule getAgreeLibraryRule() {
		return getAgreeLibraryAccess().getRule();
	}

	//AgreeSubclause:
	//	{AgreeContractSubclause} contract=AgreeContract;
	public AgreeSubclauseElements getAgreeSubclauseAccess() {
		return (pAgreeSubclause != null) ? pAgreeSubclause : (pAgreeSubclause = new AgreeSubclauseElements());
	}
	
	public ParserRule getAgreeSubclauseRule() {
		return getAgreeSubclauseAccess().getRule();
	}

	//AgreeContract returns Contract:
	//	{AgreeContract} specs+=SpecStatement+;
	public AgreeContractElements getAgreeContractAccess() {
		return (pAgreeContract != null) ? pAgreeContract : (pAgreeContract = new AgreeContractElements());
	}
	
	public ParserRule getAgreeContractRule() {
		return getAgreeContractAccess().getRule();
	}

	//SpecStatement:
	//	{AssumeStatement} "assume" str=STRING ":" expr=Expr ";" | {GuaranteeStatement} "guarantee" str=STRING ":" expr=Expr
	//	";" | {AssertStatement} "assert" expr=Expr ";" | {ParamStatement} "parameter" expr=Expr ":" type=Type ";" |
	//	{LemmaStatement} "lemma" str=STRING ":" expr=Expr ";" | {LiftStatement} "lift" subcomp=NestedDotID ";" |
	//	SynchStatement | PropertyStatement | ConstStatement | EqStatement | FnDefExpr | NodeDefExpr;
	public SpecStatementElements getSpecStatementAccess() {
		return (pSpecStatement != null) ? pSpecStatement : (pSpecStatement = new SpecStatementElements());
	}
	
	public ParserRule getSpecStatementRule() {
		return getSpecStatementAccess().getRule();
	}

	//SynchStatement:
	//	"synchrony" ":" val=INTEGER_LIT ";";
	public SynchStatementElements getSynchStatementAccess() {
		return (pSynchStatement != null) ? pSynchStatement : (pSynchStatement = new SynchStatementElements());
	}
	
	public ParserRule getSynchStatementRule() {
		return getSynchStatementAccess().getRule();
	}

	//NamedCallDef returns aadl2::NamedElement:
	//	CallDef;
	public NamedCallDefElements getNamedCallDefAccess() {
		return (pNamedCallDef != null) ? pNamedCallDef : (pNamedCallDef = new NamedCallDefElements());
	}
	
	public ParserRule getNamedCallDefRule() {
		return getNamedCallDefAccess().getRule();
	}

	//CallDef:
	//	FnDefExpr | NodeDefExpr;
	public CallDefElements getCallDefAccess() {
		return (pCallDef != null) ? pCallDef : (pCallDef = new CallDefElements());
	}
	
	public ParserRule getCallDefRule() {
		return getCallDefAccess().getRule();
	}

	//PropertyStatement:
	//	"property" name=ID "=" expr=Expr ";";
	public PropertyStatementElements getPropertyStatementAccess() {
		return (pPropertyStatement != null) ? pPropertyStatement : (pPropertyStatement = new PropertyStatementElements());
	}
	
	public ParserRule getPropertyStatementRule() {
		return getPropertyStatementAccess().getRule();
	}

	//ConstStatement:
	//	"const" name=ID ":" type=Type "=" expr=Expr ";";
	public ConstStatementElements getConstStatementAccess() {
		return (pConstStatement != null) ? pConstStatement : (pConstStatement = new ConstStatementElements());
	}
	
	public ParserRule getConstStatementRule() {
		return getConstStatementAccess().getRule();
	}

	//EqStatement:
	//	"eq" (lhs+=Arg ("," lhs+=Arg)*) ("=" expr=Expr)? ";";
	public EqStatementElements getEqStatementAccess() {
		return (pEqStatement != null) ? pEqStatement : (pEqStatement = new EqStatementElements());
	}
	
	public ParserRule getEqStatementRule() {
		return getEqStatementAccess().getRule();
	}

	//FnDefExpr:
	//	"fun" name=ID "(" args+=Arg ("," args+=Arg)* ")" ":" type=Type "=" expr=Expr ";";
	public FnDefExprElements getFnDefExprAccess() {
		return (pFnDefExpr != null) ? pFnDefExpr : (pFnDefExpr = new FnDefExprElements());
	}
	
	public ParserRule getFnDefExprRule() {
		return getFnDefExprAccess().getRule();
	}

	//NodeDefExpr:
	//	"node" name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" "returns" "(" (rets+=Arg ("," rets+=Arg)*)? ")" ";"
	//	nodeBody=NodeBodyExpr;
	public NodeDefExprElements getNodeDefExprAccess() {
		return (pNodeDefExpr != null) ? pNodeDefExpr : (pNodeDefExpr = new NodeDefExprElements());
	}
	
	public ParserRule getNodeDefExprRule() {
		return getNodeDefExprAccess().getRule();
	}

	//NodeBodyExpr:
	//	("var" (locs+=Arg ";")+)? "let" stmts+=NodeStmt+ "tel" ";";
	public NodeBodyExprElements getNodeBodyExprAccess() {
		return (pNodeBodyExpr != null) ? pNodeBodyExpr : (pNodeBodyExpr = new NodeBodyExprElements());
	}
	
	public ParserRule getNodeBodyExprRule() {
		return getNodeBodyExprAccess().getRule();
	}

	//NodeStmt:
	//	{NodeEq} lhs+=[Arg] ("," lhs+=[Arg])* "=" expr=Expr ";" | {NodeLemma} "lemma" str=STRING ":" expr=Expr ";";
	public NodeStmtElements getNodeStmtAccess() {
		return (pNodeStmt != null) ? pNodeStmt : (pNodeStmt = new NodeStmtElements());
	}
	
	public ParserRule getNodeStmtRule() {
		return getNodeStmtAccess().getRule();
	}

	//Arg:
	//	name=ID ":" type=Type;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//Type:
	//	string=("real" | "bool" | "int");
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Expr:
	//	ArrowExpr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ArrowExpr returns Expr:
	//	ImpliesExpr (=> ({BinaryExpr.left=current} op="->") right=ImpliesExpr)?;
	public ArrowExprElements getArrowExprAccess() {
		return (pArrowExpr != null) ? pArrowExpr : (pArrowExpr = new ArrowExprElements());
	}
	
	public ParserRule getArrowExprRule() {
		return getArrowExprAccess().getRule();
	}

	//ImpliesExpr returns Expr:
	//	EquivExpr (=> ({BinaryExpr.left=current} op="=>") right=EquivExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return (pImpliesExpr != null) ? pImpliesExpr : (pImpliesExpr = new ImpliesExprElements());
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//EquivExpr returns Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op="<=>") right=OrExpr)?;
	public EquivExprElements getEquivExprAccess() {
		return (pEquivExpr != null) ? pEquivExpr : (pEquivExpr = new EquivExprElements());
	}
	
	public ParserRule getEquivExprRule() {
		return getEquivExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	RelateExpr (=> ({BinaryExpr.left=current} op="and") right=RelateExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelateOp:
	//	"<" | "<=" | ">" | ">=" | "=" | "<>" | "!=";
	public RelateOpElements getRelateOpAccess() {
		return (pRelateOp != null) ? pRelateOp : (pRelateOp = new RelateOpElements());
	}
	
	public ParserRule getRelateOpRule() {
		return getRelateOpAccess().getRule();
	}

	//RelateExpr returns Expr:
	//	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;
	public RelateExprElements getRelateExprAccess() {
		return (pRelateExpr != null) ? pRelateExpr : (pRelateExpr = new RelateExprElements());
	}
	
	public ParserRule getRelateExprRule() {
		return getRelateExprAccess().getRule();
	}

	//AddSubExpr returns Expr:
	//	MultDivExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=MultDivExpr)*;
	public AddSubExprElements getAddSubExprAccess() {
		return (pAddSubExpr != null) ? pAddSubExpr : (pAddSubExpr = new AddSubExprElements());
	}
	
	public ParserRule getAddSubExprRule() {
		return getAddSubExprAccess().getRule();
	}

	//MultDivExpr returns Expr:
	//	UnaryExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "div" | "mod")) right=UnaryExpr)*;
	public MultDivExprElements getMultDivExprAccess() {
		return (pMultDivExpr != null) ? pMultDivExpr : (pMultDivExpr = new MultDivExprElements());
	}
	
	public ParserRule getMultDivExprRule() {
		return getMultDivExprAccess().getRule();
	}

	//UnaryExpr returns Expr:
	//	{UnaryExpr} op=("-" | "not") expr=UnaryExpr | IfThenElseExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return (pUnaryExpr != null) ? pUnaryExpr : (pUnaryExpr = new UnaryExprElements());
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//IfThenElseExpr returns Expr:
	//	{IfThenElseExpr} "if" a=Expr "then" b=Expr "else" c=Expr | PreDefFnExpr;
	public IfThenElseExprElements getIfThenElseExprAccess() {
		return (pIfThenElseExpr != null) ? pIfThenElseExpr : (pIfThenElseExpr = new IfThenElseExprElements());
	}
	
	public ParserRule getIfThenElseExprRule() {
		return getIfThenElseExprAccess().getRule();
	}

	//PreDefFnExpr returns Expr:
	//	{PrevExpr} "prev" "(" delay=Expr "," init=Expr ")" | {NextExpr} "next" "(" expr=Expr ")" | {GetPropertyExpr}
	//	"Get_Property" "(" component=Expr "," prop=Expr ")" | TermExpr;
	public PreDefFnExprElements getPreDefFnExprAccess() {
		return (pPreDefFnExpr != null) ? pPreDefFnExpr : (pPreDefFnExpr = new PreDefFnExprElements());
	}
	
	public ParserRule getPreDefFnExprRule() {
		return getPreDefFnExprAccess().getRule();
	}

	//PreDefFnNames:
	//	"prev" | "next" | "Get_Property";
	public PreDefFnNamesElements getPreDefFnNamesAccess() {
		return (pPreDefFnNames != null) ? pPreDefFnNames : (pPreDefFnNames = new PreDefFnNamesElements());
	}
	
	public ParserRule getPreDefFnNamesRule() {
		return getPreDefFnNamesAccess().getRule();
	}

	//TermExpr returns Expr:
	//	{IdExpr} id=[aadl2::NamedElement|QID] | ClockID | NestedDotID ({FnCallExpr.fn=current} "(" (args+=Expr (","
	//	args+=Expr)*)? ")")? | {IntLitExpr} val=INTEGER_LIT | {PreExpr} "pre" "(" expr=Expr ")" | {RealLitExpr} val=REAL_LIT |
	//	{BoolLitExpr} val=BooleanLiteral | {ThisExpr} "this" ("." subThis=NestedDotID)? | "(" Expr ")";
	public TermExprElements getTermExprAccess() {
		return (pTermExpr != null) ? pTermExpr : (pTermExpr = new TermExprElements());
	}
	
	public ParserRule getTermExprRule() {
		return getTermExprAccess().getRule();
	}

	//NestedDotID:
	//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
	public NestedDotIDElements getNestedDotIDAccess() {
		return (pNestedDotID != null) ? pNestedDotID : (pNestedDotID = new NestedDotIDElements());
	}
	
	public ParserRule getNestedDotIDRule() {
		return getNestedDotIDAccess().getRule();
	}

	//ClockID:
	//	comp=[aadl2::NamedElement] "." "CLK";
	public ClockIDElements getClockIDAccess() {
		return (pClockID != null) ? pClockID : (pClockID = new ClockIDElements());
	}
	
	public ParserRule getClockIDRule() {
		return getClockIDAccess().getRule();
	}

	//QID:
	//	ID "::" ID;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//PModel returns aadl2::Element: //| BasicPropertyAssociation | PropertyAssociation
	//	ContainedPropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	////	( 'annex' containmentPathElement+=AnnexPath )?
	//ContainmentPath returns aadl2::ContainedNamedElement:
	//	{aadl2::ContainedNamedElement} containmentPathElement+=ContainmentPathElement ("."
	//	containmentPathElement+=ContainmentPathElement)*;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression "in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//	("in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")")?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm |
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm |
	//	IntegerTerm | ListTerm | BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" (containmentPathElement+=QualifiedContainmentPathElement ".")?
	//	containmentPathElement+=ContainmentPathElement ("." containmentPathElement+=ContainmentPathElement)* //	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"[" ownedFieldValue+=FieldPropertyAssociation+ "]";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	{aadl2::ListValue} "(" (ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)*)? ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	////	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//QualifiedContainmentPathElement returns aadl2::ContainmentPathElement:
	//	namedElement=[aadl2::NamedElement|QCLREF];
	public PropertiesGrammarAccess.QualifiedContainmentPathElementElements getQualifiedContainmentPathElementAccess() {
		return gaProperties.getQualifiedContainmentPathElementAccess();
	}
	
	public ParserRule getQualifiedContainmentPathElementRule() {
		return getQualifiedContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	"{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	NumAlt ".." maximum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt ("delta" delta= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	//	INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	////	(DIGIT)+('_' (DIGIT)+)*
	////;
	////terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID "::" ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	////terminal IDANNEXTEXT: ID ANNEXTEXT;
	//terminal ANNEXTEXT:
	//	"{**"->"**}";
	public TerminalRule getANNEXTEXTRule() {
		return gaProperties.getANNEXTEXTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
