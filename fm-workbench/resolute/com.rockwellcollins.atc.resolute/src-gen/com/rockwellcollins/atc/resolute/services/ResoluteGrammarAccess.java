/*
* generated by Xtext
*/
package com.rockwellcollins.atc.resolute.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class ResoluteGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cResoluteLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	ResoluteLibrary;
		public ParserRule getRule() { return rule; }

		//ResoluteLibrary
		public RuleCall getResoluteLibraryParserRuleCall() { return cResoluteLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cResoluteSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	ResoluteSubclause;
		public ParserRule getRule() { return rule; }

		//ResoluteSubclause
		public RuleCall getResoluteSubclauseParserRuleCall() { return cResoluteSubclauseParserRuleCall; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final RuleCall cFunctionDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Namespace returns aadl2::Namespace:
		//	FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall() { return cFunctionDefinitionParserRuleCall; }
	}

	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////|   QuantArg
		//NamedElement returns aadl2::NamedElement:
		//	Definition | Arg | Type;
		public ParserRule getRule() { return rule; }

		//Definition | Arg | Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//Arg
		public RuleCall getArgParserRuleCall_1() { return cArgParserRuleCall_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProveStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClaimStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefinitionBodyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element returns aadl2::Element:
		//	Expr | ProveStatement | ClaimString | DefinitionBody | Type;
		public ParserRule getRule() { return rule; }

		//Expr | ProveStatement | ClaimString | DefinitionBody | Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//ProveStatement
		public RuleCall getProveStatementParserRuleCall_1() { return cProveStatementParserRuleCall_1; }

		//ClaimString
		public RuleCall getClaimStringParserRuleCall_2() { return cClaimStringParserRuleCall_2; }

		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_3() { return cDefinitionBodyParserRuleCall_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
	}

	public class ResoluteLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResoluteLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResoluteLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//ResoluteLibrary:
		//	{ResoluteLibrary} definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//{ResoluteLibrary} definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//{ResoluteLibrary}
		public Action getResoluteLibraryAction_0() { return cResoluteLibraryAction_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//	ConstantDefinition | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//ConstantDefinition | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_0() { return cConstantDefinitionParserRuleCall_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_1() { return cFunctionDefinitionParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSetTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cBuiltinTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	{SetType} "{" type=Type "}" | BuiltinType;
		public ParserRule getRule() { return rule; }

		//{SetType} "{" type=Type "}" | BuiltinType
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SetType} "{" type=Type "}"
		public Group getGroup_0() { return cGroup_0; }

		//{SetType}
		public Action getSetTypeAction_0_0() { return cSetTypeAction_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }

		//BuiltinType
		public RuleCall getBuiltinTypeParserRuleCall_1() { return cBuiltinTypeParserRuleCall_1; }
	}

	public class ElementSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementSet");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameThreadsKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameDataKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameMemoryKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameThread_groupsKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameProcessesKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameSubprogramsKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameSubprogram_groupsKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameProcessorsKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		private final Keyword cNameVirtual_processorsKeyword_0_8 = (Keyword)cNameAlternatives_0.eContents().get(8);
		private final Keyword cNameBusesKeyword_0_9 = (Keyword)cNameAlternatives_0.eContents().get(9);
		private final Keyword cNameVirtual_busesKeyword_0_10 = (Keyword)cNameAlternatives_0.eContents().get(10);
		private final Keyword cNameDevicesKeyword_0_11 = (Keyword)cNameAlternatives_0.eContents().get(11);
		private final Keyword cNameSystemsKeyword_0_12 = (Keyword)cNameAlternatives_0.eContents().get(12);
		private final Keyword cNameAbstractsKeyword_0_13 = (Keyword)cNameAlternatives_0.eContents().get(13);
		private final Keyword cNameConnectionsKeyword_0_14 = (Keyword)cNameAlternatives_0.eContents().get(14);
		private final Keyword cNameComponentsKeyword_0_15 = (Keyword)cNameAlternatives_0.eContents().get(15);
		
		//ElementSet: //stuff for quantifiers only
		//	name=("threads" //non-aadl components
		//	| "data" | "memory" | "thread_groups" | "processes" | "subprograms" | "subprogram_groups" | "processors" |
		//	"virtual_processors" | "buses" | "virtual_buses" | "devices" | "systems" | "abstracts" | "connections" |
		//	"components");
		public ParserRule getRule() { return rule; }

		////stuff for quantifiers only
		//name=("threads" //non-aadl components
		//| "data" | "memory" | "thread_groups" | "processes" | "subprograms" | "subprogram_groups" | "processors" |
		//"virtual_processors" | "buses" | "virtual_buses" | "devices" | "systems" | "abstracts" | "connections" | "components")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"threads" //non-aadl components
		//| "data" | "memory" | "thread_groups" | "processes" | "subprograms" | "subprogram_groups" | "processors" |
		//"virtual_processors" | "buses" | "virtual_buses" | "devices" | "systems" | "abstracts" | "connections" | "components"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"threads"
		public Keyword getNameThreadsKeyword_0_0() { return cNameThreadsKeyword_0_0; }

		//"data"
		public Keyword getNameDataKeyword_0_1() { return cNameDataKeyword_0_1; }

		//"memory"
		public Keyword getNameMemoryKeyword_0_2() { return cNameMemoryKeyword_0_2; }

		//"thread_groups"
		public Keyword getNameThread_groupsKeyword_0_3() { return cNameThread_groupsKeyword_0_3; }

		//"processes"
		public Keyword getNameProcessesKeyword_0_4() { return cNameProcessesKeyword_0_4; }

		//"subprograms"
		public Keyword getNameSubprogramsKeyword_0_5() { return cNameSubprogramsKeyword_0_5; }

		//"subprogram_groups"
		public Keyword getNameSubprogram_groupsKeyword_0_6() { return cNameSubprogram_groupsKeyword_0_6; }

		//"processors"
		public Keyword getNameProcessorsKeyword_0_7() { return cNameProcessorsKeyword_0_7; }

		//"virtual_processors"
		public Keyword getNameVirtual_processorsKeyword_0_8() { return cNameVirtual_processorsKeyword_0_8; }

		//"buses"
		public Keyword getNameBusesKeyword_0_9() { return cNameBusesKeyword_0_9; }

		//"virtual_buses"
		public Keyword getNameVirtual_busesKeyword_0_10() { return cNameVirtual_busesKeyword_0_10; }

		//"devices"
		public Keyword getNameDevicesKeyword_0_11() { return cNameDevicesKeyword_0_11; }

		//"systems"
		public Keyword getNameSystemsKeyword_0_12() { return cNameSystemsKeyword_0_12; }

		//"abstracts"
		public Keyword getNameAbstractsKeyword_0_13() { return cNameAbstractsKeyword_0_13; }

		//"connections"
		public Keyword getNameConnectionsKeyword_0_14() { return cNameConnectionsKeyword_0_14; }

		//"components"
		public Keyword getNameComponentsKeyword_0_15() { return cNameComponentsKeyword_0_15; }
	}

	public class BuiltinTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameDataKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameThreadKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameThread_groupKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameProcessKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameSubprogramKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameSubprogram_groupKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameProcessorKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameVirtual_processorKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		private final Keyword cNameMemoryKeyword_0_8 = (Keyword)cNameAlternatives_0.eContents().get(8);
		private final Keyword cNameBusKeyword_0_9 = (Keyword)cNameAlternatives_0.eContents().get(9);
		private final Keyword cNameVirtual_busKeyword_0_10 = (Keyword)cNameAlternatives_0.eContents().get(10);
		private final Keyword cNameDeviceKeyword_0_11 = (Keyword)cNameAlternatives_0.eContents().get(11);
		private final Keyword cNameSystemKeyword_0_12 = (Keyword)cNameAlternatives_0.eContents().get(12);
		private final Keyword cNameAbstractKeyword_0_13 = (Keyword)cNameAlternatives_0.eContents().get(13);
		private final Keyword cNameConnectionKeyword_0_14 = (Keyword)cNameAlternatives_0.eContents().get(14);
		private final Keyword cNameComponentKeyword_0_15 = (Keyword)cNameAlternatives_0.eContents().get(15);
		private final Keyword cNameStringKeyword_0_16 = (Keyword)cNameAlternatives_0.eContents().get(16);
		private final Keyword cNameIntKeyword_0_17 = (Keyword)cNameAlternatives_0.eContents().get(17);
		private final Keyword cNameRealKeyword_0_18 = (Keyword)cNameAlternatives_0.eContents().get(18);
		private final Keyword cNameBoolKeyword_0_19 = (Keyword)cNameAlternatives_0.eContents().get(19);
		
		//BuiltinType: //aadl components
		//	name=("data" //non-aadl components
		//	| "thread" | "thread_group" | "process" | "subprogram" | "subprogram_group" | "processor" | "virtual_processor" |
		//	"memory" | "bus" | "virtual_bus" | "device" | "system" | "abstract" | "connection" | "component" | "string" | "int" |
		//	"real" | "bool");
		public ParserRule getRule() { return rule; }

		////aadl components
		//name=("data" //non-aadl components
		//| "thread" | "thread_group" | "process" | "subprogram" | "subprogram_group" | "processor" | "virtual_processor" |
		//"memory" | "bus" | "virtual_bus" | "device" | "system" | "abstract" | "connection" | "component" | "string" | "int" |
		//"real" | "bool")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"data" //non-aadl components
		//| "thread" | "thread_group" | "process" | "subprogram" | "subprogram_group" | "processor" | "virtual_processor" |
		//"memory" | "bus" | "virtual_bus" | "device" | "system" | "abstract" | "connection" | "component" | "string" | "int" |
		//"real" | "bool"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"data"
		public Keyword getNameDataKeyword_0_0() { return cNameDataKeyword_0_0; }

		//"thread"
		public Keyword getNameThreadKeyword_0_1() { return cNameThreadKeyword_0_1; }

		//"thread_group"
		public Keyword getNameThread_groupKeyword_0_2() { return cNameThread_groupKeyword_0_2; }

		//"process"
		public Keyword getNameProcessKeyword_0_3() { return cNameProcessKeyword_0_3; }

		//"subprogram"
		public Keyword getNameSubprogramKeyword_0_4() { return cNameSubprogramKeyword_0_4; }

		//"subprogram_group"
		public Keyword getNameSubprogram_groupKeyword_0_5() { return cNameSubprogram_groupKeyword_0_5; }

		//"processor"
		public Keyword getNameProcessorKeyword_0_6() { return cNameProcessorKeyword_0_6; }

		//"virtual_processor"
		public Keyword getNameVirtual_processorKeyword_0_7() { return cNameVirtual_processorKeyword_0_7; }

		//"memory"
		public Keyword getNameMemoryKeyword_0_8() { return cNameMemoryKeyword_0_8; }

		//"bus"
		public Keyword getNameBusKeyword_0_9() { return cNameBusKeyword_0_9; }

		//"virtual_bus"
		public Keyword getNameVirtual_busKeyword_0_10() { return cNameVirtual_busKeyword_0_10; }

		//"device"
		public Keyword getNameDeviceKeyword_0_11() { return cNameDeviceKeyword_0_11; }

		//"system"
		public Keyword getNameSystemKeyword_0_12() { return cNameSystemKeyword_0_12; }

		//"abstract"
		public Keyword getNameAbstractKeyword_0_13() { return cNameAbstractKeyword_0_13; }

		//"connection"
		public Keyword getNameConnectionKeyword_0_14() { return cNameConnectionKeyword_0_14; }

		//"component"
		public Keyword getNameComponentKeyword_0_15() { return cNameComponentKeyword_0_15; }

		//"string"
		public Keyword getNameStringKeyword_0_16() { return cNameStringKeyword_0_16; }

		//"int"
		public Keyword getNameIntKeyword_0_17() { return cNameIntKeyword_0_17; }

		//"real"
		public Keyword getNameRealKeyword_0_18() { return cNameRealKeyword_0_18; }

		//"bool"
		public Keyword getNameBoolKeyword_0_19() { return cNameBoolKeyword_0_19; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_0_2_0 = (RuleCall)cTypeAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cQuantArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_1_3_0 = (RuleCall)cExprAssignment_1_3.eContents().get(0);
		
		////Arg types are used for functions, claims, and quantifiers
		//Arg:
		//	=> (name=ID ":" type=Type) | {QuantArg} name=ID ":" expr=Expr;
		public ParserRule getRule() { return rule; }

		//=> (name=ID ":" type=Type) | {QuantArg} name=ID ":" expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (name=ID ":" type=Type)
		public Group getGroup_0() { return cGroup_0; }

		//name=ID ":" type=Type
		public Group getGroup_0_0() { return cGroup_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_0_2() { return cTypeAssignment_0_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_2_0() { return cTypeTypeParserRuleCall_0_0_2_0; }

		//{QuantArg} name=ID ":" expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{QuantArg}
		public Action getQuantArgAction_1_0() { return cQuantArgAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expr=Expr
		public Assignment getExprAssignment_1_3() { return cExprAssignment_1_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_3_0() { return cExprExprParserRuleCall_1_3_0; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//ConstantDefinition:
		//	name=ID ":" type=Type "=" expr=Expr;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type "=" expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyDefinitionBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//FunctionDefinition:
		//	name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" body=DefinitionBody;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" body=DefinitionBody
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Arg
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_0_0() { return cArgsArgParserRuleCall_2_0_0; }

		//("," args+=Arg)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_1_1_0() { return cArgsArgParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=DefinitionBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//DefinitionBody
		public RuleCall getBodyDefinitionBodyParserRuleCall_4_0() { return cBodyDefinitionBodyParserRuleCall_4_0; }
	}

	public class ClaimStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClaimString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClaimStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cStrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cClaimArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cArgAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cArgArgCrossReference_1_1_0 = (CrossReference)cArgAssignment_1_1.eContents().get(0);
		private final RuleCall cArgArgIDTerminalRuleCall_1_1_0_1 = (RuleCall)cArgArgCrossReference_1_1_0.eContents().get(1);
		
		//ClaimString:
		//	{ClaimString} str=STRING | {ClaimArg} arg=[Arg];
		public ParserRule getRule() { return rule; }

		//{ClaimString} str=STRING | {ClaimArg} arg=[Arg]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ClaimString} str=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{ClaimString}
		public Action getClaimStringAction_0_0() { return cClaimStringAction_0_0; }

		//str=STRING
		public Assignment getStrAssignment_0_1() { return cStrAssignment_0_1; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_1_0() { return cStrSTRINGTerminalRuleCall_0_1_0; }

		//{ClaimArg} arg=[Arg]
		public Group getGroup_1() { return cGroup_1; }

		//{ClaimArg}
		public Action getClaimArgAction_1_0() { return cClaimArgAction_1_0; }

		//arg=[Arg]
		public Assignment getArgAssignment_1_1() { return cArgAssignment_1_1; }

		//[Arg]
		public CrossReference getArgArgCrossReference_1_1_0() { return cArgArgCrossReference_1_1_0; }

		//ID
		public RuleCall getArgArgIDTerminalRuleCall_1_1_0_1() { return cArgArgIDTerminalRuleCall_1_1_0_1; }
	}

	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFuncBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExprAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_0_4_0 = (RuleCall)cExprAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cClaimBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cClaimAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cClaimClaimStringParserRuleCall_1_2_1_0 = (RuleCall)cClaimAssignment_1_2_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_1_3_0 = (RuleCall)cExprAssignment_1_3.eContents().get(0);
		
		//DefinitionBody:
		//	{FuncBody} ":" type=Type "=" expr=Expr | {ClaimBody} "<=" ("**" claim+=ClaimString* "**") expr=Expr;
		public ParserRule getRule() { return rule; }

		//{FuncBody} ":" type=Type "=" expr=Expr | {ClaimBody} "<=" ("**" claim+=ClaimString* "**") expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FuncBody} ":" type=Type "=" expr=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{FuncBody}
		public Action getFuncBodyAction_0_0() { return cFuncBodyAction_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//expr=Expr
		public Assignment getExprAssignment_0_4() { return cExprAssignment_0_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_4_0() { return cExprExprParserRuleCall_0_4_0; }

		//{ClaimBody} "<=" ("**" claim+=ClaimString* "**") expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{ClaimBody}
		public Action getClaimBodyAction_1_0() { return cClaimBodyAction_1_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }

		//"**" claim+=ClaimString* "**"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_2_0() { return cAsteriskAsteriskKeyword_1_2_0; }

		//claim+=ClaimString*
		public Assignment getClaimAssignment_1_2_1() { return cClaimAssignment_1_2_1; }

		//ClaimString
		public RuleCall getClaimClaimStringParserRuleCall_1_2_1_0() { return cClaimClaimStringParserRuleCall_1_2_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_2_2() { return cAsteriskAsteriskKeyword_1_2_2; }

		//expr=Expr
		public Assignment getExprAssignment_1_3() { return cExprAssignment_1_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_3_0() { return cExprExprParserRuleCall_1_3_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cImpliesExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ImpliesExpr;
		public ParserRule getRule() { return rule; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall() { return cImpliesExprParserRuleCall; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr returns Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
		public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="or")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="or"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="or"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="and")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//RelationalOp:
		//	"<" | "<=" | ">" | ">=" | "=" | "<>" | "in";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">=" | "=" | "<>" | "in"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }

		//"in"
		public Keyword getInKeyword_6() { return cInKeyword_6; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr returns Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
		public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=RelationalOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr returns Expr:
		//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
		public ParserRule getRule() { return rule; }

		//TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("+" | "-")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_1_0() { return cRightTimesExprParserRuleCall_1_1_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSetOpExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSetOpExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimesExpr returns Expr:
		//	SetOpExpr (=> ({BinaryExpr.left=current} op=("*" | "/")) right=SetOpExpr)*;
		public ParserRule getRule() { return rule; }

		//SetOpExpr (=> ({BinaryExpr.left=current} op=("*" | "/")) right=SetOpExpr)*
		public Group getGroup() { return cGroup; }

		//SetOpExpr
		public RuleCall getSetOpExprParserRuleCall_0() { return cSetOpExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("*" | "/")) right=SetOpExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("*" | "/"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("*" | "/")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//right=SetOpExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//SetOpExpr
		public RuleCall getRightSetOpExprParserRuleCall_1_1_0() { return cRightSetOpExprParserRuleCall_1_1_0; }
	}

	public class SetOpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOpExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpUnionKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpIntersectKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SetOpExpr returns Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op=("union" | "intersect")) right=PrefixExpr)*;
		public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op=("union" | "intersect")) right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("union" | "intersect")) right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("union" | "intersect"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("union" | "intersect")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("union" | "intersect")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"union" | "intersect"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"union"
		public Keyword getOpUnionKeyword_1_0_0_1_0_0() { return cOpUnionKeyword_1_0_0_1_0_0; }

		//"intersect"
		public Keyword getOpIntersectKeyword_1_0_0_1_0_1() { return cOpIntersectKeyword_1_0_0_1_0_1; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr returns Expr:
		//	{UnaryExpr} op=("-" | "not") expr=PrefixExpr | AtomicExpr;
		public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=("-" | "not") expr=PrefixExpr | AtomicExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=("-" | "not") expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=("-" | "not")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"-" | "not"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_1() { return cAtomicExprParserRuleCall_1; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdNamedElementCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdNamedElementQCREFParserRuleCall_0_1_0_1 = (RuleCall)cIdNamedElementCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSubelementsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSubelementsElementSetParserRuleCall_0_2_1_0 = (RuleCall)cSubelementsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cThisExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_2_1_0 = (RuleCall)cSubAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFailExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFailKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValStringTermParserRuleCall_2_2_0 = (RuleCall)cValAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValIntegerTermParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRealExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValRealTermParserRuleCall_4_1_0 = (RuleCall)cValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBoolExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValBooleanLiteralParserRuleCall_5_1_0 = (RuleCall)cValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStringExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValStringTermParserRuleCall_6_1_0 = (RuleCall)cValAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cIfThenElseExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cIfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cCondAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_7_2_0 = (RuleCall)cCondAssignment_7_2.eContents().get(0);
		private final Keyword cThenKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cThenAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_7_4_0 = (RuleCall)cThenAssignment_7_4.eContents().get(0);
		private final Keyword cElseKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cElseAssignment_7_6 = (Assignment)cGroup_7.eContents().get(6);
		private final RuleCall cElseExprParserRuleCall_7_6_0 = (RuleCall)cElseAssignment_7_6.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cQuantifiedExprAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cQuantAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Alternatives cQuantAlternatives_8_1_0 = (Alternatives)cQuantAssignment_8_1.eContents().get(0);
		private final Keyword cQuantForallKeyword_8_1_0_0 = (Keyword)cQuantAlternatives_8_1_0.eContents().get(0);
		private final Keyword cQuantExistsKeyword_8_1_0_1 = (Keyword)cQuantAlternatives_8_1_0.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cArgsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_8_2_1_0 = (RuleCall)cArgsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_2_2 = (Keyword)cGroup_8_2.eContents().get(2);
		private final Keyword cFullStopKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cExprAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_8_4_0 = (RuleCall)cExprAssignment_8_4.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cBuiltInFuncCallExprAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cFnAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFnBuiltInFuncParserRuleCall_9_1_0 = (RuleCall)cFnAssignment_9_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Assignment cArgsAssignment_9_3_0 = (Assignment)cGroup_9_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_9_3_0_0 = (RuleCall)cArgsAssignment_9_3_0.eContents().get(0);
		private final Group cGroup_9_3_1 = (Group)cGroup_9_3.eContents().get(1);
		private final Keyword cCommaKeyword_9_3_1_0 = (Keyword)cGroup_9_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_9_3_1_1 = (Assignment)cGroup_9_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_9_3_1_1_0 = (RuleCall)cArgsAssignment_9_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cFnCallExprAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cFnAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cFnFunctionDefinitionCrossReference_10_1_0 = (CrossReference)cFnAssignment_10_1.eContents().get(0);
		private final RuleCall cFnFunctionDefinitionIDTerminalRuleCall_10_1_0_1 = (RuleCall)cFnFunctionDefinitionCrossReference_10_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cArgsAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_10_3_0_0 = (RuleCall)cArgsAssignment_10_3_0.eContents().get(0);
		private final Group cGroup_10_3_1 = (Group)cGroup_10_3.eContents().get(1);
		private final Keyword cCommaKeyword_10_3_1_0 = (Keyword)cGroup_10_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_10_3_1_1 = (Assignment)cGroup_10_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_10_3_1_1_0 = (RuleCall)cArgsAssignment_10_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cFilterMapExprAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cMapAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cMapExprParserRuleCall_11_2_0 = (RuleCall)cMapAssignment_11_2.eContents().get(0);
		private final Keyword cForKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_11_4 = (Group)cGroup_11.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_11_4_0 = (Keyword)cGroup_11_4.eContents().get(0);
		private final Assignment cArgsAssignment_11_4_1 = (Assignment)cGroup_11_4.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_11_4_1_0 = (RuleCall)cArgsAssignment_11_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4_2 = (Keyword)cGroup_11_4.eContents().get(2);
		private final Group cGroup_11_5 = (Group)cGroup_11.eContents().get(5);
		private final Keyword cVerticalLineKeyword_11_5_0 = (Keyword)cGroup_11_5.eContents().get(0);
		private final Assignment cFilterAssignment_11_5_1 = (Assignment)cGroup_11_5.eContents().get(1);
		private final RuleCall cFilterExprParserRuleCall_11_5_1_0 = (RuleCall)cFilterAssignment_11_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_6 = (Keyword)cGroup_11.eContents().get(6);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cLeftParenthesisKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final RuleCall cExprParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		
		//AtomicExpr returns Expr:
		//	{IdExpr} id=[aadl2::NamedElement|QCREF] ("." subelements=ElementSet)? //for set expressions
		//	| {ThisExpr} "this" ("." sub=NestedDotID)? | {FailExpr} "fail" val=StringTerm? | {IntExpr} val=IntegerTerm | {RealExpr}
		//	val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm | {IfThenElseExpr} "if" cond=Expr "then"
		//	then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" | "exists") ("(" args+=Arg ")")+ "." expr=Expr |
		//	{BuiltInFuncCallExpr} fn=BuiltInFunc "(" (args+=Expr ("," args+=Expr)*)? ")" | {FnCallExpr} fn=[FunctionDefinition]
		//	"(" (args+=Expr ("," args+=Expr)*)? ")" | {FilterMapExpr} "{" map=Expr "for" ("(" args+=Arg ")")+ ("|" filter=Expr)?
		//	"}" | "(" Expr ")";
		public ParserRule getRule() { return rule; }

		//{IdExpr} id=[aadl2::NamedElement|QCREF] ("." subelements=ElementSet)? //for set expressions
		//| {ThisExpr} "this" ("." sub=NestedDotID)? | {FailExpr} "fail" val=StringTerm? | {IntExpr} val=IntegerTerm | {RealExpr}
		//val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm | {IfThenElseExpr} "if" cond=Expr "then"
		//then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" | "exists") ("(" args+=Arg ")")+ "." expr=Expr |
		//{BuiltInFuncCallExpr} fn=BuiltInFunc "(" (args+=Expr ("," args+=Expr)*)? ")" | {FnCallExpr} fn=[FunctionDefinition] "("
		//(args+=Expr ("," args+=Expr)*)? ")" | {FilterMapExpr} "{" map=Expr "for" ("(" args+=Arg ")")+ ("|" filter=Expr)? "}" |
		//"(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IdExpr} id=[aadl2::NamedElement|QCREF] ("." subelements=ElementSet)? //for set expressions
		public Group getGroup_0() { return cGroup_0; }

		//{IdExpr}
		public Action getIdExprAction_0_0() { return cIdExprAction_0_0; }

		//id=[aadl2::NamedElement|QCREF]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//[aadl2::NamedElement|QCREF]
		public CrossReference getIdNamedElementCrossReference_0_1_0() { return cIdNamedElementCrossReference_0_1_0; }

		//QCREF
		public RuleCall getIdNamedElementQCREFParserRuleCall_0_1_0_1() { return cIdNamedElementQCREFParserRuleCall_0_1_0_1; }

		//("." subelements=ElementSet)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"."
		public Keyword getFullStopKeyword_0_2_0() { return cFullStopKeyword_0_2_0; }

		//subelements=ElementSet
		public Assignment getSubelementsAssignment_0_2_1() { return cSubelementsAssignment_0_2_1; }

		//ElementSet
		public RuleCall getSubelementsElementSetParserRuleCall_0_2_1_0() { return cSubelementsElementSetParserRuleCall_0_2_1_0; }

		//{ThisExpr} "this" ("." sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//{ThisExpr}
		public Action getThisExprAction_1_0() { return cThisExprAction_1_0; }

		//"this"
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//("." sub=NestedDotID)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_2_1() { return cSubAssignment_1_2_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_2_1_0() { return cSubNestedDotIDParserRuleCall_1_2_1_0; }

		//{FailExpr} "fail" val=StringTerm?
		public Group getGroup_2() { return cGroup_2; }

		//{FailExpr}
		public Action getFailExprAction_2_0() { return cFailExprAction_2_0; }

		//"fail"
		public Keyword getFailKeyword_2_1() { return cFailKeyword_2_1; }

		//val=StringTerm?
		public Assignment getValAssignment_2_2() { return cValAssignment_2_2; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_2_2_0() { return cValStringTermParserRuleCall_2_2_0; }

		//{IntExpr} val=IntegerTerm
		public Group getGroup_3() { return cGroup_3; }

		//{IntExpr}
		public Action getIntExprAction_3_0() { return cIntExprAction_3_0; }

		//val=IntegerTerm
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//IntegerTerm
		public RuleCall getValIntegerTermParserRuleCall_3_1_0() { return cValIntegerTermParserRuleCall_3_1_0; }

		//{RealExpr} val=RealTerm
		public Group getGroup_4() { return cGroup_4; }

		//{RealExpr}
		public Action getRealExprAction_4_0() { return cRealExprAction_4_0; }

		//val=RealTerm
		public Assignment getValAssignment_4_1() { return cValAssignment_4_1; }

		//RealTerm
		public RuleCall getValRealTermParserRuleCall_4_1_0() { return cValRealTermParserRuleCall_4_1_0; }

		//{BoolExpr} val=BooleanLiteral
		public Group getGroup_5() { return cGroup_5; }

		//{BoolExpr}
		public Action getBoolExprAction_5_0() { return cBoolExprAction_5_0; }

		//val=BooleanLiteral
		public Assignment getValAssignment_5_1() { return cValAssignment_5_1; }

		//BooleanLiteral
		public RuleCall getValBooleanLiteralParserRuleCall_5_1_0() { return cValBooleanLiteralParserRuleCall_5_1_0; }

		//{StringExpr} val=StringTerm
		public Group getGroup_6() { return cGroup_6; }

		//{StringExpr}
		public Action getStringExprAction_6_0() { return cStringExprAction_6_0; }

		//val=StringTerm
		public Assignment getValAssignment_6_1() { return cValAssignment_6_1; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_6_1_0() { return cValStringTermParserRuleCall_6_1_0; }

		//{IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr
		public Group getGroup_7() { return cGroup_7; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_7_0() { return cIfThenElseExprAction_7_0; }

		//"if"
		public Keyword getIfKeyword_7_1() { return cIfKeyword_7_1; }

		//cond=Expr
		public Assignment getCondAssignment_7_2() { return cCondAssignment_7_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_7_2_0() { return cCondExprParserRuleCall_7_2_0; }

		//"then"
		public Keyword getThenKeyword_7_3() { return cThenKeyword_7_3; }

		//then=Expr
		public Assignment getThenAssignment_7_4() { return cThenAssignment_7_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_7_4_0() { return cThenExprParserRuleCall_7_4_0; }

		//"else"
		public Keyword getElseKeyword_7_5() { return cElseKeyword_7_5; }

		//else=Expr
		public Assignment getElseAssignment_7_6() { return cElseAssignment_7_6; }

		//Expr
		public RuleCall getElseExprParserRuleCall_7_6_0() { return cElseExprParserRuleCall_7_6_0; }

		//{QuantifiedExpr} quant=("forall" | "exists") ("(" args+=Arg ")")+ "." expr=Expr
		public Group getGroup_8() { return cGroup_8; }

		//{QuantifiedExpr}
		public Action getQuantifiedExprAction_8_0() { return cQuantifiedExprAction_8_0; }

		//quant=("forall" | "exists")
		public Assignment getQuantAssignment_8_1() { return cQuantAssignment_8_1; }

		//"forall" | "exists"
		public Alternatives getQuantAlternatives_8_1_0() { return cQuantAlternatives_8_1_0; }

		//"forall"
		public Keyword getQuantForallKeyword_8_1_0_0() { return cQuantForallKeyword_8_1_0_0; }

		//"exists"
		public Keyword getQuantExistsKeyword_8_1_0_1() { return cQuantExistsKeyword_8_1_0_1; }

		//("(" args+=Arg ")")+
		public Group getGroup_8_2() { return cGroup_8_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2_0() { return cLeftParenthesisKeyword_8_2_0; }

		//args+=Arg
		public Assignment getArgsAssignment_8_2_1() { return cArgsAssignment_8_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_8_2_1_0() { return cArgsArgParserRuleCall_8_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2_2() { return cRightParenthesisKeyword_8_2_2; }

		//"."
		public Keyword getFullStopKeyword_8_3() { return cFullStopKeyword_8_3; }

		//expr=Expr
		public Assignment getExprAssignment_8_4() { return cExprAssignment_8_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_8_4_0() { return cExprExprParserRuleCall_8_4_0; }

		//{BuiltInFuncCallExpr} fn=BuiltInFunc "(" (args+=Expr ("," args+=Expr)*)? ")"
		public Group getGroup_9() { return cGroup_9; }

		//{BuiltInFuncCallExpr}
		public Action getBuiltInFuncCallExprAction_9_0() { return cBuiltInFuncCallExprAction_9_0; }

		//fn=BuiltInFunc
		public Assignment getFnAssignment_9_1() { return cFnAssignment_9_1; }

		//BuiltInFunc
		public RuleCall getFnBuiltInFuncParserRuleCall_9_1_0() { return cFnBuiltInFuncParserRuleCall_9_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_9_3() { return cGroup_9_3; }

		//args+=Expr
		public Assignment getArgsAssignment_9_3_0() { return cArgsAssignment_9_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_3_0_0() { return cArgsExprParserRuleCall_9_3_0_0; }

		//("," args+=Expr)*
		public Group getGroup_9_3_1() { return cGroup_9_3_1; }

		//","
		public Keyword getCommaKeyword_9_3_1_0() { return cCommaKeyword_9_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_9_3_1_1() { return cArgsAssignment_9_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_3_1_1_0() { return cArgsExprParserRuleCall_9_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//{FnCallExpr} fn=[FunctionDefinition] "(" (args+=Expr ("," args+=Expr)*)? ")"
		public Group getGroup_10() { return cGroup_10; }

		//{FnCallExpr}
		public Action getFnCallExprAction_10_0() { return cFnCallExprAction_10_0; }

		//fn=[FunctionDefinition]
		public Assignment getFnAssignment_10_1() { return cFnAssignment_10_1; }

		//[FunctionDefinition]
		public CrossReference getFnFunctionDefinitionCrossReference_10_1_0() { return cFnFunctionDefinitionCrossReference_10_1_0; }

		//ID
		public RuleCall getFnFunctionDefinitionIDTerminalRuleCall_10_1_0_1() { return cFnFunctionDefinitionIDTerminalRuleCall_10_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_10_3() { return cGroup_10_3; }

		//args+=Expr
		public Assignment getArgsAssignment_10_3_0() { return cArgsAssignment_10_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_3_0_0() { return cArgsExprParserRuleCall_10_3_0_0; }

		//("," args+=Expr)*
		public Group getGroup_10_3_1() { return cGroup_10_3_1; }

		//","
		public Keyword getCommaKeyword_10_3_1_0() { return cCommaKeyword_10_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_10_3_1_1() { return cArgsAssignment_10_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_3_1_1_0() { return cArgsExprParserRuleCall_10_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }

		//{FilterMapExpr} "{" map=Expr "for" ("(" args+=Arg ")")+ ("|" filter=Expr)? "}"
		public Group getGroup_11() { return cGroup_11; }

		//{FilterMapExpr}
		public Action getFilterMapExprAction_11_0() { return cFilterMapExprAction_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }

		//map=Expr
		public Assignment getMapAssignment_11_2() { return cMapAssignment_11_2; }

		//Expr
		public RuleCall getMapExprParserRuleCall_11_2_0() { return cMapExprParserRuleCall_11_2_0; }

		//"for"
		public Keyword getForKeyword_11_3() { return cForKeyword_11_3; }

		//("(" args+=Arg ")")+
		public Group getGroup_11_4() { return cGroup_11_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_4_0() { return cLeftParenthesisKeyword_11_4_0; }

		//args+=Arg
		public Assignment getArgsAssignment_11_4_1() { return cArgsAssignment_11_4_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_11_4_1_0() { return cArgsArgParserRuleCall_11_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_4_2() { return cRightParenthesisKeyword_11_4_2; }

		//("|" filter=Expr)?
		public Group getGroup_11_5() { return cGroup_11_5; }

		//"|"
		public Keyword getVerticalLineKeyword_11_5_0() { return cVerticalLineKeyword_11_5_0; }

		//filter=Expr
		public Assignment getFilterAssignment_11_5_1() { return cFilterAssignment_11_5_1; }

		//Expr
		public RuleCall getFilterExprParserRuleCall_11_5_1_0() { return cFilterExprParserRuleCall_11_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_6() { return cRightCurlyBracketKeyword_11_6; }

		//"(" Expr ")"
		public Group getGroup_12() { return cGroup_12; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_0() { return cLeftParenthesisKeyword_12_0; }

		//Expr
		public RuleCall getExprParserRuleCall_12_1() { return cExprParserRuleCall_12_1; }

		//")"
		public Keyword getRightParenthesisKeyword_12_2() { return cRightParenthesisKeyword_12_2; }
	}

	public class BuiltInFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFunc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConnectedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProperty_lookupKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClass_ofKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHas_typeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBoundKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cContainedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cConn_sourceKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConn_destKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cProperty_existsKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSumKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAnalysisKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cIs_dataKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cIs_threadKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cIs_thread_groupKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIs_processKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cIs_subprogramKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cIs_subprogram_groupKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cIs_processorKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cIs_virtual_processorKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cIs_memoryKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cIs_busKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cIs_virtual_busKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cIs_deviceKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cIs_systemKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cIs_abstractKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cIs_emptyKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cIdentityKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		
		////QuantArg returns Arg:
		////	{QuantArg} name=ID ':' expr=Expr
		////;
		//BuiltInFunc:
		//	"connected" // type checking predicates
		//	// set predicates
		//	| "property_lookup" | "class_of" | "type" | "has_type" | "bound" | "contained" | "conn_source" | "conn_dest" |
		//	"property_exists" | "sum" | "analysis" | "is_data" | "is_thread" | "is_thread_group" | "is_process" | "is_subprogram"
		//	| "is_subprogram_group" | "is_processor" | "is_virtual_processor" | "is_memory" | "is_bus" | "is_virtual_bus" |
		//	"is_device" | "is_system" | "is_abstract" | "is_empty" | "identity";
		public ParserRule getRule() { return rule; }

		//"connected" // type checking predicates
		//// set predicates
		//| "property_lookup" | "class_of" | "type" | "has_type" | "bound" | "contained" | "conn_source" | "conn_dest" |
		//"property_exists" | "sum" | "analysis" | "is_data" | "is_thread" | "is_thread_group" | "is_process" | "is_subprogram" |
		//"is_subprogram_group" | "is_processor" | "is_virtual_processor" | "is_memory" | "is_bus" | "is_virtual_bus" |
		//"is_device" | "is_system" | "is_abstract" | "is_empty" | "identity"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"connected"
		public Keyword getConnectedKeyword_0() { return cConnectedKeyword_0; }

		//"property_lookup"
		public Keyword getProperty_lookupKeyword_1() { return cProperty_lookupKeyword_1; }

		//"class_of"
		public Keyword getClass_ofKeyword_2() { return cClass_ofKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//"has_type"
		public Keyword getHas_typeKeyword_4() { return cHas_typeKeyword_4; }

		//"bound"
		public Keyword getBoundKeyword_5() { return cBoundKeyword_5; }

		//"contained"
		public Keyword getContainedKeyword_6() { return cContainedKeyword_6; }

		//"conn_source"
		public Keyword getConn_sourceKeyword_7() { return cConn_sourceKeyword_7; }

		//"conn_dest"
		public Keyword getConn_destKeyword_8() { return cConn_destKeyword_8; }

		//"property_exists"
		public Keyword getProperty_existsKeyword_9() { return cProperty_existsKeyword_9; }

		//"sum"
		public Keyword getSumKeyword_10() { return cSumKeyword_10; }

		//"analysis"
		public Keyword getAnalysisKeyword_11() { return cAnalysisKeyword_11; }

		//"is_data"
		public Keyword getIs_dataKeyword_12() { return cIs_dataKeyword_12; }

		//"is_thread"
		public Keyword getIs_threadKeyword_13() { return cIs_threadKeyword_13; }

		//"is_thread_group"
		public Keyword getIs_thread_groupKeyword_14() { return cIs_thread_groupKeyword_14; }

		//"is_process"
		public Keyword getIs_processKeyword_15() { return cIs_processKeyword_15; }

		//"is_subprogram"
		public Keyword getIs_subprogramKeyword_16() { return cIs_subprogramKeyword_16; }

		//"is_subprogram_group"
		public Keyword getIs_subprogram_groupKeyword_17() { return cIs_subprogram_groupKeyword_17; }

		//"is_processor"
		public Keyword getIs_processorKeyword_18() { return cIs_processorKeyword_18; }

		//"is_virtual_processor"
		public Keyword getIs_virtual_processorKeyword_19() { return cIs_virtual_processorKeyword_19; }

		//"is_memory"
		public Keyword getIs_memoryKeyword_20() { return cIs_memoryKeyword_20; }

		//"is_bus"
		public Keyword getIs_busKeyword_21() { return cIs_busKeyword_21; }

		//"is_virtual_bus"
		public Keyword getIs_virtual_busKeyword_22() { return cIs_virtual_busKeyword_22; }

		//"is_device"
		public Keyword getIs_deviceKeyword_23() { return cIs_deviceKeyword_23; }

		//"is_system"
		public Keyword getIs_systemKeyword_24() { return cIs_systemKeyword_24; }

		//"is_abstract"
		public Keyword getIs_abstractKeyword_25() { return cIs_abstractKeyword_25; }

		//"is_empty"
		public Keyword getIs_emptyKeyword_26() { return cIs_emptyKeyword_26; }

		//"identity"
		public Keyword getIdentityKeyword_27() { return cIdentityKeyword_27; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//RealTerm returns aadl2::RealLiteral:
		//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
		public ParserRule getRule() { return rule; }

		//value=UnsignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedReal
		public RuleCall getValueUnsignedRealParserRuleCall_0_0() { return cValueUnsignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedReal");
		private final RuleCall cREAL_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedReal returns aadl2::Real:
		//	REAL_LIT;
		public ParserRule getRule() { return rule; }

		//REAL_LIT
		public RuleCall getREAL_LITTerminalRuleCall() { return cREAL_LITTerminalRuleCall; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//IntegerTerm returns aadl2::IntegerLiteral:
		//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
		public ParserRule getRule() { return rule; }

		//value=UnsignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedInt
		public RuleCall getValueUnsignedIntParserRuleCall_0_0() { return cValueUnsignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedInt");
		private final RuleCall cINTEGER_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInt returns aadl2::Integer:
		//	INTEGER_LIT;
		public ParserRule getRule() { return rule; }

		//INTEGER_LIT
		public RuleCall getINTEGER_LITTerminalRuleCall() { return cINTEGER_LITTerminalRuleCall; }
	}

	public class ResoluteSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResoluteSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResoluteSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProvesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProvesProveStatementParserRuleCall_1_0 = (RuleCall)cProvesAssignment_1.eContents().get(0);
		
		//ResoluteSubclause:
		//	{ResoluteSubclause} proves+=ProveStatement*;
		public ParserRule getRule() { return rule; }

		//{ResoluteSubclause} proves+=ProveStatement*
		public Group getGroup() { return cGroup; }

		//{ResoluteSubclause}
		public Action getResoluteSubclauseAction_0() { return cResoluteSubclauseAction_0; }

		//proves+=ProveStatement*
		public Assignment getProvesAssignment_1() { return cProvesAssignment_1; }

		//ProveStatement
		public RuleCall getProvesProveStatementParserRuleCall_1_0() { return cProvesProveStatementParserRuleCall_1_0; }
	}

	public class NestedDotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedDotID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBaseNamedElementCrossReference_0_0 = (CrossReference)cBaseAssignment_0.eContents().get(0);
		private final RuleCall cBaseNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cBaseNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		
		//NestedDotID:
		//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
		public ParserRule getRule() { return rule; }

		//base=[aadl2::NamedElement] ("." sub=NestedDotID)?
		public Group getGroup() { return cGroup; }

		//base=[aadl2::NamedElement]
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//[aadl2::NamedElement]
		public CrossReference getBaseNamedElementCrossReference_0_0() { return cBaseNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getBaseNamedElementIDTerminalRuleCall_0_0_1() { return cBaseNamedElementIDTerminalRuleCall_0_0_1; }

		//("." sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_1_0() { return cSubNestedDotIDParserRuleCall_1_1_0; }
	}

	public class ProveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cModesKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cModesAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cModesNestedDotIDParserRuleCall_2_0_2_0 = (RuleCall)cModesAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_0_3 = (Group)cGroup_2_0.eContents().get(3);
		private final Keyword cCommaKeyword_2_0_3_0 = (Keyword)cGroup_2_0_3.eContents().get(0);
		private final Assignment cModesAssignment_2_0_3_1 = (Assignment)cGroup_2_0_3.eContents().get(1);
		private final RuleCall cModesNestedDotIDParserRuleCall_2_0_3_1_0 = (RuleCall)cModesAssignment_2_0_3_1.eContents().get(0);
		
		//ProveStatement:
		//	"prove" expr=Expr => ("modes" ":" modes+=NestedDotID ("," modes+=NestedDotID)*)?;
		public ParserRule getRule() { return rule; }

		//"prove" expr=Expr => ("modes" ":" modes+=NestedDotID ("," modes+=NestedDotID)*)?
		public Group getGroup() { return cGroup; }

		//"prove"
		public Keyword getProveKeyword_0() { return cProveKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//=> ("modes" ":" modes+=NestedDotID ("," modes+=NestedDotID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"modes" ":" modes+=NestedDotID ("," modes+=NestedDotID)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"modes"
		public Keyword getModesKeyword_2_0_0() { return cModesKeyword_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_1() { return cColonKeyword_2_0_1; }

		//modes+=NestedDotID
		public Assignment getModesAssignment_2_0_2() { return cModesAssignment_2_0_2; }

		//NestedDotID
		public RuleCall getModesNestedDotIDParserRuleCall_2_0_2_0() { return cModesNestedDotIDParserRuleCall_2_0_2_0; }

		//("," modes+=NestedDotID)*
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }

		//","
		public Keyword getCommaKeyword_2_0_3_0() { return cCommaKeyword_2_0_3_0; }

		//modes+=NestedDotID
		public Assignment getModesAssignment_2_0_3_1() { return cModesAssignment_2_0_3_1; }

		//NestedDotID
		public RuleCall getModesNestedDotIDParserRuleCall_2_0_3_1_0() { return cModesNestedDotIDParserRuleCall_2_0_3_1_0; }
	}
	
	
	private AnnexLibraryElements pAnnexLibrary;
	private AnnexSubclauseElements pAnnexSubclause;
	private NamespaceElements pNamespace;
	private NamedElementElements pNamedElement;
	private ElementElements pElement;
	private ResoluteLibraryElements pResoluteLibrary;
	private DefinitionElements pDefinition;
	private TypeElements pType;
	private ElementSetElements pElementSet;
	private BuiltinTypeElements pBuiltinType;
	private ArgElements pArg;
	private ConstantDefinitionElements pConstantDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private ClaimStringElements pClaimString;
	private DefinitionBodyElements pDefinitionBody;
	private ExprElements pExpr;
	private ImpliesExprElements pImpliesExpr;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private RelationalOpElements pRelationalOp;
	private RelationalExprElements pRelationalExpr;
	private PlusExprElements pPlusExpr;
	private TimesExprElements pTimesExpr;
	private SetOpExprElements pSetOpExpr;
	private PrefixExprElements pPrefixExpr;
	private AtomicExprElements pAtomicExpr;
	private BuiltInFuncElements pBuiltInFunc;
	private RealTermElements pRealTerm;
	private UnsignedRealElements pUnsignedReal;
	private IntegerTermElements pIntegerTerm;
	private UnsignedIntElements pUnsignedInt;
	private ResoluteSubclauseElements pResoluteSubclause;
	private NestedDotIDElements pNestedDotID;
	private ProveStatementElements pProveStatement;
	
	private final Grammar grammar;

	private PropertiesGrammarAccess gaProperties;

	@Inject
	public ResoluteGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rockwellcollins.atc.resolute.Resolute".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	ResoluteLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return (pAnnexLibrary != null) ? pAnnexLibrary : (pAnnexLibrary = new AnnexLibraryElements());
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	ResoluteSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return (pAnnexSubclause != null) ? pAnnexSubclause : (pAnnexSubclause = new AnnexSubclauseElements());
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//Namespace returns aadl2::Namespace:
	//	FunctionDefinition;
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	////|   QuantArg
	//NamedElement returns aadl2::NamedElement:
	//	Definition | Arg | Type;
	public NamedElementElements getNamedElementAccess() {
		return (pNamedElement != null) ? pNamedElement : (pNamedElement = new NamedElementElements());
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//Element returns aadl2::Element:
	//	Expr | ProveStatement | ClaimString | DefinitionBody | Type;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//ResoluteLibrary:
	//	{ResoluteLibrary} definitions+=Definition*;
	public ResoluteLibraryElements getResoluteLibraryAccess() {
		return (pResoluteLibrary != null) ? pResoluteLibrary : (pResoluteLibrary = new ResoluteLibraryElements());
	}
	
	public ParserRule getResoluteLibraryRule() {
		return getResoluteLibraryAccess().getRule();
	}

	//Definition:
	//	ConstantDefinition | FunctionDefinition;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Type:
	//	{SetType} "{" type=Type "}" | BuiltinType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ElementSet: //stuff for quantifiers only
	//	name=("threads" //non-aadl components
	//	| "data" | "memory" | "thread_groups" | "processes" | "subprograms" | "subprogram_groups" | "processors" |
	//	"virtual_processors" | "buses" | "virtual_buses" | "devices" | "systems" | "abstracts" | "connections" |
	//	"components");
	public ElementSetElements getElementSetAccess() {
		return (pElementSet != null) ? pElementSet : (pElementSet = new ElementSetElements());
	}
	
	public ParserRule getElementSetRule() {
		return getElementSetAccess().getRule();
	}

	//BuiltinType: //aadl components
	//	name=("data" //non-aadl components
	//	| "thread" | "thread_group" | "process" | "subprogram" | "subprogram_group" | "processor" | "virtual_processor" |
	//	"memory" | "bus" | "virtual_bus" | "device" | "system" | "abstract" | "connection" | "component" | "string" | "int" |
	//	"real" | "bool");
	public BuiltinTypeElements getBuiltinTypeAccess() {
		return (pBuiltinType != null) ? pBuiltinType : (pBuiltinType = new BuiltinTypeElements());
	}
	
	public ParserRule getBuiltinTypeRule() {
		return getBuiltinTypeAccess().getRule();
	}

	////Arg types are used for functions, claims, and quantifiers
	//Arg:
	//	=> (name=ID ":" type=Type) | {QuantArg} name=ID ":" expr=Expr;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//ConstantDefinition:
	//	name=ID ":" type=Type "=" expr=Expr;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//	name=ID "(" (args+=Arg ("," args+=Arg)*)? ")" body=DefinitionBody;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//ClaimString:
	//	{ClaimString} str=STRING | {ClaimArg} arg=[Arg];
	public ClaimStringElements getClaimStringAccess() {
		return (pClaimString != null) ? pClaimString : (pClaimString = new ClaimStringElements());
	}
	
	public ParserRule getClaimStringRule() {
		return getClaimStringAccess().getRule();
	}

	//DefinitionBody:
	//	{FuncBody} ":" type=Type "=" expr=Expr | {ClaimBody} "<=" ("**" claim+=ClaimString* "**") expr=Expr;
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return (pDefinitionBody != null) ? pDefinitionBody : (pDefinitionBody = new DefinitionBodyElements());
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}

	//Expr:
	//	ImpliesExpr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ImpliesExpr returns Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return (pImpliesExpr != null) ? pImpliesExpr : (pImpliesExpr = new ImpliesExprElements());
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	RelationalExpr (=> ({BinaryExpr.left=current} op="and") right=RelationalExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelationalOp:
	//	"<" | "<=" | ">" | ">=" | "=" | "<>" | "in";
	public RelationalOpElements getRelationalOpAccess() {
		return (pRelationalOp != null) ? pRelationalOp : (pRelationalOp = new RelationalOpElements());
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//RelationalExpr returns Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return (pRelationalExpr != null) ? pRelationalExpr : (pRelationalExpr = new RelationalExprElements());
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr returns Expr:
	//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return (pPlusExpr != null) ? pPlusExpr : (pPlusExpr = new PlusExprElements());
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr returns Expr:
	//	SetOpExpr (=> ({BinaryExpr.left=current} op=("*" | "/")) right=SetOpExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return (pTimesExpr != null) ? pTimesExpr : (pTimesExpr = new TimesExprElements());
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//SetOpExpr returns Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op=("union" | "intersect")) right=PrefixExpr)*;
	public SetOpExprElements getSetOpExprAccess() {
		return (pSetOpExpr != null) ? pSetOpExpr : (pSetOpExpr = new SetOpExprElements());
	}
	
	public ParserRule getSetOpExprRule() {
		return getSetOpExprAccess().getRule();
	}

	//PrefixExpr returns Expr:
	//	{UnaryExpr} op=("-" | "not") expr=PrefixExpr | AtomicExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return (pPrefixExpr != null) ? pPrefixExpr : (pPrefixExpr = new PrefixExprElements());
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AtomicExpr returns Expr:
	//	{IdExpr} id=[aadl2::NamedElement|QCREF] ("." subelements=ElementSet)? //for set expressions
	//	| {ThisExpr} "this" ("." sub=NestedDotID)? | {FailExpr} "fail" val=StringTerm? | {IntExpr} val=IntegerTerm | {RealExpr}
	//	val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm | {IfThenElseExpr} "if" cond=Expr "then"
	//	then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" | "exists") ("(" args+=Arg ")")+ "." expr=Expr |
	//	{BuiltInFuncCallExpr} fn=BuiltInFunc "(" (args+=Expr ("," args+=Expr)*)? ")" | {FnCallExpr} fn=[FunctionDefinition]
	//	"(" (args+=Expr ("," args+=Expr)*)? ")" | {FilterMapExpr} "{" map=Expr "for" ("(" args+=Arg ")")+ ("|" filter=Expr)?
	//	"}" | "(" Expr ")";
	public AtomicExprElements getAtomicExprAccess() {
		return (pAtomicExpr != null) ? pAtomicExpr : (pAtomicExpr = new AtomicExprElements());
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	////QuantArg returns Arg:
	////	{QuantArg} name=ID ':' expr=Expr
	////;
	//BuiltInFunc:
	//	"connected" // type checking predicates
	//	// set predicates
	//	| "property_lookup" | "class_of" | "type" | "has_type" | "bound" | "contained" | "conn_source" | "conn_dest" |
	//	"property_exists" | "sum" | "analysis" | "is_data" | "is_thread" | "is_thread_group" | "is_process" | "is_subprogram"
	//	| "is_subprogram_group" | "is_processor" | "is_virtual_processor" | "is_memory" | "is_bus" | "is_virtual_bus" |
	//	"is_device" | "is_system" | "is_abstract" | "is_empty" | "identity";
	public BuiltInFuncElements getBuiltInFuncAccess() {
		return (pBuiltInFunc != null) ? pBuiltInFunc : (pBuiltInFunc = new BuiltInFuncElements());
	}
	
	public ParserRule getBuiltInFuncRule() {
		return getBuiltInFuncAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
	public RealTermElements getRealTermAccess() {
		return (pRealTerm != null) ? pRealTerm : (pRealTerm = new RealTermElements());
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//UnsignedReal returns aadl2::Real:
	//	REAL_LIT;
	public UnsignedRealElements getUnsignedRealAccess() {
		return (pUnsignedReal != null) ? pUnsignedReal : (pUnsignedReal = new UnsignedRealElements());
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
	public IntegerTermElements getIntegerTermAccess() {
		return (pIntegerTerm != null) ? pIntegerTerm : (pIntegerTerm = new IntegerTermElements());
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//UnsignedInt returns aadl2::Integer:
	//	INTEGER_LIT;
	public UnsignedIntElements getUnsignedIntAccess() {
		return (pUnsignedInt != null) ? pUnsignedInt : (pUnsignedInt = new UnsignedIntElements());
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	//ResoluteSubclause:
	//	{ResoluteSubclause} proves+=ProveStatement*;
	public ResoluteSubclauseElements getResoluteSubclauseAccess() {
		return (pResoluteSubclause != null) ? pResoluteSubclause : (pResoluteSubclause = new ResoluteSubclauseElements());
	}
	
	public ParserRule getResoluteSubclauseRule() {
		return getResoluteSubclauseAccess().getRule();
	}

	//NestedDotID:
	//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
	public NestedDotIDElements getNestedDotIDAccess() {
		return (pNestedDotID != null) ? pNestedDotID : (pNestedDotID = new NestedDotIDElements());
	}
	
	public ParserRule getNestedDotIDRule() {
		return getNestedDotIDAccess().getRule();
	}

	//ProveStatement:
	//	"prove" expr=Expr => ("modes" ":" modes+=NestedDotID ("," modes+=NestedDotID)*)?;
	public ProveStatementElements getProveStatementAccess() {
		return (pProveStatement != null) ? pProveStatement : (pProveStatement = new ProveStatementElements());
	}
	
	public ParserRule getProveStatementRule() {
		return getProveStatementAccess().getRule();
	}

	//PModel returns aadl2::Element: //| BasicPropertyAssociation | PropertyAssociation
	//	ContainedPropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	////	( 'annex' containmentPathElement+=AnnexPath )?
	//ContainmentPath returns aadl2::ContainedNamedElement:
	//	{aadl2::ContainedNamedElement} containmentPathElement+=ContainmentPathElement ("."
	//	containmentPathElement+=ContainmentPathElement)*;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression "in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//	("in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")")?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm |
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm |
	//	IntegerTerm | ListTerm | BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" (containmentPathElement+=QualifiedContainmentPathElement ".")?
	//	containmentPathElement+=ContainmentPathElement ("." containmentPathElement+=ContainmentPathElement)* //	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"[" ownedFieldValue+=FieldPropertyAssociation+ "]";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	{aadl2::ListValue} "(" (ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)*)? ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	////	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//QualifiedContainmentPathElement returns aadl2::ContainmentPathElement:
	//	namedElement=[aadl2::NamedElement|QCLREF];
	public PropertiesGrammarAccess.QualifiedContainmentPathElementElements getQualifiedContainmentPathElementAccess() {
		return gaProperties.getQualifiedContainmentPathElementAccess();
	}
	
	public ParserRule getQualifiedContainmentPathElementRule() {
		return getQualifiedContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	"{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	NumAlt ".." maximum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt ("delta" delta= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	//	INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	////	(DIGIT)+('_' (DIGIT)+)*
	////;
	////terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID "::" ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	////terminal IDANNEXTEXT: ID ANNEXTEXT;
	//terminal ANNEXTEXT:
	//	"{**"->"**}";
	public TerminalRule getANNEXTEXTRule() {
		return gaProperties.getANNEXTEXTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
