/*
* generated by Xtext
*/
grammar InternalResolute;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.rockwellcollins.atc.resolute.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.rockwellcollins.atc.resolute.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rockwellcollins.atc.resolute.services.ResoluteGrammarAccess;

}

@parser::members {

 	private ResoluteGrammarAccess grammarAccess;
 	
    public InternalResoluteParser(TokenStream input, ResoluteGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AnnexLibrary";	
   	}
   	
   	@Override
   	protected ResoluteGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnexLibraryRule()); }
	 iv_ruleAnnexLibrary=ruleAnnexLibrary 
	 { $current=$iv_ruleAnnexLibrary.current; } 
	 EOF 
;

// Rule AnnexLibrary
ruleAnnexLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAnnexLibraryAccess().getResoluteLibraryParserRuleCall()); 
    }
    this_ResoluteLibrary_0=ruleResoluteLibrary
    { 
        $current = $this_ResoluteLibrary_0.current; 
        afterParserOrEnumRuleCall();
    }

;













// Entry rule entryRuleResoluteLibrary
entryRuleResoluteLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResoluteLibraryRule()); }
	 iv_ruleResoluteLibrary=ruleResoluteLibrary 
	 { $current=$iv_ruleResoluteLibrary.current; } 
	 EOF 
;

// Rule ResoluteLibrary
ruleResoluteLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResoluteLibraryAccess().getResoluteLibraryAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResoluteLibraryAccess().getDefinitionsDefinitionParserRuleCall_1_0()); 
	    }
		lv_definitions_1_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResoluteLibraryRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_1_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getConstantDefinitionParserRuleCall_0()); 
    }
    this_ConstantDefinition_0=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getFunctionDefinitionParserRuleCall_1()); 
    }
    this_FunctionDefinition_1=ruleFunctionDefinition
    { 
        $current = $this_FunctionDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getSetTypeAction_0_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeTypeParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_0_3());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBuiltinTypeParserRuleCall_1()); 
    }
    this_BuiltinType_4=ruleBuiltinType
    { 
        $current = $this_BuiltinType_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElementSet
entryRuleElementSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementSetRule()); }
	 iv_ruleElementSet=ruleElementSet 
	 { $current=$iv_ruleElementSet.current; } 
	 EOF 
;

// Rule ElementSet
ruleElementSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=	'threads' 
    {
        newLeafNode(lv_name_0_1, grammarAccess.getElementSetAccess().getNameThreadsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=	'data' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getElementSetAccess().getNameDataKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=	'memory' 
    {
        newLeafNode(lv_name_0_3, grammarAccess.getElementSetAccess().getNameMemoryKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

    |		lv_name_0_4=	'thread_groups' 
    {
        newLeafNode(lv_name_0_4, grammarAccess.getElementSetAccess().getNameThread_groupsKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_4, null);
	    }

    |		lv_name_0_5=	'processes' 
    {
        newLeafNode(lv_name_0_5, grammarAccess.getElementSetAccess().getNameProcessesKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_5, null);
	    }

    |		lv_name_0_6=	'subprograms' 
    {
        newLeafNode(lv_name_0_6, grammarAccess.getElementSetAccess().getNameSubprogramsKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_6, null);
	    }

    |		lv_name_0_7=	'subprogram_groups' 
    {
        newLeafNode(lv_name_0_7, grammarAccess.getElementSetAccess().getNameSubprogram_groupsKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_7, null);
	    }

    |		lv_name_0_8=	'processors' 
    {
        newLeafNode(lv_name_0_8, grammarAccess.getElementSetAccess().getNameProcessorsKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_8, null);
	    }

    |		lv_name_0_9=	'virtual_processors' 
    {
        newLeafNode(lv_name_0_9, grammarAccess.getElementSetAccess().getNameVirtual_processorsKeyword_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_9, null);
	    }

    |		lv_name_0_10=	'buses' 
    {
        newLeafNode(lv_name_0_10, grammarAccess.getElementSetAccess().getNameBusesKeyword_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_10, null);
	    }

    |		lv_name_0_11=	'virtual_buses' 
    {
        newLeafNode(lv_name_0_11, grammarAccess.getElementSetAccess().getNameVirtual_busesKeyword_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_11, null);
	    }

    |		lv_name_0_12=	'devices' 
    {
        newLeafNode(lv_name_0_12, grammarAccess.getElementSetAccess().getNameDevicesKeyword_0_11());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_12, null);
	    }

    |		lv_name_0_13=	'systems' 
    {
        newLeafNode(lv_name_0_13, grammarAccess.getElementSetAccess().getNameSystemsKeyword_0_12());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_13, null);
	    }

    |		lv_name_0_14=	'abstracts' 
    {
        newLeafNode(lv_name_0_14, grammarAccess.getElementSetAccess().getNameAbstractsKeyword_0_13());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_14, null);
	    }

    |		lv_name_0_15=	'connections' 
    {
        newLeafNode(lv_name_0_15, grammarAccess.getElementSetAccess().getNameConnectionsKeyword_0_14());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_15, null);
	    }

    |		lv_name_0_16=	'components' 
    {
        newLeafNode(lv_name_0_16, grammarAccess.getElementSetAccess().getNameComponentsKeyword_0_15());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_16, null);
	    }

    |		lv_name_0_17=	'features' 
    {
        newLeafNode(lv_name_0_17, grammarAccess.getElementSetAccess().getNameFeaturesKeyword_0_16());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementSetRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_17, null);
	    }

)

)
)
;





// Entry rule entryRuleBuiltinType
entryRuleBuiltinType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinTypeRule()); }
	 iv_ruleBuiltinType=ruleBuiltinType 
	 { $current=$iv_ruleBuiltinType.current; } 
	 EOF 
;

// Rule BuiltinType
ruleBuiltinType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=	'data' 
    {
        newLeafNode(lv_name_0_1, grammarAccess.getBuiltinTypeAccess().getNameDataKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=	'thread' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getBuiltinTypeAccess().getNameThreadKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=	'thread_group' 
    {
        newLeafNode(lv_name_0_3, grammarAccess.getBuiltinTypeAccess().getNameThread_groupKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

    |		lv_name_0_4=	'process' 
    {
        newLeafNode(lv_name_0_4, grammarAccess.getBuiltinTypeAccess().getNameProcessKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_4, null);
	    }

    |		lv_name_0_5=	'subprogram' 
    {
        newLeafNode(lv_name_0_5, grammarAccess.getBuiltinTypeAccess().getNameSubprogramKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_5, null);
	    }

    |		lv_name_0_6=	'subprogram_group' 
    {
        newLeafNode(lv_name_0_6, grammarAccess.getBuiltinTypeAccess().getNameSubprogram_groupKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_6, null);
	    }

    |		lv_name_0_7=	'processor' 
    {
        newLeafNode(lv_name_0_7, grammarAccess.getBuiltinTypeAccess().getNameProcessorKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_7, null);
	    }

    |		lv_name_0_8=	'virtual_processor' 
    {
        newLeafNode(lv_name_0_8, grammarAccess.getBuiltinTypeAccess().getNameVirtual_processorKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_8, null);
	    }

    |		lv_name_0_9=	'memory' 
    {
        newLeafNode(lv_name_0_9, grammarAccess.getBuiltinTypeAccess().getNameMemoryKeyword_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_9, null);
	    }

    |		lv_name_0_10=	'bus' 
    {
        newLeafNode(lv_name_0_10, grammarAccess.getBuiltinTypeAccess().getNameBusKeyword_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_10, null);
	    }

    |		lv_name_0_11=	'virtual_bus' 
    {
        newLeafNode(lv_name_0_11, grammarAccess.getBuiltinTypeAccess().getNameVirtual_busKeyword_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_11, null);
	    }

    |		lv_name_0_12=	'device' 
    {
        newLeafNode(lv_name_0_12, grammarAccess.getBuiltinTypeAccess().getNameDeviceKeyword_0_11());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_12, null);
	    }

    |		lv_name_0_13=	'system' 
    {
        newLeafNode(lv_name_0_13, grammarAccess.getBuiltinTypeAccess().getNameSystemKeyword_0_12());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_13, null);
	    }

    |		lv_name_0_14=	'abstract' 
    {
        newLeafNode(lv_name_0_14, grammarAccess.getBuiltinTypeAccess().getNameAbstractKeyword_0_13());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_14, null);
	    }

    |		lv_name_0_15=	'aadl' 
    {
        newLeafNode(lv_name_0_15, grammarAccess.getBuiltinTypeAccess().getNameAadlKeyword_0_14());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_15, null);
	    }

    |		lv_name_0_16=	'feature' 
    {
        newLeafNode(lv_name_0_16, grammarAccess.getBuiltinTypeAccess().getNameFeatureKeyword_0_15());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_16, null);
	    }

    |		lv_name_0_17=	'connection' 
    {
        newLeafNode(lv_name_0_17, grammarAccess.getBuiltinTypeAccess().getNameConnectionKeyword_0_16());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_17, null);
	    }

    |		lv_name_0_18=	'component' 
    {
        newLeafNode(lv_name_0_18, grammarAccess.getBuiltinTypeAccess().getNameComponentKeyword_0_17());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_18, null);
	    }

    |		lv_name_0_19=	'string' 
    {
        newLeafNode(lv_name_0_19, grammarAccess.getBuiltinTypeAccess().getNameStringKeyword_0_18());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_19, null);
	    }

    |		lv_name_0_20=	'int' 
    {
        newLeafNode(lv_name_0_20, grammarAccess.getBuiltinTypeAccess().getNameIntKeyword_0_19());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_20, null);
	    }

    |		lv_name_0_21=	'real' 
    {
        newLeafNode(lv_name_0_21, grammarAccess.getBuiltinTypeAccess().getNameRealKeyword_0_20());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_21, null);
	    }

    |		lv_name_0_22=	'bool' 
    {
        newLeafNode(lv_name_0_22, grammarAccess.getBuiltinTypeAccess().getNameBoolKeyword_0_21());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_22, null);
	    }

)

)
)
;





// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
RULE_ID

)
)	':' 
(
(
ruleType
)
)))=>((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgAccess().getColonKeyword_0_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getTypeTypeParserRuleCall_0_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgAccess().getQuantArgAction_1_0(),
            $current);
    }
)(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getExprExprParserRuleCall_1_3_0()); 
	    }
		lv_expr_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getArgsArgParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getArgsArgParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyDefinitionBodyParserRuleCall_4_0()); 
	    }
		lv_body_6_0=ruleDefinitionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"DefinitionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClaimString
entryRuleClaimString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClaimStringRule()); }
	 iv_ruleClaimString=ruleClaimString 
	 { $current=$iv_ruleClaimString.current; } 
	 EOF 
;

// Rule ClaimString
ruleClaimString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClaimStringAccess().getClaimStringAction_0_0(),
            $current);
    }
)(
(
		lv_str_1_0=RULE_STRING
		{
			newLeafNode(lv_str_1_0, grammarAccess.getClaimStringAccess().getStrSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClaimStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClaimStringAccess().getClaimArgAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClaimStringRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClaimStringAccess().getArgArgCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleDefinitionBody
entryRuleDefinitionBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionBodyRule()); }
	 iv_ruleDefinitionBody=ruleDefinitionBody 
	 { $current=$iv_ruleDefinitionBody.current; } 
	 EOF 
;

// Rule DefinitionBody
ruleDefinitionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionBodyAccess().getFuncBodyAction_0_0(),
            $current);
    }
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionBodyAccess().getColonKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getTypeTypeParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionBodyAccess().getEqualsSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getExprExprParserRuleCall_0_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionBodyAccess().getClaimBodyAction_1_0(),
            $current);
    }
)	otherlv_6='<=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionBodyAccess().getLessThanSignEqualsSignKeyword_1_1());
    }
(	otherlv_7='**' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefinitionBodyAccess().getAsteriskAsteriskKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getClaimClaimStringParserRuleCall_1_2_1_0()); 
	    }
		lv_claim_8_0=ruleClaimString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		add(
       			$current, 
       			"claim",
        		lv_claim_8_0, 
        		"ClaimString");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='**' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefinitionBodyAccess().getAsteriskAsteriskKeyword_1_2_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionBodyAccess().getExprExprParserRuleCall_1_3_0()); 
	    }
		lv_expr_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getImpliesExprParserRuleCall()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'=>' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=>' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'or' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'or' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getRelationalExprParserRuleCall_0()); 
    }
    this_RelationalExpr_0=ruleRelationalExpr
    { 
        $current = $this_RelationalExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'and' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightRelationalExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelationalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getInKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    { 
        $current = $this_PlusExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPlusExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getTimesExprParserRuleCall_0()); 
    }
    this_TimesExpr_0=ruleTimesExpr
    { 
        $current = $this_TimesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightTimesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTimesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TimesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTimesExpr
entryRuleTimesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimesExprRule()); }
	 iv_ruleTimesExpr=ruleTimesExpr 
	 { $current=$iv_ruleTimesExpr.current; } 
	 EOF 
;

// Rule TimesExpr
ruleTimesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimesExprAccess().getSetOpExprParserRuleCall_0()); 
    }
    this_SetOpExpr_0=ruleSetOpExpr
    { 
        $current = $this_SetOpExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'*' 
 

    |			'/' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTimesExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTimesExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesExprAccess().getRightSetOpExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleSetOpExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SetOpExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetOpExpr
entryRuleSetOpExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetOpExprRule()); }
	 iv_ruleSetOpExpr=ruleSetOpExpr 
	 { $current=$iv_ruleSetOpExpr.current; } 
	 EOF 
;

// Rule SetOpExpr
ruleSetOpExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSetOpExprAccess().getPrefixExprParserRuleCall_0()); 
    }
    this_PrefixExpr_0=rulePrefixExpr
    { 
        $current = $this_PrefixExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'union' 
 

    |			'intersect' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSetOpExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'union' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getSetOpExprAccess().getOpUnionKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetOpExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'intersect' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getSetOpExprAccess().getOpIntersectKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetOpExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getSetOpExprAccess().getRightPrefixExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetOpExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	 iv_rulePrefixExpr=rulePrefixExpr 
	 { $current=$iv_rulePrefixExpr.current; } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=	'-' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'not' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getPrefixExprAccess().getOpNotKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrefixExprAccess().getAtomicExprParserRuleCall_1()); 
    }
    this_AtomicExpr_3=ruleAtomicExpr
    { 
        $current = $this_AtomicExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicExpr
entryRuleAtomicExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExprRule()); }
	 iv_ruleAtomicExpr=ruleAtomicExpr 
	 { $current=$iv_ruleAtomicExpr.current; } 
	 EOF 
;

// Rule AtomicExpr
ruleAtomicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIdExprAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getIdNamedElementCrossReference_0_1_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicExprAccess().getFullStopKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getSubelementsElementSetParserRuleCall_0_2_1_0()); 
	    }
		lv_subelements_3_0=ruleElementSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"subelements",
        		lv_subelements_3_0, 
        		"ElementSet");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getThisExprAction_1_0(),
            $current);
    }
)	otherlv_5='this' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicExprAccess().getThisKeyword_1_1());
    }
(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomicExprAccess().getFullStopKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getSubNestedDotIDParserRuleCall_1_2_1_0()); 
	    }
		lv_sub_7_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_7_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getFailExprAction_2_0(),
            $current);
    }
)	otherlv_9='fail' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomicExprAccess().getFailKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValStringTermParserRuleCall_2_2_0()); 
	    }
		lv_val_10_0=ruleStringTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_10_0, 
        		"StringTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIntExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValIntegerTermParserRuleCall_3_1_0()); 
	    }
		lv_val_12_0=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_12_0, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getRealExprAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValRealTermParserRuleCall_4_1_0()); 
	    }
		lv_val_14_0=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_14_0, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getBoolExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValBooleanLiteralParserRuleCall_5_1_0()); 
	    }
		lv_val_16_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_16_0, 
        		"BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getStringExprAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getValStringTermParserRuleCall_6_1_0()); 
	    }
		lv_val_18_0=ruleStringTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_18_0, 
        		"StringTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIfThenElseExprAction_7_0(),
            $current);
    }
)	otherlv_20='if' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getAtomicExprAccess().getIfKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getCondExprParserRuleCall_7_2_0()); 
	    }
		lv_cond_21_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_21_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_22='then' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getAtomicExprAccess().getThenKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getThenExprParserRuleCall_7_4_0()); 
	    }
		lv_then_23_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_23_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_24='else' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getAtomicExprAccess().getElseKeyword_7_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getElseExprParserRuleCall_7_6_0()); 
	    }
		lv_else_25_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_25_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getQuantifiedExprAction_8_0(),
            $current);
    }
)(
(
(
		lv_quant_27_1=	'forall' 
    {
        newLeafNode(lv_quant_27_1, grammarAccess.getAtomicExprAccess().getQuantForallKeyword_8_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_27_1, null);
	    }

    |		lv_quant_27_2=	'exists' 
    {
        newLeafNode(lv_quant_27_2, grammarAccess.getAtomicExprAccess().getQuantExistsKeyword_8_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_27_2, null);
	    }

)

)
)(	otherlv_28='(' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_8_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsArgParserRuleCall_8_2_1_0()); 
	    }
		lv_args_29_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_29_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_30=')' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_8_2_2());
    }
)+	otherlv_31='.' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getAtomicExprAccess().getFullStopKeyword_8_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprExprParserRuleCall_8_4_0()); 
	    }
		lv_expr_32_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_32_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getBuiltInFuncCallExprAction_9_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFnBuiltInFuncParserRuleCall_9_1_0()); 
	    }
		lv_fn_34_0=ruleBuiltInFunc		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"fn",
        		lv_fn_34_0, 
        		"BuiltInFunc");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_35='(' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_9_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_3_0_0()); 
	    }
		lv_args_36_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_36_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_37=',' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getAtomicExprAccess().getCommaKeyword_9_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_3_1_1_0()); 
	    }
		lv_args_38_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_38_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_39=')' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_9_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getFnCallExprAction_10_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_41=RULE_ID
	{
		newLeafNode(otherlv_41, grammarAccess.getAtomicExprAccess().getFnFunctionDefinitionCrossReference_10_1_0()); 
	}

)
)	otherlv_42='(' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_10_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_10_3_0_0()); 
	    }
		lv_args_43_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_43_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_44=',' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getAtomicExprAccess().getCommaKeyword_10_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_10_3_1_1_0()); 
	    }
		lv_args_45_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_45_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_46=')' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_10_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getFilterMapExprAction_11_0(),
            $current);
    }
)	otherlv_48='{' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getAtomicExprAccess().getLeftCurlyBracketKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getMapExprParserRuleCall_11_2_0()); 
	    }
		lv_map_49_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"map",
        		lv_map_49_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_50='for' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getAtomicExprAccess().getForKeyword_11_3());
    }
(	otherlv_51='(' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_11_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsArgParserRuleCall_11_4_1_0()); 
	    }
		lv_args_52_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_52_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_53=')' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_11_4_2());
    }
)+(	otherlv_54='|' 
    {
    	newLeafNode(otherlv_54, grammarAccess.getAtomicExprAccess().getVerticalLineKeyword_11_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFilterExprParserRuleCall_11_5_1_0()); 
	    }
		lv_filter_55_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_55_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_56='}' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getAtomicExprAccess().getRightCurlyBracketKeyword_11_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getLetExprAction_12_0(),
            $current);
    }
)	otherlv_58='let' 
    {
    	newLeafNode(otherlv_58, grammarAccess.getAtomicExprAccess().getLetKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getBindingLetBindingParserRuleCall_12_2_0()); 
	    }
		lv_binding_59_0=ruleLetBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"binding",
        		lv_binding_59_0, 
        		"LetBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_60=';' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getAtomicExprAccess().getSemicolonKeyword_12_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprExprParserRuleCall_12_4_0()); 
	    }
		lv_expr_61_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_61_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_62='(' 
    {
    	newLeafNode(otherlv_62, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_13_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_13_1()); 
    }
    this_Expr_63=ruleExpr
    { 
        $current = $this_Expr_63.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_64=')' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_13_2());
    }
))
;





// Entry rule entryRuleLetBinding
entryRuleLetBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetBindingRule()); }
	 iv_ruleLetBinding=ruleLetBinding 
	 { $current=$iv_ruleLetBinding.current; } 
	 EOF 
;

// Rule LetBinding
ruleLetBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLetBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetBindingAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetBindingAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetBindingRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLetBindingAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetBindingAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetBindingRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBuiltInFunc
entryRuleBuiltInFunc returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInFuncRule()); } 
	 iv_ruleBuiltInFunc=ruleBuiltInFunc 
	 { $current=$iv_ruleBuiltInFunc.current.getText(); }  
	 EOF 
;

// Rule BuiltInFunc
ruleBuiltInFunc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='connected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getConnectedKeyword_0()); 
    }

    |
	kw='property_lookup' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getProperty_lookupKeyword_1()); 
    }

    |
	kw='class_of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getClass_ofKeyword_2()); 
    }

    |
	kw='subcomponent_of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getSubcomponent_ofKeyword_3()); 
    }

    |
	kw='name' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getNameKeyword_4()); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getTypeKeyword_5()); 
    }

    |
	kw='has_type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getHas_typeKeyword_6()); 
    }

    |
	kw='is_connected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_connectedKeyword_7()); 
    }

    |
	kw='bound' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getBoundKeyword_8()); 
    }

    |
	kw='contained' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getContainedKeyword_9()); 
    }

    |
	kw='conn_source' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getConn_sourceKeyword_10()); 
    }

    |
	kw='conn_dest' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getConn_destKeyword_11()); 
    }

    |
	kw='property_exists' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getProperty_existsKeyword_12()); 
    }

    |
	kw='sum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getSumKeyword_13()); 
    }

    |
	kw='analysis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getAnalysisKeyword_14()); 
    }

    |
	kw='instance' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getInstanceKeyword_15()); 
    }

    |
	kw='instances' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getInstancesKeyword_16()); 
    }

    |
	kw='upper_bound' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getUpper_boundKeyword_17()); 
    }

    |
	kw='lower_bound' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getLower_boundKeyword_18()); 
    }

    |
	kw='receive_error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getReceive_errorKeyword_19()); 
    }

    |
	kw='contain_error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getContain_errorKeyword_20()); 
    }

    |
	kw='propagate_error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getPropagate_errorKeyword_21()); 
    }

    |
	kw='error_state_reachable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getError_state_reachableKeyword_22()); 
    }

    |
	kw='connections' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getConnectionsKeyword_23()); 
    }

    |
	kw='is_data' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_dataKeyword_24()); 
    }

    |
	kw='is_thread' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_threadKeyword_25()); 
    }

    |
	kw='is_thread_group' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_thread_groupKeyword_26()); 
    }

    |
	kw='is_process' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_processKeyword_27()); 
    }

    |
	kw='is_subprogram' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_subprogramKeyword_28()); 
    }

    |
	kw='is_subprogram_group' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_subprogram_groupKeyword_29()); 
    }

    |
	kw='is_processor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_processorKeyword_30()); 
    }

    |
	kw='is_virtual_processor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_virtual_processorKeyword_31()); 
    }

    |
	kw='is_memory' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_memoryKeyword_32()); 
    }

    |
	kw='is_bus' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_busKeyword_33()); 
    }

    |
	kw='is_virtual_bus' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_virtual_busKeyword_34()); 
    }

    |
	kw='is_device' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_deviceKeyword_35()); 
    }

    |
	kw='is_system' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_systemKeyword_36()); 
    }

    |
	kw='is_abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_abstractKeyword_37()); 
    }

    |
	kw='is_empty' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_emptyKeyword_38()); 
    }

    |
	kw='singleton' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getSingletonKeyword_39()); 
    }

    |
	kw='is_bidirectional' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_bidirectionalKeyword_40()); 
    }

    |
	kw='is_data_access' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_data_accessKeyword_41()); 
    }

    |
	kw='is_bus_access' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_bus_accessKeyword_42()); 
    }

    |
	kw='is_data_port' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_data_portKeyword_43()); 
    }

    |
	kw='is_event_port' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_event_portKeyword_44()); 
    }

    |
	kw='is_event_data_port' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFuncAccess().getIs_event_data_portKeyword_45()); 
    }
)
    ;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueUnsignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"UnsignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedReal
entryRuleUnsignedReal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedRealRule()); } 
	 iv_ruleUnsignedReal=ruleUnsignedReal 
	 { $current=$iv_ruleUnsignedReal.current.getText(); }  
	 EOF 
;

// Rule UnsignedReal
ruleUnsignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_REAL_LIT_0=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_0);
    }

    { 
    newLeafNode(this_REAL_LIT_0, grammarAccess.getUnsignedRealAccess().getREAL_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueUnsignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"UnsignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedIntRule()); } 
	 iv_ruleUnsignedInt=ruleUnsignedInt 
	 { $current=$iv_ruleUnsignedInt.current.getText(); }  
	 EOF 
;

// Rule UnsignedInt
ruleUnsignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getUnsignedIntAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleResoluteSubclause
entryRuleResoluteSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResoluteSubclauseRule()); }
	 iv_ruleResoluteSubclause=ruleResoluteSubclause 
	 { $current=$iv_ruleResoluteSubclause.current; } 
	 EOF 
;

// Rule ResoluteSubclause
ruleResoluteSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResoluteSubclauseAccess().getResoluteSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResoluteSubclauseAccess().getProvesProveStatementParserRuleCall_1_0()); 
	    }
		lv_proves_1_0=ruleProveStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResoluteSubclauseRule());
	        }
       		add(
       			$current, 
       			"proves",
        		lv_proves_1_0, 
        		"ProveStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNestedDotID
entryRuleNestedDotID returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedDotIDRule()); }
	 iv_ruleNestedDotID=ruleNestedDotID 
	 { $current=$iv_ruleNestedDotID.current; } 
	 EOF 
;

// Rule NestedDotID
ruleNestedDotID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedDotIDRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNestedDotIDAccess().getBaseNamedElementCrossReference_0_0()); 
	}

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedDotIDAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getSubNestedDotIDParserRuleCall_1_1_0()); 
	    }
		lv_sub_2_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedDotIDRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_2_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleProveStatement
entryRuleProveStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProveStatementRule()); }
	 iv_ruleProveStatement=ruleProveStatement 
	 { $current=$iv_ruleProveStatement.current; } 
	 EOF 
;

// Rule ProveStatement
ruleProveStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='prove' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProveStatementAccess().getProveKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProveStatementAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProveStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'modes' 
	':' 
(
(
ruleNestedDotID
)
)(	',' 
(
(
ruleNestedDotID
)
))*))=>(	otherlv_2='modes' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProveStatementAccess().getModesKeyword_2_0_0());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProveStatementAccess().getColonKeyword_2_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProveStatementAccess().getModesNestedDotIDParserRuleCall_2_0_2_0()); 
	    }
		lv_modes_4_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProveStatementRule());
	        }
       		add(
       			$current, 
       			"modes",
        		lv_modes_4_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProveStatementAccess().getCommaKeyword_2_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProveStatementAccess().getModesNestedDotIDParserRuleCall_2_0_3_1_0()); 
	    }
		lv_modes_6_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProveStatementRule());
	        }
       		add(
       			$current, 
       			"modes",
        		lv_modes_6_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?)
;







// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainedPropertyAssociationRule()); }
	 iv_ruleContainedPropertyAssociation=ruleContainedPropertyAssociation 
	 { $current=$iv_ruleContainedPropertyAssociation.current; } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |(
(
		lv_append_2_0=	'+=>' 
    {
        newLeafNode(lv_append_2_0, grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "append", true, "+=>");
	    }

)
))(
(
		lv_constant_3_0=	'constant' 
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); 
	    }
		lv_ownedValue_4_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_4_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); 
	    }
		lv_ownedValue_6_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_6_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(	otherlv_7='applies' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getContainedPropertyAssociationAccess().getAppliesKeyword_4_0());
    }
	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainedPropertyAssociationAccess().getToKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_0()); 
	    }
		lv_appliesTo_9_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_9_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_3_1_0()); 
	    }
		lv_appliesTo_11_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_11_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_12='in' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainedPropertyAssociationAccess().getInKeyword_5_0());
    }
	otherlv_13='binding' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getContainedPropertyAssociationAccess().getBindingKeyword_5_1());
    }
	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_3_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=')' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_4());
    }
)?	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6());
    }
)
;









// Entry rule entryRuleContainmentPath
entryRuleContainmentPath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainmentPathRule()); }
	 iv_ruleContainmentPath=ruleContainmentPath 
	 { $current=$iv_ruleContainmentPath.current; } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainmentPathAccess().getContainedNamedElementAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getContainmentPathElementContainmentPathElementParserRuleCall_1_0()); 
	    }
		lv_containmentPathElement_1_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		add(
       			$current, 
       			"containmentPathElement",
        		lv_containmentPathElement_1_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getContainmentPathElementContainmentPathElementParserRuleCall_2_1_0()); 
	    }
		lv_containmentPathElement_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		add(
       			$current, 
       			"containmentPathElement",
        		lv_containmentPathElement_3_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalModalPropertyValueRule()); }
	 iv_ruleOptionalModalPropertyValue=ruleOptionalModalPropertyValue 
	 { $current=$iv_ruleOptionalModalPropertyValue.current; } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalModalPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionalModalPropertyValueAccess().getInKeyword_1_0());
    }
	otherlv_2='modes' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalModalPropertyValueAccess().getModesKeyword_1_1());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_4_1_0()); 
	}

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_5());
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRecordTermParserRuleCall_0()); 
    }
    this_RecordTerm_0=ruleRecordTerm
    { 
        $current = $this_RecordTerm_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getReferenceTermParserRuleCall_1()); 
    }
    this_ReferenceTerm_1=ruleReferenceTerm
    { 
        $current = $this_ReferenceTerm_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComponentClassifierTermParserRuleCall_2()); 
    }
    this_ComponentClassifierTerm_2=ruleComponentClassifierTerm
    { 
        $current = $this_ComponentClassifierTerm_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComputedTermParserRuleCall_3()); 
    }
    this_ComputedTerm_3=ruleComputedTerm
    { 
        $current = $this_ComputedTerm_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getStringTermParserRuleCall_4()); 
    }
    this_StringTerm_4=ruleStringTerm
    { 
        $current = $this_StringTerm_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getNumericRangeTermParserRuleCall_5()); 
    }
    this_NumericRangeTerm_5=ruleNumericRangeTerm
    { 
        $current = $this_NumericRangeTerm_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRealTermParserRuleCall_6()); 
    }
    this_RealTerm_6=ruleRealTerm
    { 
        $current = $this_RealTerm_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getIntegerTermParserRuleCall_7()); 
    }
    this_IntegerTerm_7=ruleIntegerTerm
    { 
        $current = $this_IntegerTerm_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getListTermParserRuleCall_8()); 
    }
    this_ListTerm_8=ruleListTerm
    { 
        $current = $this_ListTerm_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getBooleanLiteralParserRuleCall_9()); 
    }
    this_BooleanLiteral_9=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralorReferenceTermParserRuleCall_10()); 
    }
    this_LiteralorReferenceTerm_10=ruleLiteralorReferenceTerm
    { 
        $current = $this_LiteralorReferenceTerm_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralorReferenceTerm
entryRuleLiteralorReferenceTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralorReferenceTermRule()); }
	 iv_ruleLiteralorReferenceTerm=ruleLiteralorReferenceTerm 
	 { $current=$iv_ruleLiteralorReferenceTerm.current; } 
	 EOF 
;

// Rule LiteralorReferenceTerm
ruleLiteralorReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralorReferenceTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralorReferenceTermAccess().getNamedValueAbstractNamedValueCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=	'true' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |	otherlv_2='false' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReferenceTerm
entryRuleReferenceTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceTermRule()); }
	 iv_ruleReferenceTerm=ruleReferenceTerm 
	 { $current=$iv_ruleReferenceTerm.current; } 
	 EOF 
;

// Rule ReferenceTerm
ruleReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='reference' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceTermAccess().getReferenceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getContainmentPathElementQualifiedContainmentPathElementParserRuleCall_2_0_0()); 
	    }
		lv_containmentPathElement_2_0=ruleQualifiedContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		add(
       			$current, 
       			"containmentPathElement",
        		lv_containmentPathElement_2_0, 
        		"QualifiedContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceTermAccess().getFullStopKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getContainmentPathElementContainmentPathElementParserRuleCall_3_0()); 
	    }
		lv_containmentPathElement_4_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		add(
       			$current, 
       			"containmentPathElement",
        		lv_containmentPathElement_4_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReferenceTermAccess().getFullStopKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getContainmentPathElementContainmentPathElementParserRuleCall_4_1_0()); 
	    }
		lv_containmentPathElement_6_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		add(
       			$current, 
       			"containmentPathElement",
        		lv_containmentPathElement_6_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReferenceTermAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getOwnedFieldValueFieldPropertyAssociationParserRuleCall_1_0()); 
	    }
		lv_ownedFieldValue_1_0=ruleFieldPropertyAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"ownedFieldValue",
        		lv_ownedFieldValue_1_0, 
        		"FieldPropertyAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleComputedTerm
entryRuleComputedTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComputedTermRule()); }
	 iv_ruleComputedTerm=ruleComputedTerm 
	 { $current=$iv_ruleComputedTerm.current; } 
	 EOF 
;

// Rule ComputedTerm
ruleComputedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='compute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComputedTermAccess().getComputeKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComputedTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getComputedTermAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComputedTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComputedTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentClassifierTerm
entryRuleComponentClassifierTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentClassifierTermRule()); }
	 iv_ruleComponentClassifierTerm=ruleComponentClassifierTerm 
	 { $current=$iv_ruleComponentClassifierTerm.current; } 
	 EOF 
;

// Rule ComponentClassifierTerm
ruleComponentClassifierTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='classifier' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentClassifierTermAccess().getClassifierKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentClassifierTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentClassifierTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentClassifierTermAccess().getClassifierComponentClassifierCrossReference_2_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentClassifierTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListTerm
entryRuleListTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListTermRule()); }
	 iv_ruleListTerm=ruleListTerm 
	 { $current=$iv_ruleListTerm.current; } 
	 EOF 
;

// Rule ListTerm
ruleListTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTermAccess().getListValueAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_ownedListElement_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListTermAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_ownedListElement_4_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_4_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldPropertyAssociationRule()); }
	 iv_ruleFieldPropertyAssociation=ruleFieldPropertyAssociation 
	 { $current=$iv_ruleFieldPropertyAssociation.current; } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldPropertyAssociationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); 
	}

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedValue_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldPropertyAssociationRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleQualifiedContainmentPathElement
entryRuleQualifiedContainmentPathElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedContainmentPathElementRule()); }
	 iv_ruleQualifiedContainmentPathElement=ruleQualifiedContainmentPathElement 
	 { $current=$iv_ruleQualifiedContainmentPathElement.current; } 
	 EOF 
;

// Rule QualifiedContainmentPathElement
ruleQualifiedContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedContainmentPathElementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getQualifiedContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0()); 
	    }
		ruleQCLREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStringTerm
entryRuleStringTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTermRule()); }
	 iv_ruleStringTerm=ruleStringTerm 
	 { $current=$iv_ruleStringTerm.current; } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoQuoteStringRule()); } 
	 iv_ruleNoQuoteString=ruleNoQuoteString 
	 { $current=$iv_ruleNoQuoteString.current.getText(); }  
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayRangeAccess().getArrayRangeAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); 
	    }
		lv_lowerBound_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_2_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); 
	    }
		lv_upperBound_4_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_4_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;









// Entry rule entryRuleNumericRangeTerm
entryRuleNumericRangeTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericRangeTermRule()); }
	 iv_ruleNumericRangeTerm=ruleNumericRangeTerm 
	 { $current=$iv_ruleNumericRangeTerm.current; } 
	 EOF 
;

// Rule NumericRangeTerm
ruleNumericRangeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMinimumNumAltParserRuleCall_0_0()); 
	    }
		lv_minimum_0_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"minimum",
        		lv_minimum_0_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='..' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericRangeTermAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMaximumNumAltParserRuleCall_2_0()); 
	    }
		lv_maximum_2_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"maximum",
        		lv_maximum_2_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='delta' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericRangeTermAccess().getDeltaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getDeltaNumAltParserRuleCall_3_1_0()); 
	    }
		lv_delta_4_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_4_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumAlt
entryRuleNumAlt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumAltRule()); }
	 iv_ruleNumAlt=ruleNumAlt 
	 { $current=$iv_ruleNumAlt.current; } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); 
    }
    this_RealTerm_0=ruleRealTerm
    { 
        $current = $this_RealTerm_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); 
    }
    this_IntegerTerm_1=ruleIntegerTerm
    { 
        $current = $this_IntegerTerm_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); 
    }
    this_SignedConstant_2=ruleSignedConstant
    { 
        $current = $this_SignedConstant_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); 
    }
    this_ConstantValue_3=ruleConstantValue
    { 
        $current = $this_ConstantValue_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTVALUE
entryRuleINTVALUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTVALUERule()); } 
	 iv_ruleINTVALUE=ruleINTVALUE 
	 { $current=$iv_ruleINTVALUE.current.getText(); }  
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQCLREF
entryRuleQCLREF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQCLREFRule()); } 
	 iv_ruleQCLREF=ruleQCLREF 
	 { $current=$iv_ruleQCLREF.current.getText(); }  
	 EOF 
;

// Rule QCLREF
ruleQCLREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_0()); 
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCLREFAccess().getColonColonKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;





RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

fragment RULE_INT_EXPONENT : ('e'|'E') '+'? RULE_DIGIT+;

RULE_REAL_LIT : RULE_DIGIT+ ('_' RULE_DIGIT+)* '.' RULE_DIGIT+ ('_' RULE_DIGIT+)* RULE_EXPONENT?;

RULE_INTEGER_LIT : RULE_DIGIT+ ('_' RULE_DIGIT+)* ('#' RULE_BASED_INTEGER '#' RULE_INT_EXPONENT?|RULE_INT_EXPONENT?);

fragment RULE_DIGIT : '0'..'9';

fragment RULE_EXTENDED_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_BASED_INTEGER : RULE_EXTENDED_DIGIT ('_'? RULE_EXTENDED_DIGIT)*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ID : ('a'..'z'|'A'..'Z') ('_'? ('a'..'z'|'A'..'Z'|'0'..'9'))*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


