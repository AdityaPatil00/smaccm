/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.resolute.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.osate.xtext.aadl2.properties.ui.contentassist.PropertiesProposalProvider;

/**
 * Represents a generated, default implementation of interface
 * {@link IProposalProvider}. Methods are dynamically dispatched on the first
 * parameter, i.e., you can override them with a more concrete subtype.
 */
@SuppressWarnings("all")
public class AbstractResoluteProposalProvider extends PropertiesProposalProvider {

    public void completeResoluteLibrary_Definitions(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeType_Type(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeBuiltinType_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
        // subclasses may override
    }

    public void completeArg_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeArg_Type(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeConstantDefinition_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeConstantDefinition_Type(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeConstantDefinition_Expr(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeFunctionDefinition_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeFunctionDefinition_Args(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeFunctionDefinition_Body(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeClaimString_Str(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeClaimString_Arg(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        lookupCrossReference(((CrossReference) assignment.getTerminal()), context, acceptor);
    }

    public void completeDefinitionBody_Type(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeDefinitionBody_Expr(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeDefinitionBody_Claim(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeImpliesExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void completeImpliesExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeOrExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void completeOrExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAndExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void completeAndExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeRelationalExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeRelationalExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completePlusExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
    }

    public void completePlusExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeTimesExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
    }

    public void completeTimesExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeSetOpExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
    }

    public void completeSetOpExpr_Right(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completePrefixExpr_Op(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
    }

    public void completePrefixExpr_Expr(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Id(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        lookupCrossReference(((CrossReference) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Val(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Cond(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Then(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Else(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Quant(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
        // subclasses may override
    }

    public void completeAtomicExpr_Args(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Expr(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Fn(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (assignment.getTerminal() instanceof RuleCall) {
            completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
        }
        if (assignment.getTerminal() instanceof CrossReference) {
            lookupCrossReference(((CrossReference) assignment.getTerminal()), context, acceptor);
        }
    }

    public void completeAtomicExpr_Map(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeAtomicExpr_Filter(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeRealTerm_Value(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeRealTerm_Unit(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        lookupCrossReference(((CrossReference) assignment.getTerminal()), context, acceptor);
    }

    public void completeIntegerTerm_Value(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeIntegerTerm_Unit(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        lookupCrossReference(((CrossReference) assignment.getTerminal()), context, acceptor);
    }

    public void completeResoluteSubclause_Proves(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void completeProveStatement_Expr(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
    }

    public void complete_AnnexLibrary(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_AnnexSubclause(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_NamedElement(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_Element(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ResoluteLibrary(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_Definition(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_Type(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_BuiltinType(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_Arg(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ConstantDefinition(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_FunctionDefinition(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ClaimString(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_DefinitionBody(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_Expr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ImpliesExpr(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_OrExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_AndExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_RelationalOp(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_RelationalExpr(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_PlusExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_TimesExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_SetOpExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_PrefixExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_AtomicExpr(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_BuiltInFunc(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_RealTerm(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_UnsignedReal(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_IntegerTerm(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_UnsignedInt(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ResoluteSubclause(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }

    public void complete_ProveStatement(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // subclasses may override
    }
}
